{"version":3,"sources":["synthcore/modules/env/types.ts","utils/svg/arc.ts","components/pots/RotaryPotBase.tsx","synthcore/modules/env/envUtils.ts","synthcore/types.ts","synthcore/modules/env/envReducer.ts","midi/buttonLeftMidiValues.ts","midi/buttonCenterMidiValues.ts","midi/buttonRightMidiValues.ts","synthcore/modules/ui/uiReducer.ts","midi/mapCC.ts","midi/buttons.ts","midi/controllerIds.ts","midi/mapNRPN.ts","midi/modules/osc/controllersOsc.ts","synthcore/utils.ts","synthcore/modules/mainDisplay/types.ts","midi/modules/noise/controllersNoise.ts","midi/modules/ringMod/controllersRingMod.ts","midi/modules/fx/controllersFx.ts","midi/modules/lfo/controllersLfo.ts","midi/modules/srcMix/controllersSrcMix.ts","midi/modules/route/controllersRoute.ts","midi/modules/masterClock/controllersMasterClock.ts","midi/modules/arp/controllersArp.ts","midi/modules/voices/controllersVoices.ts","midi/modules/mainDisplay/controllersMainDisplay.ts","midi/modules/transpose/controllersTranspose.ts","midi/modules/kbd/controllersKbd.ts","midi/modules/filters/controllersFilters.ts","midi/modules/postMix/controllersPostMix.ts","midi/modules/voiceOut/controllersVoiceOut.ts","midi/modules/env/controllersEnv.ts","midi/modules/commonFx/controllersCommonFx.ts","midi/modules/out/controllersOut.ts","midi/modules/performance/controllersPerformance.ts","midi/controllers.ts","midi/utils.ts","midi/modules/env/midiApiEnv.ts","synthcore/modules/mods/modsReducer.ts","synthcore/modules/mods/utils.ts","synthcore/modules/mods/modsApi.ts","midi/modules/route/midiApiRoute.ts","midi/midiApi.ts","components/curves/curveCalculator.ts","synthcore/modules/env/envApi.ts","synthcore/modules/mainDisplay/mainDisplayReducer.ts","midi/midibus.ts","synthcore/modules/mods/modsMainDisplayApi.ts","synthcore/modules/env/envMainDisplayApi.ts","synthcore/modules/mainDisplay/mainDisplayApi.ts","synthcore/synthcoreApi.ts","synthcore/modules/env/envMiddleware.ts","synthcore/modules/mainDisplay/mainDisplayMiddleware.ts","synthcore/synthcoreMiddleware.ts","synthcore/modules/mods/modsMiddleware.ts","synthcore/modules/settings/settingsReducer.ts","synthcore/store.ts","synthcore/hooks.ts","components/pots/RotaryPotWithLedRingBase.tsx","components/pots/RotaryPot32.tsx","components/pots/RotaryPot10.tsx","components/buttons/RoundPushButtonBase.tsx","components/buttons/RoundButtonBase.tsx","components/buttons/RoundPushButton8.tsx","components/buttons/RoundLedPushButton8.tsx","components/misc/Header.tsx","components/modules/DCO1.tsx","components/modules/DCO2.tsx","components/modules/VCO.tsx","components/pots/RotaryPot17.tsx","components/modules/PreFilterMixer.tsx","components/modules/PostFilterMixer.tsx","components/modules/Noise.tsx","components/modules/Ringmod.tsx","components/modules/Distortion.tsx","components/pots/RotaryPot40.tsx","components/modules/LowPassFilter.tsx","components/misc/HorizontalLine.tsx","components/buttons/RoundRotaryButton17.tsx","components/modules/StateVariableFilter.tsx","components/modules/Envelope.tsx","components/modules/LFO.tsx","components/pots/RotaryPotWOLeds.tsx","components/pots/RotaryPotWOLeds10.tsx","components/misc/Display.tsx","components/modules/DigitalFX.tsx","components/modules/OutputMixer.tsx","components/modules/Chorus.tsx","components/modules/BitCrusher.tsx","components/modules/Arpeggiator.tsx","components/pots/RotaryPotWOLeds17.tsx","components/pots/RotaryPotWOLeds32.tsx","components/modules/MainDisplay.tsx","components/modules/Clock.tsx","components/modules/BitCrusherPre.tsx","components/modules/Route.tsx","components/leds/Led.tsx","components/modules/KeyboardControls.tsx","components/modules/VoiceSelector.tsx","controller/mods/ModValues.tsx","controller/mods/SourceLabels.tsx","controller/mods/TargetLabels.tsx","controller/mods/AmountBar.tsx","controller/utils/scrollsync/ScrollSync.tsx","controller/utils/scrollsync/utils.ts","hooks.ts","controller/utils/scrollsync/ScrollSyncNode.tsx","controller/mods/AmountsTable.tsx","controller/mods/ModControl.tsx","controller/PotLabels.tsx","controller/mods/ModPotLabels.tsx","controller/mods/Mod.tsx","components/curves/AnimatedCurve.tsx","utils/svg/pointsString.ts","controller/envelopes/utils.ts","controller/envelopes/StageBlock.tsx","controller/envelopes/Stages.tsx","controller/Button.tsx","controller/envelopes/StageActivator.tsx","controller/envelopes/EnvOptions.tsx","controller/envelopes/StageParams.tsx","controller/envelopes/StageNames.tsx","controller/envelopes/EnvelopeControl.tsx","controller/envelopes/EnvPotLabels.tsx","controller/envelopes/Env.tsx","controller/Controller.tsx","components/MainPanel.tsx","components/Keyboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StageId","ReleaseMode","LoopMode","Curve","polarToCartesian","centerX","centerY","radius","angleInDegrees","angleInRadians","Math","PI","x","cos","y","sin","describeArc","startAngle","endAngle","start","end","largeArcFlag","join","RotaryPot","knobRadius","onClick","onIncrement","defaultValue","arc","resolution","stepSize","useState","center","setCenter","undefined","previousAngle","setPreviousAngle","isDragging","setIsDragging","svgRef","useRef","updateCenter","useCallback","updatedCenter","bb","current","getBoundingClientRect","round","width","height","accumulator","setAccumulator","onMouseMove","event","pointer","xDiff","yDiff","sqrt","distToCenter","clientX","clientY","newAngle","deltaX","deltaY","atan","getAngle","angleDiff","valueChange","ledArc","getValueChangeFromDiff","nextAccumulator","abs","absSteps","floor","steps","onMouseDown","preventDefault","onMouseUp","useEffect","window","addEventListener","removeEventListener","ref","cx","cy","r","className","EnvControllerId","ControllerGroupIds","ApiSource","getDefaultEnvelope","id","stages","push","DELAY","enabled","curve","LIN","level","time","ATTACK","LOG1","DECAY1","DECAY2","SUSTAIN","RELEASE1","RELEASE2","STOPPED","env","resetOnTrigger","resetLevel","releaseMode","NORMAL","loopMode","GATED","loopEnabled","maxLoops","invert","bipolar","setInvert","updateReleaseLevels","initialState","envs","gui","currEnvId","currStageId","ui","env3Id","getStage","state","payload","stage","getEnv","envelopesSlice","createSlice","name","reducers","setLevel","value","setDualLevels","stage1","stage2","setTime","setCurve","setReleaseMode","setResetOnTrigger","setLoopMode","setLoopEnabled","setMaxLoops","setStageEnabled","selectStage","deselectStage","selectEnv","setEnv3Id","toggleStageEnabled","toggleInvert","toggleRetrigger","toggleReleaseMode","toggleLoopMode","toggleLoopEnabled","toggleStageSelected","actions","selectEnvelopes","envelopes","selectEnvelope","envId","selectInvert","selectRetrigger","selectCurrStageId","selectCurrEnvId","selectEnv3Id","buttonLeftMidiValues","buttonCenterMidiValues","buttonRightMidiValues","uiSlice","controller","increment","click","mapCC","MIDI_BANK_SELECT","MIDI_MOD_WHEEL","MIDI_BREATH_CTRL","BUTTONS_LEFT","MIDI_FOOT_CTRL","KEYBOARD_PORTAMENTO","DATA_ENTRY_MSB","BUTTONS_CENTER","BUTTONS_RIGHT","DCO1_NOTE","DCO1_SUPER_SAW","DCO1_WAVEFORM","DCO1_SUB1","DCO1_SUB2","DCO1_PW","DCO2_NOTE","DCO2_DETUNE","DCO2_SUPER_SAW","DCO2_WAVEFORM","DCO2_SUB1","DCO2_SUB2","DCO2_PW","VCO_NOTE","VCO_DETUNE","VCO_WAVEFORM","VCO_CROSS_MOD","VCO_PW","DISTORTION_DRIVE","DISTORTION_LEVEL","BIT_CRUSHER_BITS","BIT_CRUSHER_RATE","BIT_CRUSHER_LEVEL","MIDI_BANK_SELECT_LSB","MIDI_MOD_WHEEL_LSB","MIDI_BREATH_CTRL_LSB","DATA_ENTRY_HSB","MIDI_FOOT_CTRL_LSB","KEYBOARD_PORTAMENTO_LSB","DATA_ENTRY_LSB","LFO_RATE","LFO_DEPTH","LFO_DELAY","LEVEL_OSC1","LEVEL_OSC2","LEVEL_OSC3","LEVEL_NOISE","LEVEL_RING_MOD","LEVEL_EXT_AUDIO","ROUTE_AMOUNT","MASTER_CLOCK_RATE","ARP_TEMPO","MAIN_POT1","MAIN_POT2","MAIN_POT3","MAIN_POT4","MAIN_POT5","MAIN_POT6","KEYBOARD_UNISON_DETUNE","LPF_INPUT","LPF_DRIVE","LPF_RESONANCE","LPF_CUTOFF","LPF_FM_AMT","LPF_ENV_AMT","MIDI_SUSTAIN","LPF_LFO_AMT","LPF_KBD_AMT","SVF_INPUT","SVF_DRIVE","SVF_RESONANCE","SVF_CUTOFF","SVF_FM_AMT","SVF_ENV_AMT","SVF_LFO_AMT","SVF_KBD_AMT","POST_MIX_LPF","POST_MIX_SVF","POST_MIX_SINE1","POST_MIX_SINE2","VOICE_OUT_PAN","VOICE_OUT_AMOUNT","VOICE_OUT_FX1_SEND","VOICE_OUT_FX2_SEND","ENV_LOOP_MODE","ENV_MAX_LOOPS","ENV_TOGGLE_STAGE","ENV_SELECT_ENV","ENV_SELECT_ENV3_ID","DSP1_POT1","DSP1_POT2","DSP1_POT3","DSP1_EFFECT","DSP2_POT1","NRPN_LSB","NRPN_MSB","RPN_LSB","RPN_MSB","DSP2_POT2","DSP2_POT3","DSP2_EFFECT","CHORUS_RATE","CHORUS_DEPTH","FX_BIT_CRUSHER_BITS","FX_BIT_CRUSHER_RATE","FX_MIX_LEVEL_DSP1","FX_MIX_LEVEL_DSP2","FX_MIX_LEVEL_CHORUS","FX_MIX_LEVEL_BIT_CRUSHER","OUTPUT_VOLUME","OUTPUT_SPREAD","OUTPUT_HEADPHONES","ControllerId","BUTTONS","cc","CC","values","mapNRPN","ENV_CURVE","ENV_LEVEL","ENV_TIME","DCO1_PITCH","DCO2_PITCH","VCO_PITCH","storeDispatch","MainDisplayScreenId","MainDisplayControllerIds","controllersOsc","DCO1","props","label","PITCH","isTargetDigi","type","addr","NRPN","NOTE","SUPER_SAW","WAVEFORM","SUB1","SUB2","PW","SYNC","DCO1_SYNC","OSC1_SYNC_OFF","OSC1_SYNC_1_2","OSC1_SYNC_2_1","MODE","DCO1_MODE","OSC1_MODE_DCO","OSC1_MODE_WT","OSC1_MODE_PCM","SUB_WAVE","DCO1_SUB_WAVE","OSC1_SUB_WAVE_SQR","OSC1_SUB_WAVE_SAW","WHEEL","DCO1_WHEEL","OSC1_WHEEL_OFF","OSC1_WHEEL_ON","LFO","DCO1_LFO","OSC1_LFO_OFF","OSC1_LFO_ON","KBD","DCO1_KBD","OSC1_KBD_OFF","OSC1_KBD_ON","DCO2","DETUNE","DCO2_MODE","OSC2_MODE_DCO","OSC2_MODE_WT","OSC2_MODE_PCM","DCO2_SUB_WAVE","OSC2_SUB_WAVE_SQR","OSC2_SUB_WAVE_SAW","DCO2_WHEEL","OSC2_WHEEL_OFF","OSC2_WHEEL_ON","DCO2_LFO","OSC2_LFO_OFF","OSC2_LFO_ON","DCO2_KBD","OSC2_KBD_OFF","OSC2_KBD_ON","VCO","CROSS_MOD","shortLabel","VCO_SYNC","OSC3_SYNC_OFF","OSC3_SYNC_HARD","OSC3_SYNC_CEM_HARD","OSC3_SYNC_CEM_SOFT","CROSS_MOD_SRC","VCO_CROSS_MOD_SRC","OSC3_CROSS_MOD_SRC_OSC1","OSC3_CROSS_MOD_SRC_EXT","EXT_CV","VCO_EXT_CV","OSC3_EXT_CV_OFF","OSC3_EXT_CV_ON","VCO_WHEEL","OSC3_WHEEL_OFF","OSC3_WHEEL_ON","VCO_LFO","OSC3_LFO_OFF","OSC3_LFO_ON","VCO_KBD","OSC3_KBD_OFF","OSC3_KBD_ON","controllersNoise","COLOUR","NOISE_COLOUR","NOISE_COLOUR_WHITE","NOISE_COLOUR_PINK","NOISE_COLOUR_RED","controllersRingMod","SOURCE","RING_MOD_SOURCE","RING_MOD_SOURCE_1_2","RING_MOD_SOURCE_EXT_2","controllersFx","DISTORTION","DRIVE","LEVEL","IN","DISTORTION_IN","DISTORTION_IN_A","DISTORTION_IN_B","DISTORTION_IN_BOTH","CLIP","DISTORTION_CLIP","DISTORTION_SOFT","DISTORTION_HARD","OUT","DISTORTION_OUT","DISTORTION_OUT_A","DISTORTION_OUT_B","DISTORTION_OUT_BOTH","BIT_CRUSHER","BITS","RATE","BIT_CRUSHER_IN","BIT_CRUSHER_IN_A","BIT_CRUSHER_IN_B","BIT_CRUSHER_IN_BOTH","BIT_CRUSHER_OUT","BIT_CRUSHER_OUT_A","BIT_CRUSHER_OUT_B","BIT_CRUSHER_OUT_BOTH","controllersLfo","ctrlIndex","DEPTH","LFO_LFO","LFO1","LFO2","LFO3","LFO4","SHAPE","LFO_SHAPE","LFO_SHAPE_SAW","LFO_SHAPE_TRI","LFO_SHAPE_SQR","LFO_SHAPE_SIN","LFO_SHAPE_SH","LFO_SYNC","LFO_SYNC_OFF","LFO_SYNC_ON","RESET","LFO_RESET","LFO_RESET_OFF","LFO_RESET_ON","ONCE","LFO_ONCE","LFO_ONCE_OFF","LFO_ONCE_ON","OUTPUT","isSourceDigi","controllersSrcMix","SRC_MIX_LEVEL_OSC1","SRC_MIX_LEVEL_OSC2","SRC_MIX_LEVEL_OSC3","SRC_MIX_LEVEL_NOISE","SRC_MIX_LEVEL_RING_MOD","SRC_MIX_LEVEL_EXT_AUDIO","OUT_OSC1","SRC_MIX_OUT_OSC1","OSC1_OUT_A","OSC1_OUT_B","OSC1_OUT_BOTH","OUT_OSC2","SRC_MIX_OUT_OSC2","OSC2_OUT_A","OSC2_OUT_B","OSC2_OUT_BOTH","OUT_OSC3","SRC_MIX_OUT_OSC3","OSC3_OUT_A","OSC3_OUT_B","OSC3_OUT_BOTH","OUT_NOISE","SRC_MIX_OUT_NOISE","NOISE_OUT_A","NOISE_OUT_B","NOISE_OUT_BOTH","OUT_RING_MOD","SRC_MIX_OUT_RING_MOD","RING_MOD_OUT_A","RING_MOD_OUT_B","RING_MOD_OUT_BOTH","OUT_EXT_AUDIO","EXT_AUDIO_OUT_A","EXT_AUDIO_OUT_B","EXT_AUDIO_OUT_BOTH","controllersRoute","AMOUNT","FROM","ROUTE_FROM","ROUTE_OFF","ROUTE_FROM_ON","ROUTE_TO_ON","TO","ROUTE_TO","controllersMasterClock","MASTER_CLOCK_SOURCE","MASTER_CLOCK_SRC_MASTER","MASTER_CLOCK_SRC_MIDI","MASTER_CLOCK_SRC_EXT","controllersArp","TEMPO","ON_OFF","ARP_ON_OFF","ARP_OFF","ARP_ON","TRIGGER","ARP_TRIGGER","ARP_TRIGGER_OFF","ARP_TRIGGER_ON","ARP_SYNC","ARP_SYNC_OFF","ARP_SYNC_MASTER","ARP_SYNC_LFO1","ARP_SYNC_EXT","RANGE","ARP_RANGE","ARP_RANGE_1","ARP_RANGE_2","ARP_RANGE_3","ARP_MODE","ARP_MODE_UP","ARP_MODE_DOWN","ARP_MODE_UP_DOWN","ARP_MODE_RANDOM","ARP_MODE_OTHER","ARPEGGIATOR","controllersVoices","VOICE1","VOICE_SELECTOR_1","VOICE1_OFF","VOICE1_ON","VOICE2","VOICE_SELECTOR_2","VOICE2_OFF","VOICE2_ON","VOICE3","VOICE_SELECTOR_3","VOICE3_OFF","VOICE3_ON","VOICE4","VOICE_SELECTOR_4","VOICE4_OFF","VOICE4_ON","VOICE5","VOICE_SELECTOR_5","VOICE5_OFF","VOICE5_ON","VOICE6","VOICE_SELECTOR_6","VOICE6_OFF","VOICE6_ON","VOICE7","VOICE_SELECTOR_7","VOICE7_OFF","VOICE7_ON","VOICE8","VOICE8_OFF","VOICE8_ON","controllersMainDisplay","POT1","MAIN_DISP_POT1","POT2","MAIN_DISP_POT2","POT3","MAIN_DISP_POT3","POT4","MAIN_DISP_POT4","POT5","MAIN_DISP_POT5","POT6","MAIN_DISP_POT6","GROUP_MENU","MAIN_DISP_GROUP_MENU","MENU_LFO","MENU_OSC","MENU_FILTER","MENU_ENV","MENU_MOD","MENU_FX","FUNC_HOME","MAIN_DISP_FUNC_HOME","FUNC_SETTINGS","MAIN_DISP_FUNC_SETTINGS","FUNC_SHIFT","MAIN_DISP_FUNC_SHIFT","FUNC_SHIFT_OFF","FUNC_SHIFT_ON","FUNC_PERFORM","MAIN_DISP_FUNC_PERFORM","FUNC_LOAD","MAIN_DISP_FUNC_LOAD","FUNC_SAVE","MAIN_DISP_FUNC_SAVE","FUNC_COMPARE","MAIN_DISP_FUNC_COMPARE","FUNC_ROUTE","MAIN_DISP_FUNC_ROUTE","controllersTranspose","TRANSPOSE","KBD_TRANSPOSE","TRANSPOSE_NEG_2","TRANSPOSE_NEG_1","TRANSPOSE_0","TRANSPOSE_POS_1","TRANSPOSE_POS_2","controllersKbd","PORTAMENTO","KBD_PORTAMENTO","UNISON_DETUNE","KBD_UNISON_DETUNE","HOLD","KBD_HOLD","KEYBOARD_HOLD_OFF","KEYBOARD_HOLD_ON","CHORD","KBD_CHORD","KEYBOARD_CHORD_OFF","KEYBOARD_CHORD_ON","KBD_MODE","KEYBOARD_MODE_SOLO","KEYBOARD_MODE_UNISON","KEYBOARD_MODE_POLY","controllersFilters","LPF","INPUT","RESONANCE","CUTOFF","FM_AMT","ENV_AMT","LFO_AMT","KBD_AMT","LPF_EXT_CV","LPF_EXT_CV_OFF","LPF_EXT_CV_ON","LPF_WHEEL","LPF_WHEEL_OFF","LPF_WHEEL_ON","SLOPE","LPF_SLOPE","LPF_SLOPE_12DB","LPF_SLOPE_24DB","FILTERS","LINK_CUTOFF","FILTERS_LINK_CUTOFF","FILTER_LINK_CUTOFF_OFF","FILTER_LINK_CUTOFF_ON","ROUTING","FILTERS_ROUTING","FILTER_ROUTING_SERIES","FILTER_ROUTING_PARALLEL","SVF","SVF_EXT_CV","SVF_EXT_CV_OFF","SVF_EXT_CV_ON","SVF_WHEEL","SVF_WHEEL_OFF","SVF_WHEEL_ON","SVF_SLOPE","SVF_SLOPE_12DB_LP","SVF_SLOPE_24DB_LP","SVF_SLOPE_12DB_BP","SVF_SLOPE_24DB_BP","SVF_SLOPE_LP_BP","SVF_SLOPE_12DB_HP","SVF_SLOPE_24DB_HP","SVF_SLOPE_HP_BP","SVF_SLOPE_NOTCH","SVF_SLOPE_NOTCH_LP","controllersPostMix","VOICE_MIX_LPF","VOICE_MIX_SVF","SINE1","VOICE_MIX_SINE1","SINE2","VOICE_MIX_SINE2","controllersVoiceOut","PAN","FX1_SEND","FX2_SEND","controllersEnv","DELAY_TIME","ENV_DELAY_TIME","ATTACK_TIME","ENV_ATTACK_TIME","DECAY1_TIME","ENV_DECAY1_TIME","DECAY2_TIME","ENV_DECAY2_TIME","SUSTAIN_LEVEL","ENV_SUSTAIN_LEVEL","RELEASE1_TIME","ENV_RELEASE1_TIME","RELEASE2_TIME","ENV_RELEASE2_TIME","DECAY2_LEVEL","ENV_DECAY2_LEVEL","RELEASE2_LEVEL","ENV_RELEASE2_LEVEL","CURVE","TIME","MAX_LOOPS","TOGGLE_STAGE","SELECT","ENV_SELECT","SELECT_ENV3_ID","ENV_TRIGGER","RELEASE","ENV_RELEASE","INVERT","ENV_INVERT","ENV_INVERT_OFF","ENV_INVERT_ON","RESET_ON_TRIGGER","ENV_RESET_ON_TRIGGER","ENV_RESET_ON_TRIGGER_OFF","ENV_RESET_ON_TRIGGER_ON","RELEASE_MODE","ENV_RELEASE_MODE","ENV_RELEASE_MODE_NORMAL","ENV_RELEASE_MODE_SKIP_R1","ENV_RELEASE_MODE_FREE_RUN","LOOP","ENV_LOOP","ENV_LOOP_OFF","ENV_LOOP_ON","LOOP_MODE","ENV_LOOP_MODE_GATED","ENV_LOOP_MODE_COUNTED","ENV_LOOP_MODE_INFINITE","ENVELOPE1","controllersCommonFx","DSP1","DSP1_PARAM1","DSP1_PARAM2","DSP1_PARAM3","EFFECT","DSP1_SOURCE","DSP1_SRC1","DSP1_SRC2","DSP2","DSP2_PARAM1","DSP2_PARAM2","DSP2_PARAM3","DSP2_SOURCE","DSP2_SRC1","DSP2_SRC2","CHAIN","DSP2_CHAIN","DSP_CHAIN_OFF","DSP_CHAIN_ON","CHORUS","CHORUS_SOURCE","CHORUS_SRC1","CHORUS_SRC2","CHORUS_MODE","CHORUS_MODE_CHORUS","CHORUS_MODE_VIBRATO","FX_BIT_CRUSHER","FX_BIT_CRUSHER_SOURCE","FX_BIT_CRUSHER_SRC1","FX_BIT_CRUSHER_SRC2","FX_MIX","LEVEL_DSP1","LEVEL_DSP2","LEVEL_CHORUS","LEVEL_BIT_CRUSHER","controllersOut","VOLUME","OUT_VOLUME","SPREAD","OUT_SPREAD","HEADPHONES","OUT_HEADPHONES","controllersPerformance","PITCH_BEND","PERF_PITCH_BEND","MOD_WHEEL","PERF_MOD_WHEEL","RIBBON_POS","PERF_RIBBON_POS","RIBBON_PRESSURE","PERF_RIBBON_PRESSURE","KBD_PITCH","PERF_KBD_PITCH","KBD_VELOCITY","PERF_KBD_VELOCITY","KBD_AFTERTOUCH","PERF_KBD_AFTERTOUCH","controllerGroups","SOUND_SOURCES","NOISE","PRE_FX","RING_MOD","LFOS","SOURCE_MIX","CLK_ARP_KBD","MASTER_CLOCK","KEYBOARD","MAIN_DISPLAY","VOICES","FILTER","VOICE","POST_MIX","VOICE_OUT","ENV","ENV1","ENV2","ENV3","ENV4","ENV5","FX","PERFORMANCE","controllers","ROUTE","shouldSend","source","MIDI","currentEnvId","send","cfg","stageId","boundedValue","nrpn","receive","subscribe","envApi","setStageLevel","setStageTime","invertIndex","resetIndex","reset","setRetrigger","indexOf","loopEnabledIndex","stageEnabled","data","setStageCurve","trigger","release","midiApiEnv","initReceive","dispatch","action","store","getBounded","from","to","getQuantized","factor","step","targetGroup","targetFunc","targetParam","lastModSelectSource","modValues","modsSlice","setGuiSource","guiSource","setGuiTargetGroup","guiTargetGroup","setGuiTargetFunc","guiTargetFunc","setGuiTargetParam","guiTargetParam","setLastModSelectSource","setModValue","sourceId","targetId","modValue","setGuiMod","selectGuiSource","mods","selectGuiTargetGroup","selectGuiTargetFunc","selectGuiTargetParam","selectGuiLastModSelectSource","selectModValue","element","modTarget","modTargets","modTargetGroupLabels","modTargetFuncProps","Object","forEach","group","funcs","funcProps","func","params","param","length","targets","groupLabels","getTargets","digitalModSources","sources","getSources","getState","setGuiSourceAction","setGuiTargetParamAction","setGuiTargetFuncAction","setGuiTargetGroupAction","quantizedValue","setModValueAction","midiApi","route","setSource","setTarget","setAmount","modsApi","incrementGuiSource","inc","currSource","nextSource","incrementGuiTargetGroup","currTargetGroup","nextTargetGroup","incrementGuiTargetFunc","currTargetFunc","nextTargetFunc","incrementGuiTargetParam","currTargetParam","lastGuiTargetParam","requestedGuiTargetParam","prevTargetFunc","lastTargetParam","incrementGuiModValue","sourceIndex","targetGroupIndex","targetFuncIndex","targetParamIndex","currModValue","nextModValue","currentSourceId","currentTargetId","amount","rounded","target","midiApiRoute","exponentialFunc","sharpness","a","exp","logarithmicFunc","pow","log10","getKeypoints","keypointCount","points","point","getScaledPoints","yScale","keypoints","scaled","map","expo1","expo2","curveFuncs","requestedValue","r1enabled","stage2Id","setStageEnabledAction","setInvertAction","setReleaseModeAction","setLoopModeAction","setLoopEnabledAction","setCurrentEnv","boundedEnv","boundedCurve","currMaxLoops","boundedMaxLoops","setMaxLoopsAction","setEnv3IdAction","incrementStageLevel","incLevel","currentLevel","incrementStageTime","incTime","currentTime","incrementCurrentEnvelope","incrementStageCurve","console","log","incrementMaxLoops","toggleEnv3Id","nextEnv3Id","midiOut","midiIn","currentScreen","MOD","mainDisplaySlice","setCurrentScreen","selectCurrScreen","mainDisplay","mainDisplayModsPotResolutions","mainDisplayModsApi","ctrlId","UI","mainDisplayEnvPotResolutions","mainDisplayEnvApi","COUNTED","potResolution","getPotResolution","currScreen","screenPots","synthcoreEnvApi","mainDisplayApi","handleMainDisplayController","currScreenId","envApiMapper","ENV_DELAY","ENV_ATTACK","ENV_DECAY1","ENV_DECAY2","ENV_SUSTAIN","ENV_RELEASE1","ENV_RELEASE2","ENV_D2_LEVEL","ENV_R2_LEVEL","ENV_SELECT_ENV3ID","mainDisplayApiMapper","OSC","MENU_ENVELOPE","synthcoreMiddleware","storeAPI","next","ctrlGroup","match","GUI","envMiddleware","MODS","modsMiddleware","MAIN_DISP","mainDisplayMiddleware","midiChannel","setMidiChannel","channel","configureStore","reducer","envReducer","modsReducer","settings","settingsReducer","uiReducer","mainDisplayReducer","middleware","getDefaultMiddleware","concat","midiConfig","inputIds","outputIds","sysexAddr","idPool","ccSubscribers","nrpnSubscribers","getChannel","callback","unsubscribe","subscribersForCC","index","sub","slice","publish","subscriber","includes","ccForChannel","subscribersForNRPN","loAddr","hiAddr","loValue","midValue","hiValue","currNRPN","receiveMidiMessage","midiEvent","midiData","updateSelectedMidi","midiAccess","inputs","key","outputs","foundInputId","find","has","foundOutputId","get","onmidimessage","onMIDISuccess","onstatechange","connectionEvent","port","navigator","requestMIDIAccess","sysex","then","useAppDispatch","useDispatch","useAppSelector","useSelector","RotaryPotWithLedRingBase","ledMode","potMode","position","storePosition","disabled","localControl","ledCount","windowToKnobMargin","windowWidth","centerLed","ledRingRadius","labelY","degreesBetweenLeds","ledAngles","i","windowStartAngle","ledRadius","windowArc","getRenderProps","statePosition","setStatePosition","ledPosition","mode","ceil","getLedPos","negLedPosition","sendMidi","localIncrement","newPosition","subscriberId","midiValue","RotaryPotBase","d","strokeWidth","angle","led","ledOn","stroke","fill","transform","classNames","textAnchor","RotaryPot32","RotaryPot10","RoundPushButtonBase","buttonRadius","positionLabel","labelPosition","labelMargin","positionLeds","ledMargin","ledToLedMargin","ledTolabelMargin","yDist","ledPositions","leftLeds","adjustedPosition","adjustedLedCount","adjustedI","labelX","RoundButtonBase","radioButtonIndex","hasOff","ledButton","onUpdate","reverse","loop","defaultValueIndex","storeValue","stateValue","setStateValue","currentValue","radioButtonValueIndex","hasOffValue","ledOnIndex","handleOnClick","valueCandidate","newValue","labelPos","ledPos","ledLabels","buttonMode","alignmentBaseline","Fragment","RoundPushButton8","RoundLedPushButton8","Header","align","getCenter","x1","y1","x2","y2","dco1","topRow","bottomRow1","bottomRow2","col1","col2","col3","col4","midiConstants","dco2","vco","RotaryPot17","PreFilterMixerChannel","buttonControllerConfig","potControllerConfig","PreFilterMixer","colDistance","row1","row2","PostFilterMixerChannel","PostFilterMixer","offsetX","offsetY2","offsetY","Noise","Ringmod","Distortion","col5","col6","RotaryPot40","LowPassFilter","Line","RoundRotaryButton17","StateVariableFilter","HorizontalLine","Envelope","showSelect","firstPotX","topRowY","potY","potDistance","levelS","levelD2","levelR2","timeDly","timeA","timeD1","timeD2","timeR1","timeR2","button1Row","button2Row","button3Row","buttonCol","firstPotCol","potRow1","buttonCol2","buttonCol3","RotaryPotWOLeds","RotaryPotWOLeds10","Display","React","forwardRef","DigitalFX","displayX","displayY","row4","displayCenterY","displayHeight","row2left","row3left","row1right","row4right","displayWidth","OutputMixerChannel","OutputMixer","offsetX2","Chorus","BitCrusher","Arpeggiator","RotaryPotWOLeds17","RotaryPotWOLeds32","MainDisplay","displayRef","displayCenter","buttonRow","potRow","masterPotRow","ctrlSwitchesRow1","ctrlSwitchesRow2","Clock","BitCrusherPre","Route","Led","on","Transpose","setCurrentValue","KeyboardControls","col8","col9","col10","col11","VoiceSelector","ModValues","targetGroupId","targetFuncId","targetParamId","targetValue","SourceLabel","isSelected","SourceLabels","TargetLabel","funcIndex","paramIndex","selectedTargetFunc","selectedTargetParam","TargetLabels","AmountBar","amtPercentage","negAmtWidth","posAmtWidth","style","ScrollingSyncerContext","createContext","registerNode","_node","_group","unregisterNode","onScroll","_e","_groups","_lockAxis","setScrollSource","dragNode","ScrollSync","elements","findGroup","scrollSource","handleNodeScroll","node","groups","lockAxis","scrolledNode","isEnabled","scroll","isSynced","scrollTop","scrollLeft","syncScrollPosition","syncScrollPositions","Provider","foundNode","doesNodeExists","splice","findIndex","e","currentTarget","Children","only","children","defaultProps","proportional","toArray","max","ScrollingSyncNodeContext","onScrollToElement","offsetLeft","offsetTop","offsetWidth","offsetHeight","ScrollSyncNode","forwardedRef","onNodeScroll","useContext","applyLockAxis","movingAxis","syncableElement","passive","isSyncer","lockX","lockY","onDrag","startScroll","setStartScroll","dragStart","setDragStart","maxScroll","setMaxScroll","calcMaxScroll","clientHeight","clientWidth","scrollHeight","scrollWidth","newScroll","useDrag","left","top","scrollTo","behavior","cloneElement","persist","onWheel","displayName","AmountCell","onSelected","selectedSource","modSelectSource","isTarget","isSource","isSelectedRow","isSelectedCol","isSelectedCell","amountText","clickPos","setClickPos","cellRef","AmountsRow","AmountsTable","tableRef","ModControl","PotLabels","labels","ModPotLabels","Mod","AnimatedCurve","pointsString","useMemo","getPointsString","useSpring","animatedPoints","viewBox","preserveAspectRatio","polyline","stageNames","loopModeNames","INFINITE","releaseModeNames","FREE_RUN","SKIP_R1","curveNames","EXP3","EXP2","EXP1","LOG2","LOG3","StageBlock","nextStage","isBipolar","startLev","endLev","offset","scale","curveFunc","reflectX","reflectY","svgPoints","mapToSvg","Stages","select","stageWidth","filter","graphCenter","startX","onSvgClicked","currentId","getNextEnabled","isLast","content","Button","active","StageActivator","EnvOptions","selectLoopMode","selectLoopEnabled","curveLabel","loops","getLoopLabel","StageParams","levelHidden","timeHidden","timeMillis","seconds","formatTime","formatLevel","StageNames","EnvelopeControl","EnvPotLabels","Controller","Env","MainPanel","displayCol","osc3Col","envCol","voiceMixCol","noiseRow","oscRow","outputFxRow","dispRect","setDispRect","bound","scrollX","scrollY","osc1Col","osc2Col","noiseCol","ringModCol","fxCol","lfo1Row","routeCol","clockCol","voiceSelRow","displayRow","filterCol","outFx1Col","Keyboard","keyboardHeight","keyWidth","kbdX","panelWidth","kbdY","panelHeight","App","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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CAAAA,I,gDAAAA,I,gBAAAA,I,gBAAAA,I,gBAAAA,I,gBAAAA,I,kCAAAA,I,kCAAAA,I,kCAAAA,I,kCAAAA,I,gCAAAA,I,gCAAAA,I,8BAAAA,I,kCAAAA,I,gCAAAA,I,gCAAAA,I,8BAAAA,I,4BAAAA,I,4BAAAA,I,kCAAAA,I,4BAAAA,I,4BAAAA,I,kCAAAA,I,4BAAAA,I,4BAAAA,I,kCAAAA,I,8BAAAA,I,8BAAAA,I,oCAAAA,I,oCAAAA,I,oCAAAA,I,0CAAAA,I,sCAAAA,I,sCAAAA,I,4CAAAA,I,0BAAAA,I,kCAAAA,I,8BAAAA,I,sDAAAA,I,kDAAAA,I,gDAAAA,I,sBAAAA,I,oBAAAA,I,sCAAAA,I,qCAAAA,I,iCAAAA,I,uCAAAA,I,mCAAAA,I,iCAAAA,I,+BAAAA,I,+BAAAA,I,+BAAAA,I,+BAAAA,I,mCAAAA,I,yCAAAA,I,uCAAAA,I,sCAAAA,Q,cCAAC,O,yBAAAA,I,2BAAAA,I,yBAAAA,I,2BAAAA,I,yBAAAA,I,2BAAAA,I,yBAAAA,I,2BAAAA,I,yBAAAA,I,2BAAAA,I,0BAAAA,I,4BAAAA,I,0BAAAA,I,4BAAAA,I,0BAAAA,I,4BAAAA,I,wBAAAA,I,wBAAAA,I,8BAAAA,I,wBAAAA,I,wBAAAA,I,sBAAAA,I,0BAAAA,I,kCAAAA,I,kCAAAA,I,oCAAAA,I,gCAAAA,I,0BAAAA,I,0BAAAA,I,gCAAAA,I,4BAAAA,I,sCAAAA,I,sCAAAA,I,8BAAAA,I,sCAAAA,I,sCAAAA,I,wCAAAA,I,0CAAAA,I,0CAAAA,I,4CAAAA,I,4CAAAA,I,gDAAAA,I,6CAAAA,Q,cCAAC,O,iCAAAA,I,mCAAAA,I,+BAAAA,I,iCAAAA,I,mCAAAA,I,mCAAAA,I,iDAAAA,I,mDAAAA,I,iDAAAA,I,qDAAAA,I,kCAAAA,I,oCAAAA,I,gCAAAA,I,kCAAAA,I,0CAAAA,I,0CAAAA,I,0CAAAA,I,0CAAAA,I,sCAAAA,I,0CAAAA,I,0CAAAA,I,sCAAAA,I,sCAAAA,I,4CAAAA,I,8BAAAA,I,8BAAAA,I,gCAAAA,I,8BAAAA,I,oCAAAA,I,kCAAAA,I,wDAAAA,I,sDAAAA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","file":"static/js/main.c8f40e70.chunk.js","sourcesContent":["export enum StageId {\n    DELAY,\n    ATTACK,\n    DECAY1,\n    DECAY2,\n    SUSTAIN,\n    RELEASE1,\n    RELEASE2,\n    STOPPED,\n}\n\nexport enum ReleaseMode {\n    NORMAL,\n    SKIP_R1,\n    FREE_RUN,\n}\n\nexport enum LoopMode {\n    GATED,\n    COUNTED,\n    INFINITE,\n}\n\nexport enum Curve {\n    EXP1,\n    EXP2,\n    EXP3,\n    LIN,\n    LOG1,\n    LOG2,\n    LOG3,\n}\n\nexport type Stage = {\n    id: StageId;\n    enabled: boolean;\n    curve: Curve;\n    level: number; //-1 to 1\n    time: number; // 0 to 1\n};\n\nexport type Envelope = {\n    id: number;\n    resetOnTrigger: boolean;\n    resetLevel: number;\n    releaseMode: ReleaseMode;\n    stages: Stage[];\n    loopMode: LoopMode;\n    loopEnabled: boolean;\n    maxLoops: number;\n    invert: boolean;\n    bipolar: boolean;\n}\n\n\nexport const MIN_LEVEL = 100;\nexport const MAX_LEVEL = 100;\nexport const MIN_TIME = 1; //ms\nexport const MAX_TIME = 65536; // approx 1 minute.\n\nexport enum EnvControllerId {\n    ENV_DELAY,\n    ENV_ATTACK,\n    ENV_DECAY1,\n    ENV_DECAY2,\n    ENV_SUSTAIN,\n    ENV_RELEASE1,\n    ENV_RELEASE2,\n    ENV_D2_LEVEL,\n    ENV_R2_LEVEL,\n    ENV_SELECT_ENV3ID,\n    ENV_LOOP,\n    ENV_TRIGGER,\n    ENV_INVERT,\n}\n","const polarToCartesian = (centerX: number, centerY: number, radius: number, angleInDegrees: number) => {\n  const angleInRadians = (angleInDegrees-90) * Math.PI / 180.0;\n\n  return {\n    x: centerX + (radius * Math.cos(angleInRadians)),\n    y: centerY + (radius * Math.sin(angleInRadians))\n  };\n}\n\nconst describeArc = (\n  x: number, y: number, radius: number, startAngle: number, endAngle: number) =>{\n\n  const start = polarToCartesian(x, y, radius, endAngle);\n  const end = polarToCartesian(x, y, radius, startAngle);\n\n  const largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n  const d = [\n    \"M\", start.x, start.y,\n    \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y\n  ].join(\" \");\n\n  return d;\n}\n\nexport default describeArc;","import React, { useCallback, useEffect, useRef, useState } from 'react'\n\nexport type Point = {x: number, y: number}\n\ninterface Props {\n  onClick?: () => void;\n  knobRadius: number;\n  onIncrement?: (steps: number, stepSize: number) => void;\n  defaultValue?: number;\n  arc?: number;\n  resolution?: number\n}\n\n// 0 degrees is deltaX > 1, deltaY = +0\nconst getAngle = (pointer: Point, center: Point) => {\n  const deltaX = pointer.x - center.x;\n  const deltaY = pointer.y - center.y;\n  return (2 * Math.PI + Math.atan(deltaY / deltaX) + (deltaX < 0 ? Math.PI : 0)) % (2 * Math.PI);\n}\n\nconst getValueChangeFromDiff = (angleDiff: number, ledArc:number) => {\n  const changeInDegrees = (360 * angleDiff) / (2 * Math.PI);\n  return changeInDegrees / ledArc;\n}\n\nconst distToCenter = (center: Point, pointer: Point) => {\n  const xDiff = (center.x - pointer.x);\n  const yDiff = (center.y - pointer.y);\n  return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n}\n\nconst RotaryPot = ({knobRadius, onClick, defaultValue, onIncrement, arc = 360, resolution = 1000}: Props) => {\n\n  const stepSize = 1 / resolution;\n\n  const [center, setCenter] = useState<Point|null>(null);\n  const [previousAngle, setPreviousAngle] = useState<number | undefined>(undefined);\n  const [isDragging, setIsDragging] = useState(false);\n\n  const svgRef = useRef<SVGCircleElement>(null)\n\n  const updateCenter = useCallback(() => {\n    const bb = svgRef.current?.getBoundingClientRect();\n    let updatedCenter: {x: number, y: number};\n    if (bb) {\n      updatedCenter = {\n        x: Math.round(bb.x + bb.width / 2),\n        y: Math.round(bb.y + bb.height / 2)\n      }\n    } else {\n      updatedCenter = { x: 0, y: 0 }\n    }\n    setCenter(updatedCenter);\n  }, []);\n\n  const [accumulator, setAccumulator] = useState(0);\n\n  const onMouseMove = useCallback((event: MouseEvent) => {\n    if(isDragging) {\n      if(!center) return\n\n      if(distToCenter(center, {x: event.clientX, y: event.clientY}) > 20) {\n        // We won't start turning until we are a bit away from the center, that way we prevent the pot\n        // from jumping randomly if you click too close to the center and move the other way\n        const newAngle = getAngle({x: event.clientX, y: event.clientY}, center );\n        if(previousAngle === undefined) {\n            setPreviousAngle(newAngle);\n            return\n        }\n\n        let angleDiff = newAngle - previousAngle\n        if (angleDiff > Math.PI) {\n            angleDiff = angleDiff - 2 * Math.PI\n        } else if (angleDiff < -Math.PI) {\n            angleDiff = angleDiff + 2 * Math.PI\n        }\n\n        if (angleDiff !== 0) {\n          setPreviousAngle(newAngle)\n\n          //  for later: event.shiftKey indicates if shift is down;\n          const valueChange = getValueChangeFromDiff(angleDiff, arc)\n\n          // TODO: Reset accumulator on external value change.\n          let nextAccumulator = accumulator + valueChange;\n          if(Math.abs(nextAccumulator) > stepSize) {\n            const absSteps = Math.floor(Math.abs(nextAccumulator) / stepSize);\n            const steps = valueChange > 0 ? absSteps : -absSteps;\n            setAccumulator(nextAccumulator % stepSize);\n            onIncrement && onIncrement(steps, stepSize);\n          } else {\n            setAccumulator(nextAccumulator)\n          }\n        }\n      }\n    }\n  }, [onIncrement, stepSize, accumulator, setAccumulator, center, arc, previousAngle, isDragging]);\n\n  const onMouseDown = useCallback((event: React.MouseEvent<SVGCircleElement>) => {\n    updateCenter()\n    setPreviousAngle(undefined)\n    setIsDragging(true);\n    if(event.preventDefault) event.preventDefault();\n  }, [updateCenter]);\n\n  const onMouseUp = useCallback(() => {\n    if(isDragging) setIsDragging(false);\n  }, [isDragging]);\n\n  // TODO: add and remove these on demand?\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", onMouseMove)\n    window.addEventListener(\"mouseup\", onMouseUp)\n\n    return () => {\n      window.removeEventListener(\"mousemove\", onMouseMove)\n      window.removeEventListener(\"mouseup\", onMouseUp)\n    };\n  },[onMouseMove, onMouseUp])\n\n  return <circle ref={svgRef} cx={0} cy={0} onClick={onClick} onMouseDown={onMouseDown} r={knobRadius} className=\"pot-knob\"/>\n};\n\nexport default RotaryPot;","import { Curve, Envelope, LoopMode, ReleaseMode, Stage, StageId } from './types'\n\nexport const getDefaultEnvelope = (id: number): Envelope => {\n\n    const stages: Stage[] = [];\n    stages.push({\n        id: StageId.DELAY,\n        enabled: false,\n        curve: Curve.LIN,\n        level: 0,\n        time: 0,\n    })\n    stages.push({\n        id: StageId.ATTACK,\n        enabled: true,\n        curve: Curve.LOG1,\n        level: 0,\n        time: 0.001,\n    })\n    stages.push({\n        id: StageId.DECAY1,\n        enabled: true,\n        curve: Curve.LOG1,\n        level: 1,\n        time: 0.5,\n    })\n    stages.push({\n        id: StageId.DECAY2,\n        enabled: false,\n        curve: Curve.LIN,\n        level: 0.5,\n        time: 0.001,\n    })\n    stages.push({\n        id: StageId.SUSTAIN,\n        enabled: true,\n        curve: Curve.LIN,\n        level: -0.5,\n        time: 0,\n    })\n    stages.push({\n        id: StageId.RELEASE1,\n        enabled: true,\n        curve: Curve.LOG1,\n        level: 0.5,\n        time: 0.001,\n    })\n    stages.push({\n        id: StageId.RELEASE2,\n        enabled: true,\n        curve: Curve.LOG1,\n        level: 0.25,\n        time: 0.003,\n    })\n    stages.push({\n        id: StageId.STOPPED,\n        enabled: true,\n        curve: Curve.LIN,\n        level: 0,\n        time: 0,\n    })\n\n    const env = {\n        id,\n        resetOnTrigger: false,\n        resetLevel: 0,\n        releaseMode: ReleaseMode.NORMAL,\n        loopMode: LoopMode.GATED,\n        loopEnabled: false,\n        maxLoops: 2,\n        invert:false,\n        stages,\n        bipolar: true,\n    }\n\n    setInvert(env, false);\n    updateReleaseLevels(env);\n    return env;\n}\n\n// TODO: Duplicated in reducer, fix!\nconst updateReleaseLevels =  (env: Envelope) => {\n    if(env.stages[StageId.RELEASE1].enabled) {\n        env.stages[StageId.RELEASE1].level = env.stages[StageId.SUSTAIN].level;\n    } else {\n        env.stages[StageId.RELEASE2].level = env.stages[StageId.SUSTAIN].level;\n    }\n}\n\n// TODO: Duplicated in reducer, fix!\nconst setInvert = (env: Envelope, invert: boolean) => {\n    env.invert = invert;\n    const resetLevel = invert ? 1 : 0;\n\n    env.stages[StageId.DELAY].level = resetLevel;\n    env.stages[StageId.ATTACK].level = resetLevel;\n    env.stages[StageId.DECAY1].level = invert ? 0 : 1;\n    env.stages[StageId.STOPPED].level = resetLevel;\n}\n\n","export enum ControllerGroupIds {\n    ENV,\n    MODS,\n    MAIN_DISP\n}\n\nexport enum ApiSource {\n    UI,\n    GUI,\n    SPI,\n    MIDI\n}","// createSlice\n// separate reducer for stage\n\nimport { createSlice, Draft, PayloadAction } from '@reduxjs/toolkit'\nimport { Envelope, LoopMode, ReleaseMode, Stage, StageId } from './types'\nimport { getDefaultEnvelope } from './envUtils'\nimport { RootState } from '../../store'\n\ntype EnvelopesState = {\n    envs: Envelope[];\n    gui: {\n        currEnvId: number;\n        currStageId: StageId;\n    }\n    ui: {\n        env3Id: number;\n    }\n}\n\nexport const initialState: EnvelopesState = {\n    envs: [\n        getDefaultEnvelope(0),\n        getDefaultEnvelope(1),\n        getDefaultEnvelope(2),\n        getDefaultEnvelope(3),\n        getDefaultEnvelope(4),\n    ],\n    gui: {\n        currEnvId: 0,\n        currStageId: StageId.STOPPED,\n    },\n    ui: {\n        env3Id: 2\n    }\n}\n\ntype StagePayload = {\n    env: number;\n    stage: StageId;\n}\n\ntype EnvPayload = {\n    env: number;\n}\n\ntype NumericStagePayload = StagePayload & {\n    value: number;\n}\n\ntype NumericEnvPayload = EnvPayload & {\n    value: number;\n}\n\ntype DualStageLevelPayload = {\n    env: number;\n    stage1: StageId;\n    stage2: StageId;\n    value: number;\n}\n\ntype CurvePayload = StagePayload & {\n    curve: number;\n}\n\ntype ReleaseModePayload = EnvPayload & {\n    releaseMode: ReleaseMode;\n}\n\ntype ResetOnTriggerPayload = EnvPayload & {\n    resetOnTrigger: boolean;\n}\n\ntype LoopModePayload = EnvPayload & {\n    loopMode: LoopMode;\n}\n\ntype LoopEnabledPayload = EnvPayload & {\n    enabled: boolean;\n}\n\ntype SetInvertPayload = EnvPayload & {\n    invert: boolean;\n}\n\ntype EnabledStagePayload = StagePayload & {\n    enabled: boolean;\n}\n\ntype Env3IdPayload = {\n    id: number;\n}\n\nconst getStage = (state: Draft<any>, payload: StagePayload): Draft<Stage> => {\n    return state.envs[payload.env].stages[payload.stage]\n}\n\nconst getEnv = (state: Draft<any>, payload: StagePayload | EnvPayload): Draft<Envelope> => {\n    return state.envs[payload.env]\n}\n\nexport const envelopesSlice = createSlice({\n    name: 'envelopes',\n    initialState,\n    reducers: {\n        setLevel: (state, { payload }: PayloadAction<NumericStagePayload>) => {\n            getStage(state, payload).level = payload.value\n        },\n        setDualLevels: (state, { payload }: PayloadAction<DualStageLevelPayload>) => {\n            state.envs[payload.env].stages[payload.stage1].level = payload.value\n            state.envs[payload.env].stages[payload.stage2].level = payload.value\n        },\n        setTime: (state, { payload }: PayloadAction<NumericStagePayload>) => {\n            getStage(state, payload).time = payload.value\n        },\n        setCurve: (state, { payload }: PayloadAction<CurvePayload>) => {\n            getStage(state, payload).curve = payload.curve\n        },\n\n        setReleaseMode: (state, { payload }: PayloadAction<ReleaseModePayload>) => {\n            getEnv(state, payload).releaseMode = payload.releaseMode\n        },\n        setResetOnTrigger: (state, { payload }: PayloadAction<ResetOnTriggerPayload>) => {\n            getEnv(state, payload).resetOnTrigger = payload.resetOnTrigger\n        },\n        setLoopMode: (state, { payload }: PayloadAction<LoopModePayload>) => {\n            getEnv(state, payload).loopMode = payload.loopMode\n        },\n        setLoopEnabled: (state, { payload }: PayloadAction<LoopEnabledPayload>) => {\n            getEnv(state, payload).loopEnabled = payload.enabled\n        },\n        setMaxLoops: (state, { payload }: PayloadAction<NumericEnvPayload>) => {\n            getEnv(state, payload).maxLoops = payload.value\n        },\n        setStageEnabled: (state, { payload }: PayloadAction<EnabledStagePayload>) => {\n            getStage(state, payload).enabled = payload.enabled\n        },\n        setInvert: (state, { payload }: PayloadAction<SetInvertPayload>) => {\n            const env = getEnv(state, payload)\n            env.invert = payload.invert\n            const resetLevel = payload.invert ? 1 : 0\n\n            env.stages[StageId.DELAY].level = resetLevel\n            env.stages[StageId.ATTACK].level = resetLevel\n            env.stages[StageId.DECAY1].level = payload.invert ? 0 : 1\n            env.stages[StageId.STOPPED].level = resetLevel\n        },\n        selectStage: (state, { payload }: PayloadAction<StagePayload>) => {\n            state.gui.currStageId = payload.stage\n        },\n        deselectStage: (state, { payload }: PayloadAction<StagePayload>) => {\n            state.gui.currStageId = StageId.STOPPED\n        },\n        selectEnv: (state, { payload }: PayloadAction<EnvPayload>) => {\n            state.gui.currEnvId = payload.env\n        },\n        setEnv3Id: (state, { payload }: PayloadAction<Env3IdPayload>) => {\n            state.ui.env3Id = payload.id\n        },\n\n        // actions only consumed by api\n        toggleStageEnabled: (state, { payload }: PayloadAction<StagePayload>) => {\n        },\n        toggleInvert: (state, { payload }: PayloadAction<EnvPayload>) => {\n        },\n        toggleRetrigger: (state, { payload }: PayloadAction<EnvPayload>) => {\n        },\n        toggleReleaseMode: (state, { payload }: PayloadAction<EnvPayload>) => {\n        },\n        toggleLoopMode: (state, { payload }: PayloadAction<EnvPayload>) => {\n        },\n        toggleLoopEnabled: (state, { payload }: PayloadAction<EnvPayload>) => {\n        },\n        toggleStageSelected: (state, { payload }: PayloadAction<StagePayload>) => {\n        },\n    }\n})\n\nexport const {\n    setLevel,\n    setDualLevels,\n    setTime,\n    setCurve,\n    setReleaseMode,\n    setResetOnTrigger,\n    setLoopMode,\n    setLoopEnabled,\n    setMaxLoops,\n    setStageEnabled,\n    setInvert,\n    selectStage,\n    deselectStage,\n    selectEnv,\n    setEnv3Id,\n    toggleStageEnabled,\n    toggleInvert,\n    toggleRetrigger,\n    toggleReleaseMode,\n    toggleLoopMode,\n    toggleLoopEnabled,\n    toggleStageSelected,\n} = envelopesSlice.actions\n\nexport const selectEnvelopes = (state: RootState) => state.envelopes\nexport const selectEnvelope = (envId: number) => (state: RootState) => state.envelopes.envs[envId]\nexport const selectLevel = (envId: number, stageId: StageId) => (state: RootState) => state.envelopes.envs[envId].stages[stageId].level\nexport const selectTime = (envId: number, stageId: StageId) => (state: RootState) => state.envelopes.envs[envId].stages[stageId].time\nexport const selectInvert = (envId: number) => (state: RootState) => state.envelopes.envs[envId].invert\nexport const selectRetrigger = (envId: number) => (state: RootState) => state.envelopes.envs[envId].resetOnTrigger\nexport const selectReleaseMode = (envId: number) => (state: RootState) => state.envelopes.envs[envId].releaseMode\nexport const selectLoopMode = (envId: number) => (state: RootState) => state.envelopes.envs[envId].loopMode\nexport const selectLoopEnabled = (envId: number) => (state: RootState) => state.envelopes.envs[envId].loopEnabled\nexport const selectCurrStageId = (state: RootState) => state.envelopes.gui.currStageId\nexport const selectCurrEnvId = (state: RootState) => state.envelopes.gui.currEnvId\nexport const selectEnv3Id = (state: RootState) => state.envelopes.ui.env3Id\n\nexport default envelopesSlice.reducer","export enum buttonLeftMidiValues {\n    OSC1_SYNC_OFF,\n    OSC1_SYNC_1_2,\n    OSC1_SYNC_2_1,\n    OSC1_MODE_DCO,\n    OSC1_MODE_WT,\n    OSC1_MODE_PCM,\n    OSC1_SUB_WAVE_SQR,\n    OSC1_SUB_WAVE_SAW,\n    OSC1_WHEEL_OFF,\n    OSC1_WHEEL_ON,\n    OSC1_LFO_OFF,\n    OSC1_LFO_ON,\n    OSC1_KBD_OFF,\n    OSC1_KBD_ON,\n    OSC2_MODE_DCO,\n    OSC2_MODE_WT,\n    OSC2_MODE_PCM,\n    OSC2_SUB_WAVE_SQR,\n    OSC2_SUB_WAVE_SAW,\n    OSC2_WHEEL_OFF,\n    OSC2_WHEEL_ON,\n    OSC2_LFO_OFF,\n    OSC2_LFO_ON,\n    OSC2_KBD_OFF,\n    OSC2_KBD_ON,\n    OSC3_SYNC_OFF,\n    OSC3_SYNC_HARD,\n    OSC3_SYNC_CEM_HARD,\n    OSC3_SYNC_CEM_SOFT,\n    OSC3_CROSS_MOD_SRC_OSC1,\n    OSC3_CROSS_MOD_SRC_EXT,\n    OSC3_EXT_CV_OFF,\n    OSC3_EXT_CV_ON,\n    OSC3_WHEEL_OFF,\n    OSC3_WHEEL_ON,\n    OSC3_LFO_OFF,\n    OSC3_LFO_ON,\n    OSC3_KBD_OFF,\n    OSC3_KBD_ON,\n    NOISE_COLOUR_WHITE,\n    NOISE_COLOUR_PINK,\n    NOISE_COLOUR_RED,\n    RING_MOD_SOURCE_1_2,\n    RING_MOD_SOURCE_EXT_2,\n    DISTORTION_IN_A,\n    DISTORTION_IN_B,\n    DISTORTION_IN_BOTH,\n    DISTORTION_SOFT,\n    DISTORTION_HARD,\n    DISTORTION_OUT_A,\n    DISTORTION_OUT_B,\n    DISTORTION_OUT_BOTH,\n    BIT_CRUSHER_IN_A,\n    BIT_CRUSHER_IN_B,\n    BIT_CRUSHER_IN_BOTH,\n    BIT_CRUSHER_OUT_A,\n    BIT_CRUSHER_OUT_B,\n    BIT_CRUSHER_OUT_BOTH,\n    LFO1,\n    LFO2,\n    LFO3,\n    LFO4,\n    LFO_SHAPE_SAW,\n    LFO_SHAPE_TRI,\n    LFO_SHAPE_SQR,\n    LFO_SHAPE_SIN,\n    LFO_SHAPE_SH,\n    LFO_SYNC_OFF,\n    LFO_SYNC_ON,\n    LFO_RESET_OFF,\n    LFO_RESET_ON,\n    LFO_ONCE_OFF,\n    LFO_ONCE_ON,\n    OSC1_OUT_A,\n    OSC1_OUT_B,\n    OSC1_OUT_BOTH,\n    OSC2_OUT_A,\n    OSC2_OUT_B,\n    OSC2_OUT_BOTH,\n    OSC3_OUT_A,\n    OSC3_OUT_B,\n    OSC3_OUT_BOTH,\n    NOISE_OUT_A,\n    NOISE_OUT_B,\n    NOISE_OUT_BOTH,\n    RING_MOD_OUT_A,\n    RING_MOD_OUT_B,\n    RING_MOD_OUT_BOTH,\n    EXT_AUDIO_OUT_A,\n    EXT_AUDIO_OUT_B,\n    EXT_AUDIO_OUT_BOTH,\n    ROUTE_OFF,\n    ROUTE_FROM_ON,\n    ROUTE_TO_ON,\n    MASTER_CLOCK_SRC_MASTER,\n    MASTER_CLOCK_SRC_MIDI,\n    MASTER_CLOCK_SRC_EXT,\n    ARP_OFF,\n    ARP_ON,\n    ARP_TRIGGER_OFF,\n    ARP_TRIGGER_ON,\n    ARP_SYNC_OFF,\n    ARP_SYNC_MASTER,\n    ARP_SYNC_LFO1,\n    ARP_SYNC_EXT,\n    ARP_RANGE_1,\n    ARP_RANGE_2,\n    ARP_RANGE_3,\n    ARP_MODE_UP,\n    ARP_MODE_DOWN,\n    ARP_MODE_UP_DOWN,\n    ARP_MODE_RANDOM,\n    ARP_MODE_OTHER,\n}","export enum buttonCenterMidiValues {\n    VOICE1_ON,\n    VOICE1_OFF,\n    VOICE2_ON,\n    VOICE2_OFF,\n    VOICE3_ON,\n    VOICE3_OFF,\n    VOICE4_ON,\n    VOICE4_OFF,\n    VOICE5_ON,\n    VOICE5_OFF,\n    VOICE6_ON,\n    VOICE6_OFF,\n    VOICE7_ON,\n    VOICE7_OFF,\n    VOICE8_ON,\n    VOICE8_OFF,\n    MENU_LFO,\n    MENU_OSC,\n    MENU_FILTER,\n    MENU_ENV,\n    MENU_MOD,\n    MENU_FX,\n    FUNC_HOME,\n    FUNC_SETTINGS,\n    FUNC_SHIFT_ON,\n    FUNC_SHIFT_OFF,\n    FUNC_PERFORM,\n    FUNC_LOAD,\n    FUNC_SAVE,\n    FUNC_COMPARE,\n    FUNC_ROUTE,\n    TRANSPOSE_NEG_2,\n    TRANSPOSE_NEG_1,\n    TRANSPOSE_0,\n    TRANSPOSE_POS_1,\n    TRANSPOSE_POS_2,\n    KEYBOARD_HOLD_ON,\n    KEYBOARD_HOLD_OFF,\n    KEYBOARD_CHORD_ON,\n    KEYBOARD_CHORD_OFF,\n    KEYBOARD_MODE_SOLO,\n    KEYBOARD_MODE_UNISON,\n    KEYBOARD_MODE_POLY,\n}","export enum buttonRightMidiValues {\n    LPF_EXT_CV_ON,\n    LPF_EXT_CV_OFF,\n    LPF_WHEEL_ON,\n    LPF_WHEEL_OFF,\n    LPF_SLOPE_12DB,\n    LPF_SLOPE_24DB,\n    FILTER_LINK_CUTOFF_ON,\n    FILTER_LINK_CUTOFF_OFF,\n    FILTER_ROUTING_SERIES,\n    FILTER_ROUTING_PARALLEL,\n    SVF_EXT_CV_ON,\n    SVF_EXT_CV_OFF,\n    SVF_WHEEL_ON,\n    SVF_WHEEL_OFF,\n    SVF_SLOPE_12DB_LP,\n    SVF_SLOPE_24DB_LP,\n    SVF_SLOPE_12DB_BP,\n    SVF_SLOPE_24DB_BP,\n    SVF_SLOPE_LP_BP,\n    SVF_SLOPE_12DB_HP,\n    SVF_SLOPE_24DB_HP,\n    SVF_SLOPE_HP_BP,\n    SVF_SLOPE_NOTCH,\n    SVF_SLOPE_NOTCH_LP,\n    ENV_TRIGGER,\n    ENV_RELEASE,\n    ENV_LOOP_OFF,\n    ENV_LOOP_ON,\n    ENV_INVERT_OFF,\n    ENV_INVERT_ON,\n    ENV_RESET_ON_TRIGGER_OFF,\n    ENV_RESET_ON_TRIGGER_ON,\n    ENV_RELEASE_MODE_NORMAL,\n    ENV_RELEASE_MODE_SKIP_R1,\n    ENV_RELEASE_MODE_FREE_RUN,\n    ENV_LOOP_MODE_GATED,\n    ENV_LOOP_MODE_COUNTED,\n    ENV_LOOP_MODE_INFINITE,\n    DSP1_SRC1,\n    DSP1_SRC2,\n    DSP_CHAIN_ON,\n    DSP_CHAIN_OFF,\n    DSP2_SRC1,\n    DSP2_SRC2,\n    CHORUS_SRC1,\n    CHORUS_SRC2,\n    CHORUS_MODE_CHORUS,\n    CHORUS_MODE_VIBRATO,\n    FX_BIT_CRUSHER_SRC1,\n    FX_BIT_CRUSHER_SRC2,\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { ControllerGroupIds } from '../../types'\n\ntype UiState = {\n    controller: {\n        [key: number]: number\n    };\n}\n\nconst initialState: UiState = {\n    controller: {},\n}\n\ntype NumericControllerPayload = {\n    ctrlGroup: ControllerGroupIds;\n    ctrlId: number;\n    ctrlIndex?: number;\n    value: number;\n}\n\ntype ButtonControllerPayload = {\n    ctrlGroup: ControllerGroupIds;\n    ctrlId: number;\n    ctrlIndex?: number;\n}\n\nexport const uiSlice = createSlice({\n    name: 'ui',\n    initialState,\n    reducers: {\n        increment: (state, {payload}: PayloadAction<NumericControllerPayload>) => {\n            //Not doing anything yet, just needed to create the action.\n        },\n        click: (state, {payload}: PayloadAction<ButtonControllerPayload>) => {\n            //Not doing anything yet, just needed to create the action.\n        },\n    }\n})\n\nexport const {\n    increment,\n    click,\n} = uiSlice.actions;\n\nexport default uiSlice.reducer;","const mapCC = {\n    MIDI_BANK_SELECT: 0, // N/I\n    MIDI_MOD_WHEEL: 1, // N/I\n    MIDI_BREATH_CTRL: 2, // N/I\n    BUTTONS_LEFT: 3,\n    MIDI_FOOT_CTRL: 4, // N/I\n    KEYBOARD_PORTAMENTO: 5,\n    DATA_ENTRY_MSB:6,\n    BUTTONS_CENTER: 7,\n    BUTTONS_RIGHT: 8,\n    DCO1_NOTE: 9,\n    DCO1_SUPER_SAW: 10,\n    DCO1_WAVEFORM: 11,\n    DCO1_SUB1: 12,\n    DCO1_SUB2: 13,\n    DCO1_PW: 14,\n    DCO2_NOTE: 15,\n    DCO2_DETUNE: 16,\n    DCO2_SUPER_SAW: 17,\n    DCO2_WAVEFORM: 18,\n    DCO2_SUB1: 19,\n    DCO2_SUB2: 20,\n    DCO2_PW: 21,\n    VCO_NOTE: 22,\n    VCO_DETUNE: 23,\n    VCO_WAVEFORM: 24,\n    VCO_CROSS_MOD: 25,\n    VCO_PW: 26,\n    DISTORTION_DRIVE: 27,\n    DISTORTION_LEVEL: 28,\n    BIT_CRUSHER_BITS: 29,\n    BIT_CRUSHER_RATE: 30,\n    BIT_CRUSHER_LEVEL: 31,\n\n    MIDI_BANK_SELECT_LSB: 32,\n    MIDI_MOD_WHEEL_LSB: 33,\n    MIDI_BREATH_CTRL_LSB: 34,\n    DATA_ENTRY_HSB: 35, // Not a standard controller, I use this to send 16 bit controllers.\n    MIDI_FOOT_CTRL_LSB: 36,\n    KEYBOARD_PORTAMENTO_LSB: 37,\n    DATA_ENTRY_LSB: 38,\n\n    LFO_RATE: 39,\n    LFO_DEPTH: 40,\n    LFO_DELAY: 41,\n    LEVEL_OSC1: 42,\n    LEVEL_OSC2: 43,\n    LEVEL_OSC3: 44,\n    LEVEL_NOISE: 45,\n    LEVEL_RING_MOD: 46,\n    LEVEL_EXT_AUDIO: 47,\n    ROUTE_AMOUNT: 48,\n    MASTER_CLOCK_RATE: 49,\n    ARP_TEMPO: 50,\n    MAIN_POT1: 51,\n    MAIN_POT2: 52,\n    MAIN_POT3: 53,\n    MAIN_POT4: 54,\n    MAIN_POT5: 55,\n    MAIN_POT6: 56,\n    KEYBOARD_UNISON_DETUNE: 57,\n    LPF_INPUT: 58,\n    LPF_DRIVE: 59,\n    LPF_RESONANCE: 60,\n    LPF_CUTOFF: 61,\n    LPF_FM_AMT: 62,\n    LPF_ENV_AMT: 63,\n    MIDI_SUSTAIN: 64, // N/I\n    // 65 - 69 -- reserved for pedals\n\n    LPF_LFO_AMT: 70,\n    LPF_KBD_AMT: 71,\n    SVF_INPUT: 72,\n    SVF_DRIVE: 73,\n    SVF_RESONANCE: 74,\n    SVF_CUTOFF: 75,\n    SVF_FM_AMT: 76,\n    SVF_ENV_AMT: 77,\n    SVF_LFO_AMT: 78,\n    SVF_KBD_AMT: 79,\n    POST_MIX_LPF: 80,\n    POST_MIX_SVF: 81,\n    POST_MIX_SINE1: 82,\n    POST_MIX_SINE2: 83,\n    VOICE_OUT_PAN: 84,\n    VOICE_OUT_AMOUNT: 85,\n    VOICE_OUT_FX1_SEND: 86,\n    VOICE_OUT_FX2_SEND: 87,\n    ENV_LOOP_MODE: 88,\n    ENV_MAX_LOOPS: 89,\n    ENV_TOGGLE_STAGE: 90,\n    ENV_SELECT_ENV: 91,\n    ENV_SELECT_ENV3_ID: 92,\n    DSP1_POT1: 93,\n    DSP1_POT2: 94,\n    DSP1_POT3: 95,\n    DSP1_EFFECT: 96,\n    DSP2_POT1: 97,\n\n    NRPN_LSB: 98,\n    NRPN_MSB: 99,\n    RPN_LSB: 100, // N/I, possibly available\n    RPN_MSB: 101, // N/I, possibly available\n\n    DSP2_POT2: 102,\n    DSP2_POT3: 103,\n    DSP2_EFFECT: 104,\n    CHORUS_RATE: 105,\n    CHORUS_DEPTH: 106,\n    FX_BIT_CRUSHER_BITS: 107,\n    FX_BIT_CRUSHER_RATE: 108,\n    FX_MIX_LEVEL_DSP1: 109,\n    FX_MIX_LEVEL_DSP2: 110,\n    FX_MIX_LEVEL_CHORUS: 111,\n    FX_MIX_LEVEL_BIT_CRUSHER: 112,\n    OUTPUT_VOLUME: 113,\n    OUTPUT_SPREAD: 114,\n    OUTPUT_HEADPHONES: 115,\n    // 120 - 127 reserved for channel mode messages\n}\n\nexport default mapCC","import CC from './mapCC'\nimport { buttonLeftMidiValues } from './buttonLeftMidiValues'\nimport { buttonCenterMidiValues } from './buttonCenterMidiValues'\nimport { buttonRightMidiValues } from './buttonRightMidiValues'\n\n\nexport const BUTTONS = {\n    BUTTONS_LEFT: {\n        cc: CC.BUTTONS_LEFT,\n        values: buttonLeftMidiValues,\n    },\n    BUTTONS_CENTER: {\n        cc: CC.BUTTONS_CENTER,\n        values: buttonCenterMidiValues,\n    },\n    BUTTONS_RIGHT: {\n        cc: CC.BUTTONS_RIGHT,\n        values: buttonRightMidiValues,\n    }\n}","\nexport enum ControllerId {\n    // Sources\n    ARPEGGIATOR,\n    PERF_PITCH_BEND,\n    PERF_MOD_WHEEL,\n    PERF_RIBBON_POS,\n    PERF_RIBBON_PRESSURE,\n    PERF_KBD_PITCH,\n    PERF_KBD_VELOCITY,\n    PERF_KBD_AFTERTOUCH,\n\n    ENVELOPE1,\n    ENVELOPE2,\n    ENVELOPE3,\n    ENVELOPE4,\n    ENVELOPE5,\n\n    LFO1,\n    LFO2,\n    LFO3,\n    LFO4,\n\n    // Intermediate, controllers that regulate the level of another source and then acts as the\n    // modulator of a target.\n    LPF_FM_AMT,\n    LPF_ENV_AMT,\n    LPF_LFO_AMT,\n    LPF_KBD_AMT,\n\n    SVF_FM_AMT,\n    SVF_ENV_AMT,\n    SVF_LFO_AMT,\n    SVF_KBD_AMT,\n\n    // Targets\n    DCO1_PITCH,\n    DCO1_NOTE,\n    DCO1_WAVEFORM,\n    DCO1_SUB1,\n    DCO1_SUB2,\n    DCO1_PW,\n    DCO1_SUPER_SAW,\n\n    DCO2_PITCH,\n    DCO2_NOTE,\n    DCO2_DETUNE,\n    DCO2_WAVEFORM,\n    DCO2_SUB1,\n    DCO2_SUB2,\n    DCO2_PW,\n    DCO2_SUPER_SAW,\n\n    VCO_PITCH,\n    VCO_NOTE,\n    VCO_DETUNE,\n    VCO_WAVEFORM,\n    VCO_CROSS_MOD,\n    VCO_PW,\n\n    DISTORTION_DRIVE,\n    DISTORTION_LEVEL,\n\n    BIT_CRUSHER_BITS,\n    BIT_CRUSHER_RATE,\n    BIT_CRUSHER_LEVEL,\n\n    SRC_MIX_LEVEL_OSC1,\n    SRC_MIX_LEVEL_OSC2,\n    SRC_MIX_LEVEL_OSC3,\n    SRC_MIX_LEVEL_NOISE,\n    SRC_MIX_LEVEL_RING_MOD,\n    SRC_MIX_LEVEL_EXT_AUDIO,\n\n    MASTER_CLOCK_RATE,\n    ARP_TEMPO,\n\n    KBD_PORTAMENTO,\n    KBD_UNISON_DETUNE,\n\n    LPF_INPUT,\n    LPF_DRIVE,\n    LPF_RESONANCE,\n    LPF_CUTOFF,\n\n    SVF_INPUT,\n    SVF_DRIVE,\n    SVF_RESONANCE,\n    SVF_CUTOFF,\n\n    VOICE_MIX_LPF,\n    VOICE_MIX_SVF,\n    VOICE_MIX_SINE1,\n    VOICE_MIX_SINE2,\n    VOICE_OUT_PAN,\n    VOICE_OUT_AMOUNT,\n    VOICE_OUT_FX1_SEND,\n    VOICE_OUT_FX2_SEND,\n\n    DSP1_PARAM1,\n    DSP1_PARAM2,\n    DSP1_PARAM3,\n    DSP2_PARAM1,\n    DSP2_PARAM2,\n    DSP2_PARAM3,\n\n    CHORUS_RATE,\n    CHORUS_DEPTH,\n\n    FX_BIT_CRUSHER_BITS,\n    FX_BIT_CRUSHER_RATE,\n    FX_MIX_LEVEL_DSP1,\n    FX_MIX_LEVEL_DSP2,\n    FX_MIX_LEVEL_CHORUS,\n    FX_MIX_LEVEL_BIT_CRUSHER,\n\n    // LFO and ENV targets\n    ENV_DELAY_TIME,\n    ENV_ATTACK_TIME,\n    ENV_DECAY1_TIME,\n    ENV_DECAY2_TIME,\n    ENV_SUSTAIN_LEVEL,\n    ENV_RELEASE1_TIME,\n    ENV_RELEASE2_TIME,\n    ENV_DECAY2_LEVEL,\n    ENV_RELEASE2_LEVEL,\n\n    LFO_RATE,\n    LFO_DEPTH,\n    LFO_DELAY,\n\n    // Non-modulatable controllers\n    DCO1_SYNC,\n    DCO1_MODE,\n    DCO1_SUB_WAVE,\n    DCO1_WHEEL,\n    DCO1_LFO,\n    DCO1_KBD,\n\n    DCO2_MODE,\n    DCO2_SUB_WAVE,\n    DCO2_WHEEL,\n    DCO2_LFO,\n    DCO2_KBD,\n\n    VCO_SYNC,\n    VCO_CROSS_MOD_SRC,\n    VCO_EXT_CV,\n    VCO_WHEEL,\n    VCO_LFO,\n    VCO_KBD,\n\n    NOISE_COLOUR,\n    RING_MOD_SOURCE,\n\n    DISTORTION_IN,\n    DISTORTION_CLIP,\n    DISTORTION_OUT,\n\n    BIT_CRUSHER_IN,\n    BIT_CRUSHER_OUT,\n\n    SRC_MIX_OUT_OSC1,\n    SRC_MIX_OUT_OSC2,\n    SRC_MIX_OUT_OSC3,\n    SRC_MIX_OUT_NOISE,\n    SRC_MIX_OUT_RING_MOD,\n    SRC_MIX_OUT_EXT_AUDIO,\n\n    LFO_LFO,\n    LFO_SHAPE,\n    LFO_SYNC,\n    LFO_RESET,\n    LFO_ONCE,\n    ROUTE_AMOUNT,\n    ROUTE_FROM,\n    ROUTE_TO,\n\n    MASTER_CLOCK_SOURCE,\n    ARP_ON_OFF,\n    ARP_TRIGGER,\n    ARP_SYNC,\n    ARP_RANGE,\n    ARP_MODE,\n\n    VOICE_SELECTOR_1,\n    VOICE_SELECTOR_2,\n    VOICE_SELECTOR_3,\n    VOICE_SELECTOR_4,\n    VOICE_SELECTOR_5,\n    VOICE_SELECTOR_6,\n    VOICE_SELECTOR_7,\n    VOICE_SELECTOR_8,\n    MAIN_DISP_POT1,\n    MAIN_DISP_POT2,\n    MAIN_DISP_POT3,\n    MAIN_DISP_POT4,\n    MAIN_DISP_POT5,\n    MAIN_DISP_POT6,\n    MAIN_DISP_GROUP_MENU,\n    MAIN_DISP_FUNC_HOME,\n    MAIN_DISP_FUNC_SETTINGS,\n    MAIN_DISP_FUNC_SHIFT,\n    MAIN_DISP_FUNC_PERFORM,\n    MAIN_DISP_FUNC_LOAD,\n    MAIN_DISP_FUNC_SAVE,\n    MAIN_DISP_FUNC_COMPARE,\n    MAIN_DISP_FUNC_ROUTE,\n    KBD_TRANSPOSE,\n\n    KBD_HOLD,\n    KBD_CHORD,\n    KBD_MODE,\n\n    LPF_EXT_CV,\n    LPF_WHEEL,\n    LPF_SLOPE,\n    FILTERS_LINK_CUTOFF,\n    FILTERS_ROUTING,\n\n    SVF_EXT_CV,\n    SVF_WHEEL,\n    SVF_SLOPE,\n\n    ENV_CURVE,\n    ENV_LEVEL,\n    ENV_TIME,\n    ENV_MAX_LOOPS,\n    ENV_TOGGLE_STAGE,\n    ENV_SELECT,\n    ENV_SELECT_ENV3_ID,\n    ENV_TRIGGER,\n    ENV_RELEASE,\n    ENV_LOOP,\n    ENV_INVERT,\n    ENV_RESET_ON_TRIGGER,\n    ENV_RELEASE_MODE,\n    ENV_LOOP_MODE,\n\n    DSP1_EFFECT,\n    DSP1_SOURCE,\n    DSP2_EFFECT,\n    DSP2_SOURCE,\n    DSP2_CHAIN,\n\n    CHORUS_SOURCE,\n    CHORUS_MODE,\n\n    FX_BIT_CRUSHER_SOURCE,\n    OUT_VOLUME,\n    OUT_SPREAD,\n    OUT_HEADPHONES,\n\n}\n","const mapNRPN = {\n    ENV_CURVE: 0,\n    ENV_LEVEL: 1,\n    ENV_TIME: 2,\n    DCO1_PITCH: 3,\n    DCO2_PITCH: 4,\n    VCO_PITCH: 5,\n}\n\nexport default mapNRPN","import CC from '../../mapCC'\nimport { BUTTONS } from '../../buttons'\nimport { FuncProps, ControllerConfigCC, ControllerConfigCCWithValue, ControllerConfigNRPN } from '../../types'\nimport NRPN from '../../mapNRPN'\nimport { ControllerId } from '../../controllerIds'\n\ninterface ControllersOsc {\n    DCO1: {\n        props: FuncProps\n        PITCH: ControllerConfigNRPN\n        NOTE: ControllerConfigCC\n        SUPER_SAW: ControllerConfigCC\n        WAVEFORM: ControllerConfigCC\n        SUB1: ControllerConfigCC\n        SUB2: ControllerConfigCC\n        PW: ControllerConfigCC\n        SYNC: ControllerConfigCCWithValue\n        MODE: ControllerConfigCCWithValue\n        SUB_WAVE: ControllerConfigCCWithValue\n        WHEEL: ControllerConfigCCWithValue\n        LFO: ControllerConfigCCWithValue\n        KBD: ControllerConfigCCWithValue\n    },\n    DCO2: {\n        props: FuncProps\n        PITCH: ControllerConfigNRPN\n        NOTE: ControllerConfigCC\n        DETUNE: ControllerConfigCC\n        SUPER_SAW: ControllerConfigCC\n        WAVEFORM: ControllerConfigCC\n        SUB1: ControllerConfigCC\n        SUB2: ControllerConfigCC\n        PW: ControllerConfigCC\n        MODE: ControllerConfigCCWithValue\n        SUB_WAVE: ControllerConfigCCWithValue\n        WHEEL: ControllerConfigCCWithValue\n        LFO: ControllerConfigCCWithValue\n        KBD: ControllerConfigCCWithValue\n    },\n    VCO: {\n        props: FuncProps\n        PITCH: ControllerConfigNRPN\n        NOTE: ControllerConfigCC\n        DETUNE: ControllerConfigCC\n        WAVEFORM: ControllerConfigCC\n        CROSS_MOD: ControllerConfigCC\n        PW: ControllerConfigCC\n        SYNC: ControllerConfigCCWithValue\n        CROSS_MOD_SRC: ControllerConfigCCWithValue\n        EXT_CV: ControllerConfigCCWithValue\n        WHEEL: ControllerConfigCCWithValue\n        LFO: ControllerConfigCCWithValue\n        KBD: ControllerConfigCCWithValue\n    }\n}\n\nconst controllersOsc: ControllersOsc = {\n    DCO1: {\n        props: { label: 'Osc 1' },\n        // pots\n        PITCH: {\n            id: ControllerId.DCO1_PITCH,\n            label: 'Pitch',\n            isTargetDigi: true,\n            type: 'pot',\n            addr: NRPN.DCO1_PITCH\n        },\n        NOTE: {\n            id: ControllerId.DCO1_NOTE,\n            label: 'Note',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DCO1_NOTE\n        },\n        SUPER_SAW: {\n            id: ControllerId.DCO1_SUPER_SAW,\n            label: 'Super saw',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DCO1_SUPER_SAW\n        },\n        WAVEFORM: {\n            id: ControllerId.DCO1_WAVEFORM,\n            label: 'Waveform',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DCO1_WAVEFORM\n        },\n        SUB1: {\n            id: ControllerId.DCO1_SUB1,\n            label: 'Sub 1',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DCO1_SUB1\n        },\n        SUB2: {\n            id: ControllerId.DCO1_SUB2,\n            label: 'Sub 2',\n            isTargetDigi: true,\n            type: 'pot', cc: CC.DCO1_SUB2\n        },\n        PW: {\n            id: ControllerId.DCO1_PW,\n            label: 'PW',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DCO1_PW\n        },\n\n        //buttons\n        SYNC: {\n            id: ControllerId.DCO1_SYNC,\n            label: 'Sync',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC1_SYNC_OFF,\n                BUTTONS.BUTTONS_LEFT.values.OSC1_SYNC_1_2,\n                BUTTONS.BUTTONS_LEFT.values.OSC1_SYNC_2_1,\n            ],\n        },\n        MODE: {\n            id: ControllerId.DCO1_MODE,\n            label: 'Mode',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC1_MODE_DCO,\n                BUTTONS.BUTTONS_LEFT.values.OSC1_MODE_WT,\n                BUTTONS.BUTTONS_LEFT.values.OSC1_MODE_PCM,\n            ],\n        },\n        SUB_WAVE: {\n            id: ControllerId.DCO1_SUB_WAVE,\n            label: 'Sub wave',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC1_SUB_WAVE_SQR,\n                BUTTONS.BUTTONS_LEFT.values.OSC1_SUB_WAVE_SAW,\n            ],\n        },\n        WHEEL: {\n            id: ControllerId.DCO1_WHEEL,\n            label: 'Mod wheel',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC1_WHEEL_OFF,\n                BUTTONS.BUTTONS_LEFT.values.OSC1_WHEEL_ON,\n            ],\n        },\n        LFO: {\n            id: ControllerId.DCO1_LFO,\n            label: 'LFO mod',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC1_LFO_OFF,\n                BUTTONS.BUTTONS_LEFT.values.OSC1_LFO_ON,\n            ],\n        },\n        KBD: {\n            id: ControllerId.DCO1_KBD,\n            label: 'Keyboard track',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC1_KBD_OFF,\n                BUTTONS.BUTTONS_LEFT.values.OSC1_KBD_ON,\n            ],\n        },\n    },\n    DCO2: {\n        props: { label: 'Osc 2' },\n        // pots\n        PITCH: {\n            id: ControllerId.DCO2_PITCH,\n            label: 'Pitch',\n            isTargetDigi: true,\n            type: 'pot',\n            addr: NRPN.DCO2_PITCH\n        },\n        NOTE: {\n            id: ControllerId.DCO2_NOTE,\n            label: 'Note',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DCO2_NOTE\n        },\n        DETUNE: {\n            id: ControllerId.DCO2_DETUNE,\n            label: 'Detune',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DCO2_DETUNE\n        },\n        SUPER_SAW: {\n            id: ControllerId.DCO2_SUPER_SAW,\n            label: 'Super saw',\n            isTargetDigi: true,\n            type: 'pot', cc: CC.DCO2_SUPER_SAW\n        },\n        WAVEFORM: {\n            id: ControllerId.DCO2_WAVEFORM,\n            label: 'Waveform',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DCO2_WAVEFORM\n        },\n        SUB1: {\n            id: ControllerId.DCO2_SUB1,\n            label: 'Sub 1',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DCO2_SUB1\n        },\n        SUB2: {\n            id: ControllerId.DCO2_SUB2,\n            label: 'Sub 2',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DCO2_SUB2\n        },\n        PW: {\n            id: ControllerId.DCO2_PW,\n            label: 'PW',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DCO2_PW\n        },\n\n        //buttons\n        MODE: {\n            id: ControllerId.DCO2_MODE,\n            label: 'Mode',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC2_MODE_DCO,\n                BUTTONS.BUTTONS_LEFT.values.OSC2_MODE_WT,\n                BUTTONS.BUTTONS_LEFT.values.OSC2_MODE_PCM,\n            ],\n        },\n        SUB_WAVE: {\n            id: ControllerId.DCO2_SUB_WAVE,\n            label: 'Sub wave',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC2_SUB_WAVE_SQR,\n                BUTTONS.BUTTONS_LEFT.values.OSC2_SUB_WAVE_SAW,\n            ],\n        },\n        WHEEL: {\n            id: ControllerId.DCO2_WHEEL,\n            label: 'Mod wheel',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC2_WHEEL_OFF,\n                BUTTONS.BUTTONS_LEFT.values.OSC2_WHEEL_ON,\n            ],\n        },\n        LFO: {\n            id: ControllerId.DCO2_LFO,\n            label: 'LFO mod',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC2_LFO_OFF,\n                BUTTONS.BUTTONS_LEFT.values.OSC2_LFO_ON,\n            ],\n        },\n        KBD: {\n            id: ControllerId.DCO2_KBD,\n            label: 'Keyboard track',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC2_KBD_OFF,\n                BUTTONS.BUTTONS_LEFT.values.OSC2_KBD_ON,\n            ],\n        },\n    },\n    VCO: {\n        props: { label: 'Osc 3' },\n        // pots\n        PITCH: {\n            id: ControllerId.VCO_PITCH,\n            label: 'Pitch',\n            isTargetDigi: true,\n            type: 'pot',\n            addr: NRPN.VCO_PITCH\n        },\n        NOTE: {\n            id: ControllerId.VCO_NOTE,\n            label: 'Note',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.VCO_NOTE\n        },\n        DETUNE: {\n            id: ControllerId.VCO_DETUNE,\n            label: 'Detune',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.VCO_DETUNE\n        },\n        WAVEFORM: {\n            id: ControllerId.VCO_WAVEFORM,\n            label: 'Waveform',\n            isTargetDigi: true,\n            type: 'pot', cc: CC.VCO_WAVEFORM\n        },\n        CROSS_MOD: {\n            id: ControllerId.VCO_CROSS_MOD,\n            label: 'Cross mod',\n            shortLabel: 'X-mod',\n            isTargetDigi: true,\n            type: 'pot', cc: CC.VCO_CROSS_MOD\n        },\n        PW: {\n            id: ControllerId.VCO_PW,\n            label: 'PW',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.VCO_PW\n        },\n\n        //buttons\n        SYNC: {\n            id: ControllerId.VCO_SYNC,\n            label: 'Sync',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC3_SYNC_OFF,\n                BUTTONS.BUTTONS_LEFT.values.OSC3_SYNC_HARD,\n                BUTTONS.BUTTONS_LEFT.values.OSC3_SYNC_CEM_HARD,\n                BUTTONS.BUTTONS_LEFT.values.OSC3_SYNC_CEM_SOFT,\n            ],\n        },\n        CROSS_MOD_SRC: {\n            id: ControllerId.VCO_CROSS_MOD_SRC,\n            label: 'Cross mod source',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC3_CROSS_MOD_SRC_OSC1,\n                BUTTONS.BUTTONS_LEFT.values.OSC3_CROSS_MOD_SRC_EXT,\n            ],\n        },\n        EXT_CV: {\n            id: ControllerId.VCO_EXT_CV,\n            label: 'Ext. CV',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC3_EXT_CV_OFF,\n                BUTTONS.BUTTONS_LEFT.values.OSC3_EXT_CV_ON,\n            ],\n        },\n        WHEEL: {\n            id: ControllerId.VCO_WHEEL,\n            label: 'Mod wheel',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC3_WHEEL_OFF,\n                BUTTONS.BUTTONS_LEFT.values.OSC3_WHEEL_ON,\n            ],\n        },\n        LFO: {\n            id: ControllerId.VCO_LFO,\n            label: 'LFO mod',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC3_LFO_OFF,\n                BUTTONS.BUTTONS_LEFT.values.OSC3_LFO_ON,\n            ],\n        },\n        KBD: {\n            id: ControllerId.VCO_KBD,\n            label: 'Keyboard track',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.OSC3_KBD_OFF,\n                BUTTONS.BUTTONS_LEFT.values.OSC3_KBD_ON,\n            ],\n        },\n    }\n}\n\nexport default controllersOsc\n","import { AnyAction, Dispatch } from '@reduxjs/toolkit'\nimport { store } from './store'\n\nlet storeDispatch: Dispatch | undefined\n\nexport const dispatch = (action: AnyAction) => {\n    if (!storeDispatch) {\n        storeDispatch = store.dispatch\n    }\n    storeDispatch(action)\n}\n\nexport const getBounded = (value: number, from: number = 0, to: number = 1) => {\n    if (value > to) {\n        return to\n    }\n    if (value < from) {\n        return from\n    }\n    return value\n}\n\n// Quantize to 16 bit to store same number as we send over midi\nexport const getQuantized = (value: number, factor: number = 65535) => Math.round(value * factor) / factor\n\nexport const step = (increment: number) => increment > 0 ? 1 : -1","export enum MainDisplayScreenId {\n    LFO,\n    OSC,\n    FILTER,\n    ENV,\n    MOD,\n    FX\n}\n\nexport enum MainDisplayControllerIds {\n    POT1,\n    POT2,\n    POT3,\n    POT4,\n    POT5,\n    POT6,\n    MENU_LFO,\n    MENU_OSC,\n    MENU_FILTER,\n    MENU_ENVELOPE,\n    MENU_MOD,\n    MENU_FX,\n    FUNC_HOME,\n    FUNC_SETTINGS,\n    FUNC_SHIFT,\n    FUNC_PERFORM,\n    FUNC_LOAD,\n    FUNC_SAVE,\n    FUNC_COMPARE,\n    FUNC_ROUTE,\n}","import { BUTTONS } from '../../buttons'\nimport { FuncProps, ControllerConfigCCWithValue } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\ninterface ControllersNoise {\n    props: FuncProps\n    COLOUR: ControllerConfigCCWithValue\n}\n\nconst controllersNoise: ControllersNoise = {\n    props: { label: 'Noise' },\n    COLOUR: {\n        id: ControllerId.NOISE_COLOUR,\n        label: 'Colour',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_LEFT.cc,\n        values: [\n            BUTTONS.BUTTONS_LEFT.values.NOISE_COLOUR_WHITE,\n            BUTTONS.BUTTONS_LEFT.values.NOISE_COLOUR_PINK,\n            BUTTONS.BUTTONS_LEFT.values.NOISE_COLOUR_RED,\n        ],\n    }\n}\n\nexport default controllersNoise","import { BUTTONS } from '../../buttons'\nimport { FuncProps, ControllerConfigCCWithValue } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\n\ninterface ControllersRingMod {\n    props: FuncProps\n    SOURCE: ControllerConfigCCWithValue\n}\n\nconst controllersRingMod: ControllersRingMod = {\n    props: { label: 'Ring modulator' },\n    SOURCE: {\n        id: ControllerId.RING_MOD_SOURCE,\n        label: 'Sources',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n            BUTTONS.BUTTONS_LEFT.values.RING_MOD_SOURCE_1_2,\n            BUTTONS.BUTTONS_LEFT.values.RING_MOD_SOURCE_EXT_2,\n        ],\n    }\n}\n\nexport default controllersRingMod","import CC from '../../mapCC'\nimport { BUTTONS } from '../../buttons'\nimport { FuncProps, ControllerConfigCC, ControllerConfigCCWithValue } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\ninterface ControllersFx {\n    DISTORTION: {\n        props: FuncProps\n        DRIVE: ControllerConfigCC\n        LEVEL: ControllerConfigCC\n        IN: ControllerConfigCCWithValue\n        CLIP: ControllerConfigCCWithValue\n        OUT: ControllerConfigCCWithValue\n    },\n    BIT_CRUSHER: {\n        props: FuncProps\n        BITS: ControllerConfigCC\n        RATE: ControllerConfigCC\n        LEVEL: ControllerConfigCC\n        IN: ControllerConfigCCWithValue\n        OUT: ControllerConfigCCWithValue\n    }\n}\n\nconst controllersFx: ControllersFx = {\n    DISTORTION: {\n        props: { label: 'Distortion' },\n        // Pots\n        DRIVE: {\n            id: ControllerId.DISTORTION_DRIVE,\n            label: 'Drive',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DISTORTION_DRIVE\n        },\n        LEVEL: {\n            id: ControllerId.DISTORTION_LEVEL,\n            label: 'Level',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DISTORTION_LEVEL\n        },\n        // Buttons\n        IN: {\n            id: ControllerId.DISTORTION_IN,\n            label: 'In',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.DISTORTION_IN_A,\n                BUTTONS.BUTTONS_LEFT.values.DISTORTION_IN_B,\n                BUTTONS.BUTTONS_LEFT.values.DISTORTION_IN_BOTH,\n            ],\n        },\n        CLIP: {\n            id: ControllerId.DISTORTION_CLIP,\n            label: 'Clip',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.DISTORTION_SOFT,\n                BUTTONS.BUTTONS_LEFT.values.DISTORTION_HARD,\n            ],\n        },\n        OUT: {\n            id: ControllerId.DISTORTION_OUT,\n            label: 'Out',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.DISTORTION_OUT_A,\n                BUTTONS.BUTTONS_LEFT.values.DISTORTION_OUT_B,\n                BUTTONS.BUTTONS_LEFT.values.DISTORTION_OUT_BOTH,\n            ],\n        },\n    },\n    BIT_CRUSHER: {\n        props: { label: 'Bit crusher' },\n        BITS: {\n            id: ControllerId.BIT_CRUSHER_BITS,\n            label: 'Bits',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.BIT_CRUSHER_BITS\n        },\n        RATE: {\n            id: ControllerId.BIT_CRUSHER_RATE,\n            label: 'Rate',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.BIT_CRUSHER_RATE\n        },\n        LEVEL: {\n            id: ControllerId.BIT_CRUSHER_LEVEL,\n            label: 'Level',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.BIT_CRUSHER_LEVEL\n        },\n        // Buttons\n        IN: {\n            id: ControllerId.BIT_CRUSHER_IN,\n            label: 'In',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.BIT_CRUSHER_IN_A,\n                BUTTONS.BUTTONS_LEFT.values.BIT_CRUSHER_IN_B,\n                BUTTONS.BUTTONS_LEFT.values.BIT_CRUSHER_IN_BOTH,\n            ],\n        },\n        OUT: {\n            id: ControllerId.BIT_CRUSHER_OUT,\n            label: 'Out',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n                BUTTONS.BUTTONS_LEFT.values.BIT_CRUSHER_OUT_A,\n                BUTTONS.BUTTONS_LEFT.values.BIT_CRUSHER_OUT_B,\n                BUTTONS.BUTTONS_LEFT.values.BIT_CRUSHER_OUT_BOTH,\n            ],\n        },\n    }\n}\n\nexport default controllersFx","import CC from '../../mapCC'\nimport { BUTTONS } from '../../buttons'\nimport { FuncProps, ControllerConfigCC, ControllerConfigCCWithValue, ControllerConfig } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\ninterface ControllersLfo {\n    props: FuncProps\n    RATE: ControllerConfigCC\n    DEPTH: ControllerConfigCC\n    DELAY: ControllerConfigCC\n    LFO: ControllerConfigCCWithValue\n    SHAPE: ControllerConfigCCWithValue\n    SYNC: ControllerConfigCCWithValue\n    RESET: ControllerConfigCCWithValue\n    ONCE: ControllerConfigCCWithValue\n    OUTPUT: ControllerConfig\n}\n\nconst controllersLfo = (ctrlIndex: number): ControllersLfo => ({\n    props: {\n        label: `LFO ${1 + ctrlIndex}`,\n        ctrlIndex\n    },\n    // Pots\n    RATE: {\n        id: ControllerId.LFO_RATE,\n        label: 'Rate',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.LFO_RATE\n    },\n    DEPTH: {\n        id: ControllerId.LFO_DEPTH,\n        label: 'Depth',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.LFO_DEPTH\n    },\n    DELAY: {\n        id: ControllerId.LFO_DELAY,\n        label: 'Delay',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.LFO_DELAY\n    },\n    // Buttons\n    LFO: {\n        id: ControllerId.LFO_LFO,\n        label: 'Select',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_LEFT.cc,\n        values: [\n            BUTTONS.BUTTONS_LEFT.values.LFO1,\n            BUTTONS.BUTTONS_LEFT.values.LFO2,\n            BUTTONS.BUTTONS_LEFT.values.LFO3,\n            BUTTONS.BUTTONS_LEFT.values.LFO4,\n        ],\n    },\n    SHAPE: {\n        id: ControllerId.LFO_SHAPE,\n        label: 'Shape',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_LEFT.cc,\n        values: [\n            BUTTONS.BUTTONS_LEFT.values.LFO_SHAPE_SAW,\n            BUTTONS.BUTTONS_LEFT.values.LFO_SHAPE_TRI,\n            BUTTONS.BUTTONS_LEFT.values.LFO_SHAPE_SQR,\n            BUTTONS.BUTTONS_LEFT.values.LFO_SHAPE_SIN,\n            BUTTONS.BUTTONS_LEFT.values.LFO_SHAPE_SH,\n        ],\n    },\n    SYNC: {\n        id: ControllerId.LFO_SYNC,\n        label: 'Sync',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_LEFT.cc,\n        values: [\n            BUTTONS.BUTTONS_LEFT.values.LFO_SYNC_OFF,\n            BUTTONS.BUTTONS_LEFT.values.LFO_SYNC_ON,\n        ],\n    },\n    RESET: {\n        id: ControllerId.LFO_RESET,\n        label: 'Reset',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_LEFT.cc,\n        values: [\n            BUTTONS.BUTTONS_LEFT.values.LFO_RESET_OFF,\n            BUTTONS.BUTTONS_LEFT.values.LFO_RESET_ON,\n        ],\n    },\n    ONCE: {\n        id: ControllerId.LFO_ONCE,\n        label: 'Once',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_LEFT.cc,\n        values: [\n            BUTTONS.BUTTONS_LEFT.values.LFO_ONCE_OFF,\n            BUTTONS.BUTTONS_LEFT.values.LFO_ONCE_ON,\n        ],\n    },\n    OUTPUT: {\n        id: ControllerId.LFO1 + ctrlIndex,\n        label: `LFO ${1 + ctrlIndex}`,\n        type: 'output',\n        isSourceDigi: true\n    },\n})\n\nexport default controllersLfo","import CC from '../../mapCC'\nimport { BUTTONS } from '../../buttons'\nimport { FuncProps, ControllerConfigCC, ControllerConfigCCWithValue } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\ninterface ControllersSrcMix {\n    props: FuncProps\n    LEVEL_OSC1: ControllerConfigCC\n    LEVEL_OSC2: ControllerConfigCC\n    LEVEL_OSC3: ControllerConfigCC\n    LEVEL_NOISE: ControllerConfigCC\n    LEVEL_RING_MOD: ControllerConfigCC\n    LEVEL_EXT_AUDIO: ControllerConfigCC\n    OUT_OSC1: ControllerConfigCCWithValue\n    OUT_OSC2: ControllerConfigCCWithValue\n    OUT_OSC3: ControllerConfigCCWithValue\n    OUT_NOISE: ControllerConfigCCWithValue\n    OUT_RING_MOD: ControllerConfigCCWithValue\n    OUT_EXT_AUDIO: ControllerConfigCCWithValue\n}\n\nconst controllersSrcMix: ControllersSrcMix = {\n    props: {\n        label: 'Source mix'\n    },\n    LEVEL_OSC1: {\n        id: ControllerId.SRC_MIX_LEVEL_OSC1,\n        label: 'Osc 1',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.LEVEL_OSC1\n    },\n    LEVEL_OSC2: {\n        id: ControllerId.SRC_MIX_LEVEL_OSC2,\n        label: 'Osc 2',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.LEVEL_OSC2\n    },\n    LEVEL_OSC3: {\n        id: ControllerId.SRC_MIX_LEVEL_OSC3,\n        label: 'Osc 3',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.LEVEL_OSC3\n    },\n    LEVEL_NOISE: {\n        id: ControllerId.SRC_MIX_LEVEL_NOISE,\n        label: 'Noise',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.LEVEL_NOISE\n    },\n    LEVEL_RING_MOD: {\n        id: ControllerId.SRC_MIX_LEVEL_RING_MOD,\n        label: 'Ring mod',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.LEVEL_RING_MOD\n    },\n    LEVEL_EXT_AUDIO: {\n        id: ControllerId.SRC_MIX_LEVEL_EXT_AUDIO,\n        label: 'Ext. audio',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.LEVEL_EXT_AUDIO\n    },\n    OUT_OSC1: {\n        id: ControllerId.SRC_MIX_OUT_OSC1,\n        label: 'Osc 1 target',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n            BUTTONS.BUTTONS_LEFT.values.OSC1_OUT_A,\n            BUTTONS.BUTTONS_LEFT.values.OSC1_OUT_B,\n            BUTTONS.BUTTONS_LEFT.values.OSC1_OUT_BOTH,\n        ],\n    },\n    OUT_OSC2: {\n        id: ControllerId.SRC_MIX_OUT_OSC2,\n        label: 'Osc 2 target',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n            BUTTONS.BUTTONS_LEFT.values.OSC2_OUT_A,\n            BUTTONS.BUTTONS_LEFT.values.OSC2_OUT_B,\n            BUTTONS.BUTTONS_LEFT.values.OSC2_OUT_BOTH,\n        ],\n    },\n    OUT_OSC3: {\n        id: ControllerId.SRC_MIX_OUT_OSC3,\n        label: 'Osc 3 target',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n            BUTTONS.BUTTONS_LEFT.values.OSC3_OUT_A,\n            BUTTONS.BUTTONS_LEFT.values.OSC3_OUT_B,\n            BUTTONS.BUTTONS_LEFT.values.OSC3_OUT_BOTH,\n        ],\n    },\n    OUT_NOISE: {\n        id: ControllerId.SRC_MIX_OUT_NOISE,\n        label: 'Noise target',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n            BUTTONS.BUTTONS_LEFT.values.NOISE_OUT_A,\n            BUTTONS.BUTTONS_LEFT.values.NOISE_OUT_B,\n            BUTTONS.BUTTONS_LEFT.values.NOISE_OUT_BOTH,\n        ],\n    },\n    OUT_RING_MOD: {\n        id: ControllerId.SRC_MIX_OUT_RING_MOD,\n        label: 'Ring mod target',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n            BUTTONS.BUTTONS_LEFT.values.RING_MOD_OUT_A,\n            BUTTONS.BUTTONS_LEFT.values.RING_MOD_OUT_B,\n            BUTTONS.BUTTONS_LEFT.values.RING_MOD_OUT_BOTH,\n        ],\n    },\n    OUT_EXT_AUDIO: {\n        id: ControllerId.SRC_MIX_OUT_RING_MOD,\n        label: 'Ext. audio target',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n            BUTTONS.BUTTONS_LEFT.values.EXT_AUDIO_OUT_A,\n            BUTTONS.BUTTONS_LEFT.values.EXT_AUDIO_OUT_B,\n            BUTTONS.BUTTONS_LEFT.values.EXT_AUDIO_OUT_BOTH,\n        ],\n    },\n}\n\nexport default controllersSrcMix","import CC from '../../mapCC'\nimport { BUTTONS } from '../../buttons'\nimport { ControllerConfigCCWithValue, ControllerConfigNRPN, FuncProps } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\ninterface ControllersRoute {\n    props: FuncProps\n    AMOUNT: ControllerConfigNRPN\n    FROM: ControllerConfigCCWithValue\n    TO: ControllerConfigCCWithValue\n}\n\nconst controllersRoute: ControllersRoute = {\n    props: { label: 'Routing' },\n    AMOUNT: { id: ControllerId.ROUTE_AMOUNT, label: 'Amount', type: 'pot', addr: CC.ROUTE_AMOUNT },\n    FROM: {\n        id: ControllerId.ROUTE_FROM,\n        label: 'From',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n            BUTTONS.BUTTONS_LEFT.values.ROUTE_OFF,\n            BUTTONS.BUTTONS_LEFT.values.ROUTE_FROM_ON,\n            BUTTONS.BUTTONS_LEFT.values.ROUTE_TO_ON,\n        ],\n    },\n    TO: {\n        id: ControllerId.ROUTE_TO,\n        label: 'To',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n            BUTTONS.BUTTONS_LEFT.values.ROUTE_OFF,\n            BUTTONS.BUTTONS_LEFT.values.ROUTE_FROM_ON,\n            BUTTONS.BUTTONS_LEFT.values.ROUTE_TO_ON,\n        ],\n    },\n}\n\nexport default controllersRoute","import CC from '../../mapCC'\nimport { BUTTONS } from '../../buttons'\nimport { FuncProps, ControllerConfigCC, ControllerConfigCCWithValue } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\ninterface ControllersMasterClock {\n    props: FuncProps\n    RATE: ControllerConfigCC,\n    SOURCE: ControllerConfigCCWithValue\n}\n\nconst controllersMasterClock: ControllersMasterClock = {\n    props: { label: 'Master clock', shortLabel: 'Master clk' },\n    RATE: {\n        id: ControllerId.MASTER_CLOCK_RATE,\n        label: 'Rate',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.MASTER_CLOCK_RATE\n    },\n    SOURCE: {\n        id: ControllerId.MASTER_CLOCK_SOURCE,\n        label: 'Source',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_LEFT.cc,\n            values: [\n            BUTTONS.BUTTONS_LEFT.values.MASTER_CLOCK_SRC_MASTER,\n            BUTTONS.BUTTONS_LEFT.values.MASTER_CLOCK_SRC_MIDI,\n            BUTTONS.BUTTONS_LEFT.values.MASTER_CLOCK_SRC_EXT,\n        ],\n    },\n}\n\nexport default controllersMasterClock","import CC from '../../mapCC'\nimport { BUTTONS } from '../../buttons'\nimport { ControllerConfig, ControllerConfigCC, ControllerConfigCCWithValue, FuncProps } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\ninterface ControllersArp {\n    props: FuncProps\n    TEMPO: ControllerConfigCC\n    ON_OFF: ControllerConfigCCWithValue\n    TRIGGER: ControllerConfigCCWithValue\n    SYNC: ControllerConfigCCWithValue\n    RANGE: ControllerConfigCCWithValue\n    MODE: ControllerConfigCCWithValue\n    OUTPUT: ControllerConfig\n}\n\nconst controllersArp: ControllersArp = {\n    props: { label: 'Arpeggiator', shortLabel: 'Arp' },\n    TEMPO: {\n        id: ControllerId.ARP_TEMPO,\n        label: 'Tempo',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.ARP_TEMPO\n    },\n    ON_OFF: {\n        id: ControllerId.ARP_ON_OFF,\n        label: 'On/off',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_LEFT.cc,\n        values: [\n            BUTTONS.BUTTONS_LEFT.values.ARP_OFF,\n            BUTTONS.BUTTONS_LEFT.values.ARP_ON,\n        ],\n    },\n    TRIGGER: {\n        id: ControllerId.ARP_TRIGGER,\n        label: 'Trigger',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_LEFT.cc,\n        values: [\n            BUTTONS.BUTTONS_LEFT.values.ARP_TRIGGER_OFF,\n            BUTTONS.BUTTONS_LEFT.values.ARP_TRIGGER_ON,\n        ],\n    },\n    SYNC: {\n        id: ControllerId.ARP_SYNC,\n        label: 'Sync',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_LEFT.cc,\n        values: [\n            BUTTONS.BUTTONS_LEFT.values.ARP_SYNC_OFF,\n            BUTTONS.BUTTONS_LEFT.values.ARP_SYNC_MASTER,\n            BUTTONS.BUTTONS_LEFT.values.ARP_SYNC_LFO1,\n            BUTTONS.BUTTONS_LEFT.values.ARP_SYNC_EXT,\n        ],\n    },\n    RANGE: {\n        id: ControllerId.ARP_RANGE,\n        label: 'Range',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_LEFT.cc,\n        values: [\n            BUTTONS.BUTTONS_LEFT.values.ARP_RANGE_1,\n            BUTTONS.BUTTONS_LEFT.values.ARP_RANGE_2,\n            BUTTONS.BUTTONS_LEFT.values.ARP_RANGE_3,\n        ],\n    },\n    MODE: {\n        id: ControllerId.ARP_MODE,\n        label: 'Mode',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_LEFT.cc,\n        values: [\n            BUTTONS.BUTTONS_LEFT.values.ARP_MODE_UP,\n            BUTTONS.BUTTONS_LEFT.values.ARP_MODE_DOWN,\n            BUTTONS.BUTTONS_LEFT.values.ARP_MODE_UP_DOWN,\n            BUTTONS.BUTTONS_LEFT.values.ARP_MODE_RANDOM,\n            BUTTONS.BUTTONS_LEFT.values.ARP_MODE_OTHER,\n        ],\n    },\n    OUTPUT: {\n        id: ControllerId.ARPEGGIATOR,\n        label: 'Arp',\n        type: 'output',\n        isSourceDigi: true\n    }\n}\n\nexport default controllersArp","import { BUTTONS } from '../../buttons'\nimport { ControllerConfigCCWithValue, FuncProps } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\n\ninterface ControllersVoices {\n    props: FuncProps\n    VOICE1: ControllerConfigCCWithValue\n    VOICE2: ControllerConfigCCWithValue\n    VOICE3: ControllerConfigCCWithValue\n    VOICE4: ControllerConfigCCWithValue\n    VOICE5: ControllerConfigCCWithValue\n    VOICE6: ControllerConfigCCWithValue\n    VOICE7: ControllerConfigCCWithValue\n    VOICE8: ControllerConfigCCWithValue\n}\n\nconst controllersVoices: ControllersVoices = {\n    props: { label: 'Voice selector' },\n    VOICE1: {\n        id: ControllerId.VOICE_SELECTOR_1,\n        label: 'Voice 1',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_CENTER.cc,\n            values: [\n            BUTTONS.BUTTONS_CENTER.values.VOICE1_OFF,\n            BUTTONS.BUTTONS_CENTER.values.VOICE1_ON,\n        ],\n    },\n    VOICE2: {\n        id: ControllerId.VOICE_SELECTOR_2,\n        label: 'Voice 2',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_CENTER.cc,\n            values: [\n            BUTTONS.BUTTONS_CENTER.values.VOICE2_OFF,\n            BUTTONS.BUTTONS_CENTER.values.VOICE2_ON,\n        ],\n    },\n    VOICE3: {\n        id: ControllerId.VOICE_SELECTOR_3,\n        label: 'Voice 3',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_CENTER.cc,\n            values: [\n            BUTTONS.BUTTONS_CENTER.values.VOICE3_OFF,\n            BUTTONS.BUTTONS_CENTER.values.VOICE3_ON,\n        ],\n    },\n    VOICE4: {\n        id: ControllerId.VOICE_SELECTOR_4,\n        label: 'Voice 4',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_CENTER.cc,\n            values: [\n            BUTTONS.BUTTONS_CENTER.values.VOICE4_OFF,\n            BUTTONS.BUTTONS_CENTER.values.VOICE4_ON,\n        ],\n    },\n    VOICE5: {\n        id: ControllerId.VOICE_SELECTOR_5,\n        label: 'Voice 5',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_CENTER.cc,\n            values: [\n            BUTTONS.BUTTONS_CENTER.values.VOICE5_OFF,\n            BUTTONS.BUTTONS_CENTER.values.VOICE5_ON,\n        ],\n    },\n    VOICE6: {\n        id: ControllerId.VOICE_SELECTOR_6,\n        label: 'Voice 6',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_CENTER.cc,\n            values: [\n            BUTTONS.BUTTONS_CENTER.values.VOICE6_OFF,\n            BUTTONS.BUTTONS_CENTER.values.VOICE6_ON,\n        ],\n    },\n    VOICE7: {\n        id: ControllerId.VOICE_SELECTOR_7,\n        label: 'Voice 7',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_CENTER.cc,\n            values: [\n            BUTTONS.BUTTONS_CENTER.values.VOICE7_OFF,\n            BUTTONS.BUTTONS_CENTER.values.VOICE7_ON,\n        ],\n    },\n    VOICE8: {\n        id: ControllerId.VOICE_SELECTOR_7,\n        label: 'Voice 8',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_CENTER.cc,\n            values: [\n            BUTTONS.BUTTONS_CENTER.values.VOICE8_OFF,\n            BUTTONS.BUTTONS_CENTER.values.VOICE8_ON,\n        ],\n    },\n}\n\nexport default controllersVoices","import CC from '../../mapCC'\nimport { BUTTONS } from '../../buttons'\nimport { FuncProps, ControllerConfigCC, ControllerConfigCCWithValue } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\ninterface ControllersMainDisplay {\n    props: FuncProps\n    POT1: ControllerConfigCC,\n    POT2: ControllerConfigCC,\n    POT3: ControllerConfigCC,\n    POT4: ControllerConfigCC,\n    POT5: ControllerConfigCC,\n    POT6: ControllerConfigCC,\n\n    GROUP_MENU: ControllerConfigCCWithValue\n    FUNC_HOME: ControllerConfigCCWithValue\n    FUNC_SETTINGS: ControllerConfigCCWithValue\n    FUNC_SHIFT: ControllerConfigCCWithValue\n    FUNC_PERFORM: ControllerConfigCCWithValue\n    FUNC_LOAD: ControllerConfigCCWithValue\n    FUNC_SAVE: ControllerConfigCCWithValue\n    FUNC_COMPARE: ControllerConfigCCWithValue\n    FUNC_ROUTE: ControllerConfigCCWithValue\n}\n\nconst controllersMainDisplay: ControllersMainDisplay = {\n    props: { label: 'Main controls' },\n    POT1: { id: ControllerId.MAIN_DISP_POT1, label: 'Pot 1', type: 'pot', cc: CC.MAIN_POT1 },\n    POT2: { id: ControllerId.MAIN_DISP_POT2, label: 'Pot 2', type: 'pot', cc: CC.MAIN_POT2 },\n    POT3: { id: ControllerId.MAIN_DISP_POT3, label: 'Pot 3', type: 'pot', cc: CC.MAIN_POT3 },\n    POT4: { id: ControllerId.MAIN_DISP_POT4, label: 'Pot 4', type: 'pot', cc: CC.MAIN_POT4 },\n    POT5: { id: ControllerId.MAIN_DISP_POT5, label: 'Pot 5', type: 'pot', cc: CC.MAIN_POT5 },\n    POT6: { id: ControllerId.MAIN_DISP_POT6, label: 'Main pot', type: 'pot', cc: CC.MAIN_POT6 },\n\n    GROUP_MENU: {\n        id: ControllerId.MAIN_DISP_GROUP_MENU,\n        label: 'Screen select',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_CENTER.cc,\n        values: [\n            BUTTONS.BUTTONS_CENTER.values.MENU_LFO,\n            BUTTONS.BUTTONS_CENTER.values.MENU_OSC,\n            BUTTONS.BUTTONS_CENTER.values.MENU_FILTER,\n            BUTTONS.BUTTONS_CENTER.values.MENU_ENV,\n            BUTTONS.BUTTONS_CENTER.values.MENU_MOD,\n            BUTTONS.BUTTONS_CENTER.values.MENU_FX,\n            //TODO: ARP-meny?\n        ],\n    },\n\n    FUNC_HOME: {\n        id: ControllerId.MAIN_DISP_FUNC_HOME,\n        label: 'Home',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_CENTER.cc,\n        values: [\n            BUTTONS.BUTTONS_CENTER.values.FUNC_HOME,\n        ],\n    },\n    FUNC_SETTINGS: {\n        id: ControllerId.MAIN_DISP_FUNC_SETTINGS,\n        label: 'Settings',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_CENTER.cc,\n        values: [\n            BUTTONS.BUTTONS_CENTER.values.FUNC_SETTINGS,\n        ],\n    },\n    FUNC_SHIFT: {\n        id: ControllerId.MAIN_DISP_FUNC_SHIFT,\n        label: 'Shift',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_CENTER.cc,\n        values: [\n            BUTTONS.BUTTONS_CENTER.values.FUNC_SHIFT_OFF,\n            BUTTONS.BUTTONS_CENTER.values.FUNC_SHIFT_ON,\n        ],\n    },\n    FUNC_PERFORM: {\n        id: ControllerId.MAIN_DISP_FUNC_PERFORM,\n        label: 'Perform',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_CENTER.cc,\n        values: [\n            BUTTONS.BUTTONS_CENTER.values.FUNC_PERFORM,\n        ],\n    },\n    FUNC_LOAD: {\n        id: ControllerId.MAIN_DISP_FUNC_LOAD,\n        label: 'Load',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_CENTER.cc,\n        values: [\n            BUTTONS.BUTTONS_CENTER.values.FUNC_LOAD,\n        ],\n    },\n    FUNC_SAVE: {\n        id: ControllerId.MAIN_DISP_FUNC_SAVE,\n        label: 'Save',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_CENTER.cc,\n        values: [\n            BUTTONS.BUTTONS_CENTER.values.FUNC_SAVE,\n        ],\n    },\n    FUNC_COMPARE: {\n        id: ControllerId.MAIN_DISP_FUNC_COMPARE,\n        label: 'Compare',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_CENTER.cc,\n        values: [\n            BUTTONS.BUTTONS_CENTER.values.FUNC_COMPARE,\n        ],\n    },\n    FUNC_ROUTE: {\n        id: ControllerId.MAIN_DISP_FUNC_ROUTE,\n        label: 'Route',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_CENTER.cc,\n        values: [\n            BUTTONS.BUTTONS_CENTER.values.FUNC_ROUTE,\n        ],\n    },\n}\n\nexport default controllersMainDisplay","import { BUTTONS } from '../../buttons'\nimport { FuncProps, ControllerConfigCCWithValue } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\n\ninterface ControllersTranspose {\n    props: FuncProps\n    TRANSPOSE: ControllerConfigCCWithValue\n}\n\nconst controllersTranspose: ControllersTranspose = {\n    props: { label: 'Transpose' },\n    TRANSPOSE: {\n        id: ControllerId.KBD_TRANSPOSE,\n        label: 'Up/down',\n        type: 'button',\n            cc: BUTTONS.BUTTONS_CENTER.cc,\n            values: [\n            BUTTONS.BUTTONS_CENTER.values.TRANSPOSE_NEG_2,\n            BUTTONS.BUTTONS_CENTER.values.TRANSPOSE_NEG_1,\n            BUTTONS.BUTTONS_CENTER.values.TRANSPOSE_0,\n            BUTTONS.BUTTONS_CENTER.values.TRANSPOSE_POS_1,\n            BUTTONS.BUTTONS_CENTER.values.TRANSPOSE_POS_2,\n        ],\n    },\n}\n\nexport default controllersTranspose","import CC from '../../mapCC'\nimport { BUTTONS } from '../../buttons'\nimport { FuncProps, ControllerConfigCC, ControllerConfigCCWithValue } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\ninterface ControllersKbd {\n    props: FuncProps\n    PORTAMENTO: ControllerConfigCC\n    UNISON_DETUNE: ControllerConfigCC\n    HOLD: ControllerConfigCCWithValue\n    CHORD: ControllerConfigCCWithValue\n    MODE: ControllerConfigCCWithValue\n}\n\nconst controllersKbd: ControllersKbd = {\n    props: { label: 'Keyboard' },\n    PORTAMENTO: {\n        id: ControllerId.KBD_PORTAMENTO,\n        label: 'Portamento', shortLabel: 'Portam.',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.KEYBOARD_PORTAMENTO\n    },\n    UNISON_DETUNE: {\n        id: ControllerId.KBD_UNISON_DETUNE,\n        label: 'Detune',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.KEYBOARD_UNISON_DETUNE\n    },\n    HOLD: {\n        id: ControllerId.KBD_HOLD,\n        label: 'Hold',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_CENTER.cc,\n        values: [\n            BUTTONS.BUTTONS_CENTER.values.KEYBOARD_HOLD_OFF,\n            BUTTONS.BUTTONS_CENTER.values.KEYBOARD_HOLD_ON,\n        ],\n    },\n    CHORD: {\n        id: ControllerId.KBD_CHORD,\n        label: 'Chord',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_CENTER.cc,\n        values: [\n            BUTTONS.BUTTONS_CENTER.values.KEYBOARD_CHORD_OFF,\n            BUTTONS.BUTTONS_CENTER.values.KEYBOARD_CHORD_ON,\n        ],\n    },\n    MODE: {\n        id: ControllerId.KBD_MODE,\n        label: 'Mode',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_CENTER.cc,\n        values: [\n            BUTTONS.BUTTONS_CENTER.values.KEYBOARD_MODE_SOLO,\n            BUTTONS.BUTTONS_CENTER.values.KEYBOARD_MODE_UNISON,\n            BUTTONS.BUTTONS_CENTER.values.KEYBOARD_MODE_POLY,\n        ],\n    },\n}\n\nexport default controllersKbd","import CC from '../../mapCC'\nimport { BUTTONS } from '../../buttons'\nimport { FuncProps, ControllerConfigCC, ControllerConfigCCWithValue } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\n\n\ninterface ControllersFilters {\n    LPF: {\n        props: FuncProps\n        INPUT: ControllerConfigCC\n        DRIVE: ControllerConfigCC\n        RESONANCE: ControllerConfigCC\n        CUTOFF: ControllerConfigCC\n        FM_AMT: ControllerConfigCC\n        ENV_AMT: ControllerConfigCC\n        LFO_AMT: ControllerConfigCC\n        KBD_AMT: ControllerConfigCC\n        EXT_CV: ControllerConfigCCWithValue\n        WHEEL: ControllerConfigCCWithValue\n        SLOPE: ControllerConfigCCWithValue\n    },\n    FILTERS: {\n        props: FuncProps\n        LINK_CUTOFF: ControllerConfigCCWithValue\n        ROUTING: ControllerConfigCCWithValue\n    },\n    SVF: {\n        props: FuncProps\n        INPUT: ControllerConfigCC\n        DRIVE: ControllerConfigCC\n        RESONANCE: ControllerConfigCC\n        CUTOFF: ControllerConfigCC\n        FM_AMT: ControllerConfigCC\n        ENV_AMT: ControllerConfigCC\n        LFO_AMT: ControllerConfigCC\n        KBD_AMT: ControllerConfigCC\n        EXT_CV: ControllerConfigCCWithValue\n        WHEEL: ControllerConfigCCWithValue\n        SLOPE: ControllerConfigCCWithValue\n    }\n}\n\nconst controllersFilters: ControllersFilters = {\n    LPF: {\n        props: { label: 'Low pass filter' },\n        INPUT: {\n            id: ControllerId.LPF_INPUT,\n            label: 'Input',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.LPF_INPUT\n        },\n        DRIVE: {\n            id: ControllerId.LPF_DRIVE,\n            label: 'Drive',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.LPF_DRIVE\n        },\n        RESONANCE: {\n            id: ControllerId.LPF_RESONANCE,\n            label: 'Resonance',\n            shortLabel: 'Reso',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.LPF_RESONANCE\n        },\n        CUTOFF: {\n            id: ControllerId.LPF_CUTOFF,\n            label: 'Cutoff',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.LPF_CUTOFF\n        },\n        FM_AMT: { id: ControllerId.LPF_FM_AMT, isTargetDigi: true, label: 'FM amount', shortLabel: 'FM amt', type: 'pot', cc: CC.LPF_FM_AMT },\n        ENV_AMT: { id: ControllerId.LPF_ENV_AMT, isTargetDigi: true, label: 'Env amount', shortLabel: 'Env amt', type: 'pot', cc: CC.LPF_ENV_AMT },\n        LFO_AMT: { id: ControllerId.LPF_LFO_AMT, isTargetDigi: true, label: 'LFO amount', shortLabel: 'LFO amt', type: 'pot', cc: CC.LPF_LFO_AMT },\n        KBD_AMT: { id: ControllerId.LPF_KBD_AMT, isTargetDigi: true, label: 'Keyboard track', shortLabel: 'Kbd trk', type: 'pot', cc: CC.LPF_KBD_AMT },\n\n        EXT_CV: {\n            id: ControllerId.LPF_EXT_CV,\n            label: 'Ext. CV',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_RIGHT.cc,\n            values: [\n                BUTTONS.BUTTONS_RIGHT.values.LPF_EXT_CV_OFF,\n                BUTTONS.BUTTONS_RIGHT.values.LPF_EXT_CV_ON,\n            ],\n        },\n        WHEEL: {\n            id: ControllerId.LPF_WHEEL,\n            label: 'Mod wheel',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_RIGHT.cc,\n            values: [\n                BUTTONS.BUTTONS_RIGHT.values.LPF_WHEEL_OFF,\n                BUTTONS.BUTTONS_RIGHT.values.LPF_WHEEL_ON,\n            ],\n        },\n        SLOPE: {\n            id: ControllerId.LPF_SLOPE,\n            label: 'Slope',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_RIGHT.cc,\n            values: [\n                BUTTONS.BUTTONS_RIGHT.values.LPF_SLOPE_12DB,\n                BUTTONS.BUTTONS_RIGHT.values.LPF_SLOPE_24DB,\n            ],\n        },\n    },\n    FILTERS: {\n        props: { label: 'Link/route' },\n        LINK_CUTOFF: {\n            id: ControllerId.FILTERS_LINK_CUTOFF,\n            label: 'Link cutoff',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_RIGHT.cc,\n            values: [\n                BUTTONS.BUTTONS_RIGHT.values.FILTER_LINK_CUTOFF_OFF,\n                BUTTONS.BUTTONS_RIGHT.values.FILTER_LINK_CUTOFF_ON,\n            ],\n        },\n        ROUTING: {\n            id: ControllerId.FILTERS_ROUTING,\n            label: 'Routing',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_RIGHT.cc,\n            values: [\n                BUTTONS.BUTTONS_RIGHT.values.FILTER_ROUTING_SERIES,\n                BUTTONS.BUTTONS_RIGHT.values.FILTER_ROUTING_PARALLEL,\n            ],\n        },\n    },\n    SVF: {\n        props: { label: 'State variable filter' },\n        INPUT: {\n            id: ControllerId.SVF_INPUT,\n            label: 'Input',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.SVF_INPUT\n        },\n        DRIVE: {\n            id: ControllerId.SVF_DRIVE,\n            label: 'Drive',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.SVF_DRIVE\n        },\n        RESONANCE: {\n            id: ControllerId.SVF_RESONANCE,\n            label: 'Resonance',\n            shortLabel: 'Reso',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.SVF_RESONANCE\n        },\n        CUTOFF: {\n            id: ControllerId.SVF_CUTOFF,\n            label: 'Cutoff',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.SVF_CUTOFF\n        },\n        FM_AMT: { id: ControllerId.SVF_FM_AMT, label: 'FM amount', shortLabel: 'FM amt', isTargetDigi: true, type: 'pot', cc: CC.SVF_FM_AMT },\n        ENV_AMT: { id: ControllerId.SVF_ENV_AMT, label: 'Env amount', shortLabel: 'Env amt', isTargetDigi: true, type: 'pot', cc: CC.SVF_ENV_AMT },\n        LFO_AMT: { id: ControllerId.SVF_LFO_AMT, label: 'LFO amount', shortLabel: 'LFO amt', isTargetDigi: true, type: 'pot', cc: CC.SVF_LFO_AMT },\n        KBD_AMT: { id: ControllerId.SVF_KBD_AMT, label: 'Keyboard track', shortLabel: 'Kbd trk', isTargetDigi: true, type: 'pot', cc: CC.SVF_KBD_AMT },\n\n        EXT_CV: {\n            id: ControllerId.SVF_EXT_CV,\n            label: 'Ext. CV',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_RIGHT.cc,\n            values: [\n                BUTTONS.BUTTONS_RIGHT.values.SVF_EXT_CV_OFF,\n                BUTTONS.BUTTONS_RIGHT.values.SVF_EXT_CV_ON,\n            ],\n        },\n        WHEEL: {\n            id: ControllerId.SVF_WHEEL,\n            label: 'Wheel',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_RIGHT.cc,\n            values: [\n                BUTTONS.BUTTONS_RIGHT.values.SVF_WHEEL_OFF,\n                BUTTONS.BUTTONS_RIGHT.values.SVF_WHEEL_ON,\n            ],\n        },\n        SLOPE: {\n            id: ControllerId.SVF_SLOPE,\n            label: 'Slope',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_RIGHT.cc,\n            values: [\n                BUTTONS.BUTTONS_RIGHT.values.SVF_SLOPE_12DB_LP,\n                BUTTONS.BUTTONS_RIGHT.values.SVF_SLOPE_24DB_LP,\n                BUTTONS.BUTTONS_RIGHT.values.SVF_SLOPE_12DB_BP,\n                BUTTONS.BUTTONS_RIGHT.values.SVF_SLOPE_24DB_BP,\n                BUTTONS.BUTTONS_RIGHT.values.SVF_SLOPE_LP_BP,\n                BUTTONS.BUTTONS_RIGHT.values.SVF_SLOPE_12DB_HP,\n                BUTTONS.BUTTONS_RIGHT.values.SVF_SLOPE_24DB_HP,\n                BUTTONS.BUTTONS_RIGHT.values.SVF_SLOPE_HP_BP,\n                BUTTONS.BUTTONS_RIGHT.values.SVF_SLOPE_NOTCH,\n                BUTTONS.BUTTONS_RIGHT.values.SVF_SLOPE_NOTCH_LP,\n            ],\n        },\n    }\n}\n\nexport default controllersFilters","import CC from '../../mapCC'\nimport { FuncProps, ControllerConfigCC } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\n\ninterface ControllersPostMix {\n    props: FuncProps\n    LPF: ControllerConfigCC,\n    SVF: ControllerConfigCC,\n    SINE1: ControllerConfigCC,\n    SINE2: ControllerConfigCC,\n}\n\nconst controllersPostMix: ControllersPostMix = {\n    props: { label: 'Mix' },\n    LPF: {\n        id: ControllerId.VOICE_MIX_LPF,\n        label: 'LPF',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.POST_MIX_LPF\n    },\n    SVF: {\n        id: ControllerId.VOICE_MIX_SVF,\n        label: 'SVF',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.POST_MIX_SVF\n    },\n    SINE1: {\n        id: ControllerId.VOICE_MIX_SINE1,\n        label: 'Sine 1',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.POST_MIX_SINE1\n    },\n    SINE2: {\n        id: ControllerId.VOICE_MIX_SINE2,\n        label: 'Sine 2',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.POST_MIX_SINE2\n    },\n}\n\nexport default controllersPostMix","import CC from '../../mapCC'\nimport { FuncProps, ControllerConfigCC } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\n\ninterface ControllersVoiceOut {\n    props: FuncProps\n    PAN: ControllerConfigCC\n    AMOUNT: ControllerConfigCC\n    FX1_SEND: ControllerConfigCC\n    FX2_SEND: ControllerConfigCC\n}\n\nconst controllersVoiceOut: ControllersVoiceOut = {\n    props: { label: 'Voice out' },\n    PAN: {\n        id: ControllerId.VOICE_OUT_PAN,\n        label: 'Pan',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.VOICE_OUT_PAN\n    },\n    AMOUNT: {\n        id: ControllerId.VOICE_OUT_AMOUNT,\n        label: 'Level',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.VOICE_OUT_AMOUNT\n    },\n    FX1_SEND: {\n        id: ControllerId.VOICE_OUT_FX1_SEND,\n        label: 'FX1',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.VOICE_OUT_FX1_SEND\n    },\n    FX2_SEND: {\n        id: ControllerId.VOICE_OUT_FX2_SEND,\n        label: 'FX2',\n        isTargetDigi: true,\n        type: 'pot',\n        cc: CC.VOICE_OUT_FX2_SEND\n    },\n}\n\nexport default controllersVoiceOut","import CC from '../../mapCC'\nimport NRPN from '../../mapNRPN'\nimport { BUTTONS } from '../../buttons'\nimport { FuncProps, ControllerConfig, ControllerConfigCC, ControllerConfigCCWithValue, ControllerConfigNRPN } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\ninterface MidiCtrlEnv {\n    props: FuncProps\n    DELAY_TIME: ControllerConfig,\n    ATTACK_TIME: ControllerConfig,\n    DECAY1_TIME: ControllerConfig,\n    DECAY2_TIME: ControllerConfig,\n    RELEASE1_TIME: ControllerConfig,\n    RELEASE2_TIME: ControllerConfig,\n    DECAY2_LEVEL: ControllerConfig,\n    SUSTAIN_LEVEL: ControllerConfig,\n    RELEASE2_LEVEL: ControllerConfig,\n    CURVE: ControllerConfigNRPN\n    LEVEL: ControllerConfigNRPN\n    TIME: ControllerConfigNRPN\n    MAX_LOOPS: ControllerConfigCC\n    TOGGLE_STAGE: ControllerConfigCC\n    SELECT: ControllerConfigCC\n    SELECT_ENV3_ID: ControllerConfigCC\n    TRIGGER: ControllerConfigCCWithValue\n    RELEASE: ControllerConfigCCWithValue\n    LOOP: ControllerConfigCCWithValue\n    INVERT: ControllerConfigCCWithValue\n    RESET_ON_TRIGGER: ControllerConfigCCWithValue\n    RELEASE_MODE: ControllerConfigCCWithValue\n    LOOP_MODE: ControllerConfigCCWithValue\n    OUTPUT: ControllerConfig\n}\n\nconst controllersEnv = (ctrlIndex: number): MidiCtrlEnv => ({\n    props: { label: `Env ${1 + ctrlIndex}`, ctrlIndex },\n    DELAY_TIME: { id: ControllerId.ENV_DELAY_TIME, label: 'Delay time', shortLabel: 'Delay', isTargetDigi: true, type: 'pot'},\n    ATTACK_TIME: { id: ControllerId.ENV_ATTACK_TIME, label: 'Attack time', shortLabel: 'Attack', isTargetDigi: true, type: 'pot'},\n    DECAY1_TIME: { id: ControllerId.ENV_DECAY1_TIME, label: 'Decay 1 time', shortLabel: 'Decay 1', isTargetDigi: true, type: 'pot'},\n    DECAY2_TIME: { id: ControllerId.ENV_DECAY2_TIME, label: 'Decay 2 time', shortLabel: 'Decay 2', isTargetDigi: true, type: 'pot'},\n    SUSTAIN_LEVEL: { id: ControllerId.ENV_SUSTAIN_LEVEL, label: 'Sustain level', shortLabel: 'Sustain', isTargetDigi: true, type: 'pot'},\n    RELEASE1_TIME: { id: ControllerId.ENV_RELEASE1_TIME, label: 'Release 1 time', shortLabel: 'Release 1', isTargetDigi: true, type: 'pot'},\n    RELEASE2_TIME: { id: ControllerId.ENV_RELEASE2_TIME, label: 'Release 2 time', shortLabel: 'Release 2', isTargetDigi: true, type: 'pot'},\n    DECAY2_LEVEL: { id: ControllerId.ENV_DECAY2_LEVEL, label: 'Decay 2 level', shortLabel: 'D2 level', isTargetDigi: true, type: 'pot'},\n    RELEASE2_LEVEL: { id: ControllerId.ENV_RELEASE2_LEVEL, label: 'Release 2 level', shortLabel: 'R2 level', isTargetDigi: true, type: 'pot'},\n    CURVE: { id: ControllerId.ENV_CURVE, label: 'Curve', type: 'pot', addr: NRPN.ENV_CURVE },\n    LEVEL: { id: ControllerId.ENV_LEVEL, label: 'Level', type: 'pot', addr: NRPN.ENV_LEVEL },\n    TIME: { id: ControllerId.ENV_TIME, label: 'Time', type: 'pot', addr: NRPN.ENV_TIME },\n    MAX_LOOPS: { id: ControllerId.ENV_MAX_LOOPS, label: 'Max loops', type: 'pot', cc: CC.ENV_MAX_LOOPS },\n    TOGGLE_STAGE: { id: ControllerId.ENV_TOGGLE_STAGE, label: 'Stage on/off', type: 'pot', cc: CC.ENV_TOGGLE_STAGE }, // 4 bit stage, 7 bit on/off\n    SELECT: { id: ControllerId.ENV_SELECT, label: 'Select env', type: 'pot', cc: CC.ENV_SELECT_ENV },\n    SELECT_ENV3_ID: { id: ControllerId.ENV_SELECT_ENV3_ID, label: 'Select env 3', type: 'pot', cc: CC.ENV_SELECT_ENV3_ID },\n    TRIGGER: {\n        id: ControllerId.ENV_TRIGGER,\n        label: 'Trigger',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_RIGHT.cc,\n        values: [\n            BUTTONS.BUTTONS_RIGHT.values.ENV_TRIGGER,\n        ],\n    },\n    RELEASE: {\n        id: ControllerId.ENV_RELEASE,\n        label: 'Release',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_RIGHT.cc,\n        values: [\n            BUTTONS.BUTTONS_RIGHT.values.ENV_RELEASE,\n        ],\n    },\n    INVERT: {\n        id: ControllerId.ENV_INVERT,\n        label: 'Invert',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_RIGHT.cc,\n        values: [\n            BUTTONS.BUTTONS_RIGHT.values.ENV_INVERT_OFF,\n            BUTTONS.BUTTONS_RIGHT.values.ENV_INVERT_ON,\n        ],\n    },\n    RESET_ON_TRIGGER: {\n        id: ControllerId.ENV_RESET_ON_TRIGGER,\n        label: 'Reset on trigger',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_RIGHT.cc,\n        values: [\n            BUTTONS.BUTTONS_RIGHT.values.ENV_RESET_ON_TRIGGER_OFF,\n            BUTTONS.BUTTONS_RIGHT.values.ENV_RESET_ON_TRIGGER_ON,\n        ],\n    },\n    RELEASE_MODE: {\n        id: ControllerId.ENV_RELEASE_MODE,\n        label: 'Release mode',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_RIGHT.cc,\n        values: [\n            BUTTONS.BUTTONS_RIGHT.values.ENV_RELEASE_MODE_NORMAL,\n            BUTTONS.BUTTONS_RIGHT.values.ENV_RELEASE_MODE_SKIP_R1,\n            BUTTONS.BUTTONS_RIGHT.values.ENV_RELEASE_MODE_FREE_RUN,\n        ],\n    },\n    LOOP: {\n        id: ControllerId.ENV_LOOP,\n        label: 'Loop on/off',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_RIGHT.cc,\n        values: [\n            BUTTONS.BUTTONS_RIGHT.values.ENV_LOOP_OFF,\n            BUTTONS.BUTTONS_RIGHT.values.ENV_LOOP_ON,\n        ],\n    },\n    LOOP_MODE: {\n        id: ControllerId.ENV_LOOP_MODE,\n        label: 'Loop mode',\n        type: 'button',\n        cc: BUTTONS.BUTTONS_RIGHT.cc,\n        values: [\n            BUTTONS.BUTTONS_RIGHT.values.ENV_LOOP_MODE_GATED,\n            BUTTONS.BUTTONS_RIGHT.values.ENV_LOOP_MODE_COUNTED,\n            BUTTONS.BUTTONS_RIGHT.values.ENV_LOOP_MODE_INFINITE,\n        ],\n    },\n    OUTPUT: {\n        id: ControllerId.ENVELOPE1 + ctrlIndex,\n        label: `Env ${1 + ctrlIndex}`,\n        type: 'output',\n        isSourceDigi: true\n    },\n})\n\nexport default controllersEnv","import CC from '../../mapCC'\nimport { BUTTONS } from '../../buttons'\nimport { FuncProps, ControllerConfigCC, ControllerConfigCCWithValue } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\ninterface ControllersCommonFx {\n    DSP1: {\n        props: FuncProps\n        POT1: ControllerConfigCC,\n        POT2: ControllerConfigCC,\n        POT3: ControllerConfigCC,\n        EFFECT: ControllerConfigCC,\n        SOURCE: ControllerConfigCCWithValue,\n    },\n    DSP2: {\n        props: FuncProps\n        POT1: ControllerConfigCC,\n        POT2: ControllerConfigCC,\n        POT3: ControllerConfigCC,\n        EFFECT: ControllerConfigCC,\n        SOURCE: ControllerConfigCCWithValue,\n        CHAIN: ControllerConfigCCWithValue,\n    },\n    CHORUS: {\n        props: FuncProps\n        RATE: ControllerConfigCC,\n        DEPTH: ControllerConfigCC,\n        SOURCE: ControllerConfigCCWithValue,\n        MODE: ControllerConfigCCWithValue,\n    },\n    FX_BIT_CRUSHER: {\n        props: FuncProps\n        BITS: ControllerConfigCC,\n        RATE: ControllerConfigCC,\n        SOURCE: ControllerConfigCCWithValue,\n    },\n    FX_MIX: {\n        props: FuncProps\n        LEVEL_DSP1: ControllerConfigCC,\n        LEVEL_DSP2: ControllerConfigCC,\n        LEVEL_CHORUS: ControllerConfigCC,\n        LEVEL_BIT_CRUSHER: ControllerConfigCC,\n    }\n}\n\nconst controllersCommonFx: ControllersCommonFx = {\n    DSP1: {\n        props: { label: 'DSP 1' },\n        POT1: {\n            id: ControllerId.DSP1_PARAM1,\n            label: 'Param 1',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DSP1_POT1\n        },\n        POT2: {\n            id: ControllerId.DSP1_PARAM2,\n            label: 'Param 2',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DSP1_POT2\n        },\n        POT3: {\n            id: ControllerId.DSP1_PARAM3,\n            label: 'Param 3',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DSP1_POT3\n        },\n        EFFECT: { id: ControllerId.DSP1_EFFECT, label: 'Effect', type: 'pot', cc: CC.DSP1_EFFECT },\n\n        SOURCE: {\n            id: ControllerId.DSP1_SOURCE,\n            label: 'Source bus',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_RIGHT.cc,\n            values: [\n                BUTTONS.BUTTONS_RIGHT.values.DSP1_SRC1,\n                BUTTONS.BUTTONS_RIGHT.values.DSP1_SRC2,\n            ],\n        },\n    },\n    DSP2: {\n        props: { label: 'DSP 2' },\n        POT1: {\n            id: ControllerId.DSP2_PARAM1,\n            label: 'Param 1',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DSP2_POT1\n        },\n        POT2: {\n            id: ControllerId.DSP2_PARAM2,\n            label: 'Param 2',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DSP2_POT2\n        },\n        POT3: {\n            id: ControllerId.DSP2_PARAM3,\n            label: 'Param 3',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.DSP2_POT3\n        },\n        EFFECT: { id: ControllerId.DSP2_EFFECT, label: 'Effect', type: 'pot', cc: CC.DSP2_EFFECT },\n\n        SOURCE: {\n            id: ControllerId.DSP2_SOURCE,\n            label: 'Source bus',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_RIGHT.cc,\n            values: [\n                BUTTONS.BUTTONS_RIGHT.values.DSP2_SRC1,\n                BUTTONS.BUTTONS_RIGHT.values.DSP2_SRC2,\n            ],\n        },\n\n        CHAIN: {\n            id: ControllerId.DSP2_CHAIN,\n            label: 'Chain effects',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_RIGHT.cc,\n            values: [\n                BUTTONS.BUTTONS_RIGHT.values.DSP_CHAIN_OFF,\n                BUTTONS.BUTTONS_RIGHT.values.DSP_CHAIN_ON,\n            ],\n        },\n    },\n    CHORUS: {\n        props: { label: 'Chorus' },\n        RATE: {\n            id: ControllerId.CHORUS_RATE,\n            label: 'Rate',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.CHORUS_RATE\n        },\n        DEPTH: {\n            id: ControllerId.CHORUS_DEPTH,\n            label: 'Depth',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.CHORUS_DEPTH\n        },\n        SOURCE: {\n            id: ControllerId.CHORUS_SOURCE,\n            label: 'Source bus',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_RIGHT.cc,\n            values: [\n                BUTTONS.BUTTONS_RIGHT.values.CHORUS_SRC1,\n                BUTTONS.BUTTONS_RIGHT.values.CHORUS_SRC2,\n            ],\n        },\n        MODE: {\n            id: ControllerId.CHORUS_MODE,\n            label: 'Mode',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_RIGHT.cc,\n            values: [\n                BUTTONS.BUTTONS_RIGHT.values.CHORUS_MODE_CHORUS,\n                BUTTONS.BUTTONS_RIGHT.values.CHORUS_MODE_VIBRATO,\n            ],\n        },\n    },\n    FX_BIT_CRUSHER: {\n        props: { label: 'Bit crusher' },\n        BITS: {\n            id: ControllerId.FX_BIT_CRUSHER_BITS,\n            label: 'Bits',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.FX_BIT_CRUSHER_BITS\n        },\n        RATE: {\n            id: ControllerId.FX_BIT_CRUSHER_RATE,\n            label: 'Rate',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.FX_BIT_CRUSHER_RATE\n        },\n        SOURCE: {\n            id: ControllerId.FX_BIT_CRUSHER_SOURCE,\n            label: 'Source bus',\n            type: 'button',\n            cc: BUTTONS.BUTTONS_RIGHT.cc,\n            values: [\n                BUTTONS.BUTTONS_RIGHT.values.FX_BIT_CRUSHER_SRC1,\n                BUTTONS.BUTTONS_RIGHT.values.FX_BIT_CRUSHER_SRC2,\n            ],\n        },\n    },\n    FX_MIX: {\n        props: { label: 'FX mix' },\n        LEVEL_DSP1: {\n            id: ControllerId.FX_MIX_LEVEL_DSP1,\n            label: 'DSP 1 level',\n            shortLabel: 'DSP 1',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.FX_MIX_LEVEL_DSP1\n        },\n        LEVEL_DSP2: {\n            id: ControllerId.FX_MIX_LEVEL_DSP2,\n            label: 'DSP 2 level',\n            shortLabel: 'DSP 2',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.FX_MIX_LEVEL_DSP2\n        },\n        LEVEL_CHORUS: {\n            id: ControllerId.FX_MIX_LEVEL_CHORUS,\n            label: 'Chorus level',\n            shortLabel: 'Chorus',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.FX_MIX_LEVEL_CHORUS\n        },\n        LEVEL_BIT_CRUSHER: {\n            id: ControllerId.FX_MIX_LEVEL_BIT_CRUSHER,\n            label: 'Bit crusher level',\n            shortLabel: 'Bit crush',\n            isTargetDigi: true,\n            type: 'pot',\n            cc: CC.FX_MIX_LEVEL_BIT_CRUSHER\n        },\n    }\n}\n\nexport default controllersCommonFx","import CC from '../../mapCC'\nimport { FuncProps, ControllerConfigCC } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\n\ninterface ControllersOut {\n    props: FuncProps\n    VOLUME: ControllerConfigCC\n    SPREAD: ControllerConfigCC\n    HEADPHONES: ControllerConfigCC\n}\n\nconst controllersOut: ControllersOut = {\n    props: { label: 'Out' },\n    VOLUME: { id: ControllerId.OUT_VOLUME, label: 'Volume', type: 'pot', cc: CC.OUTPUT_VOLUME },\n    SPREAD: { id: ControllerId.OUT_SPREAD, label: 'Spread', type: 'pot', cc: CC.OUTPUT_SPREAD },\n    HEADPHONES: { id: ControllerId.OUT_HEADPHONES, label: 'Headphones', type: 'pot', cc: CC.OUTPUT_HEADPHONES },\n}\n\nexport default controllersOut","import { ControllerConfig, FuncProps } from '../../types'\nimport { ControllerId } from '../../controllerIds'\n\ninterface ControllersPerformance {\n    props: FuncProps\n    PITCH_BEND: ControllerConfig\n    MOD_WHEEL: ControllerConfig\n    RIBBON_POS: ControllerConfig\n    RIBBON_PRESSURE: ControllerConfig\n    KBD_PITCH: ControllerConfig\n    KBD_VELOCITY: ControllerConfig\n    KBD_AFTERTOUCH: ControllerConfig\n}\n\nexport const controllersPerformance: ControllersPerformance = {\n    props: { label: 'Play controls' },\n    PITCH_BEND: {\n        id: ControllerId.PERF_PITCH_BEND,\n        label: 'Pitch bend',\n        type: 'pot',\n        isSourceDigi: true,\n    },\n    MOD_WHEEL: {\n        id: ControllerId.PERF_MOD_WHEEL,\n        label: 'Mod wheel',\n        type: 'pot',\n        isSourceDigi: true,\n    },\n    RIBBON_POS: {\n        id: ControllerId.PERF_RIBBON_POS,\n        label: 'Ribbon position',\n        type: 'pot',\n        isSourceDigi: true,\n    },\n    RIBBON_PRESSURE: {\n        id: ControllerId.PERF_RIBBON_PRESSURE,\n        label: 'Ribbon pressure',\n        type: 'pot',\n        isSourceDigi: true,\n    },\n    KBD_PITCH: {\n        id: ControllerId.PERF_KBD_PITCH,\n        label: 'Pitch',\n        type: 'pot',\n        isSourceDigi: true,\n    },\n    KBD_VELOCITY: {\n        id: ControllerId.PERF_KBD_VELOCITY,\n        label: 'Velocity',\n        type: 'pot',\n        isSourceDigi: true,\n    },\n    KBD_AFTERTOUCH: {\n        id: ControllerId.PERF_KBD_AFTERTOUCH,\n        label: 'Aftertouch',\n        type: 'pot',\n        isSourceDigi: true,\n    }\n}","// TODO: High value bits. Mod wheels, ribbon controller\nimport controllersOsc from './modules/osc/controllersOsc'\nimport controllersNoise from './modules/noise/controllersNoise'\nimport controllersRingMod from './modules/ringMod/controllersRingMod'\nimport controllersFx from './modules/fx/controllersFx'\nimport controllersLfo from './modules/lfo/controllersLfo'\nimport controllersSrcMix from './modules/srcMix/controllersSrcMix'\nimport controllersRoute from './modules/route/controllersRoute'\nimport controllersMasterClock from './modules/masterClock/controllersMasterClock'\nimport controllersArp from './modules/arp/controllersArp'\nimport controllersVoices from './modules/voices/controllersVoices'\nimport controllersMainDisplay from './modules/mainDisplay/controllersMainDisplay'\nimport controllersTranspose from './modules/transpose/controllersTranspose'\nimport controllersKbd from './modules/kbd/controllersKbd'\nimport controllersFilters from './modules/filters/controllersFilters'\nimport controllersPostMix from './modules/postMix/controllersPostMix'\nimport controllersVoiceOut from './modules/voiceOut/controllersVoiceOut'\nimport controllersEnv from './modules/env/controllersEnv'\nimport controllersCommonFx from './modules/commonFx/controllersCommonFx'\nimport controllersOut from './modules/out/controllersOut'\nimport { controllersPerformance } from './modules/performance/controllersPerformance'\n\n// controller functions grouped by type\nexport const controllerGroups = {\n    SOUND_SOURCES: {\n        label: 'Sound src',\n        DCO1: controllersOsc.DCO1,\n        DCO2: controllersOsc.DCO2,\n        VCO: controllersOsc.VCO,\n        NOISE: controllersNoise,\n    },\n    PRE_FX: {\n        label: 'Pre FX',\n        RING_MOD: controllersRingMod,\n        DISTORTION: controllersFx.DISTORTION,\n        BIT_CRUSHER: controllersFx.BIT_CRUSHER,\n    },\n    LFOS: {\n        label: 'LFOs',\n        LFO1: controllersLfo(0),\n        LFO2: controllersLfo(1),\n        LFO3: controllersLfo(2),\n        LFO4: controllersLfo(3),\n    },\n    SOURCE_MIX: {\n        // TODO: This one is a bit weird\n        label: 'Source mix',\n        SOURCE_MIX: controllersSrcMix,\n    },\n    CLK_ARP_KBD: {\n        label: 'Controls',\n        MASTER_CLOCK: controllersMasterClock,\n        ARPEGGIATOR: controllersArp,\n        TRANSPOSE: controllersTranspose,\n        KEYBOARD: controllersKbd,\n    },\n    MAIN_DISPLAY: {\n        label: 'Main controls',\n        VOICES: controllersVoices,\n        MAIN_DISPLAY: controllersMainDisplay,\n    },\n    FILTER: {\n        label: 'Filter',\n        LPF: controllersFilters.LPF,\n        FILTERS: controllersFilters.FILTERS,\n        SVF: controllersFilters.SVF,\n    },\n    VOICE: {\n        label: 'Voice out',\n        POST_MIX: controllersPostMix,\n        VOICE_OUT: controllersVoiceOut,\n\n    },\n    ENV: {\n        label: 'Envelopes',\n        ENV1: controllersEnv(0),\n        ENV2: controllersEnv(1),\n        ENV3: controllersEnv(2),\n        ENV4: controllersEnv(3),\n        ENV5: controllersEnv(4),\n    },\n    FX: {\n        label: 'Effects',\n        DSP1: controllersCommonFx.DSP1,\n        DSP2: controllersCommonFx.DSP2,\n        CHORUS: controllersCommonFx.CHORUS,\n        FX_BIT_CRUSHER: controllersCommonFx.FX_BIT_CRUSHER,\n        FX_MIX: controllersCommonFx.FX_MIX,\n    },\n    OUT: {\n        label: 'Output',\n        OUTPUT: controllersOut,\n    },\n    PERFORMANCE: {\n        label: 'Performance controls',\n        PERFORMANCE: controllersPerformance\n    }\n}\n\nconst controllers = {\n    DCO1: controllersOsc.DCO1,\n    DCO2: controllersOsc.DCO2,\n    VCO: controllersOsc.VCO,\n    NOISE: controllersNoise,\n    RING_MOD: controllersRingMod,\n    DISTORTION: controllersFx.DISTORTION,\n    BIT_CRUSHER: controllersFx.BIT_CRUSHER,\n    LFOS: controllersLfo(0), // most cc values are shared so the ones for 0 are used\n    SOURCE_MIX: controllersSrcMix,\n    ROUTE: controllersRoute,\n    MASTER_CLOCK: controllersMasterClock,\n    ARPEGGIATOR: controllersArp,\n    VOICES: controllersVoices,\n    MAIN_DISPLAY: controllersMainDisplay,\n    TRANSPOSE: controllersTranspose,\n    KEYBOARD: controllersKbd,\n    LPF: controllersFilters.LPF,\n    FILTERS: controllersFilters.FILTERS,\n    SVF: controllersFilters.SVF,\n    POST_MIX: controllersPostMix,\n    VOICE_OUT: controllersVoiceOut,\n    ENV: controllersEnv(0), // most cc values are shared so the ones for 0 are used\n    DSP1: controllersCommonFx.DSP1,\n    DSP2: controllersCommonFx.DSP2,\n    CHORUS: controllersCommonFx.CHORUS,\n    FX_BIT_CRUSHER: controllersCommonFx.FX_BIT_CRUSHER,\n    FX_MIX: controllersCommonFx.FX_MIX,\n    OUTPUT: controllersOut,\n    PERFORMANCE: controllersPerformance\n}\n\nexport default controllers","import { ApiSource } from '../synthcore/types'\n\nexport const shouldSend = (source: ApiSource) => {\n    // TODO: Make this configurable\n    return source !== ApiSource.MIDI\n}\n\n","import { envApi } from '../../../synthcore/synthcoreApi'\nimport { Curve, LoopMode, ReleaseMode } from '../../../synthcore/modules/env/types'\nimport controllers from '../../controllers'\nimport { cc, nrpn } from '../../midibus'\nimport { ApiSource } from '../../../synthcore/types'\nimport { shouldSend } from '../../utils'\n\nlet currentEnvId = -1\n\nconst selectEnv = (envId: number) => {\n    if (envId !== currentEnvId) {\n        cc.send(controllers.ENV.SELECT, envId)\n        currentEnvId = envId\n    }\n}\n\nconst level = (() => {\n    const cfg = controllers.ENV.LEVEL\n\n    return {\n        send: (source: ApiSource, envId: number, stageId: number, boundedValue: number) => {\n            if (!shouldSend(source)) {\n                return\n            }\n            selectEnv(envId)\n\n            // stageId is encoded as part of the extra available bits\n            const value = (Math.round(boundedValue * 32767) + 32767) + (stageId << 16)\n            nrpn.send(cfg, value)\n        },\n        receive: () => {\n            nrpn.subscribe((value: number) => {\n                const level = value & 0xFFFF\n                const stageId = value >> 16\n                envApi.setStageLevel(currentEnvId, stageId, (level - 32767) / 32767 , ApiSource.MIDI)\n            }, cfg)\n        }\n    }\n})()\n\nconst time = (() => {\n    const cfg = controllers.ENV.TIME\n    return {\n        send: (source: ApiSource, envId: number, stageId: number, boundedValue: number) => {\n            if (!shouldSend(source)) {\n                return\n            }\n            selectEnv(envId)\n\n            // stageId is encoded as part of the extra available bits\n            const value = Math.round(boundedValue * 65535) + (stageId << 16)\n            nrpn.send(cfg, value)\n        },\n        receive: () => {\n            nrpn.subscribe((value: number) => {\n                const time = value & 0xFFFF\n                const stageId = value >> 16\n                envApi.setStageTime(currentEnvId, stageId, time / 65535, ApiSource.MIDI)\n            }, cfg)\n        }\n    }\n})()\n\nconst invert = (() => {\n    const cfg = controllers.ENV.INVERT\n\n    return {\n        send: (source: ApiSource, envId: number, invert: boolean) => {\n            if (!shouldSend(source)) {\n                return\n            }\n            selectEnv(envId)\n            const invertIndex = invert ? 1 : 0\n            cc.send(cfg, cfg.values[invertIndex])\n        },\n        receive: () => {\n            cc.subscribe((value: number) => {\n                const invert = value === cfg.values[1]\n                envApi.setInvert(currentEnvId, invert, ApiSource.MIDI)\n            }, cfg)\n        }\n    }\n})()\n\nconst resetOnTrigger = (() => {\n    const cfg = controllers.ENV.RESET_ON_TRIGGER\n\n    return {\n        send: (source: ApiSource, envId: number, resetOnTrigger: boolean) => {\n            if (!shouldSend(source)) {\n                return\n            }\n            selectEnv(envId)\n            const resetIndex = resetOnTrigger ? 1 : 0\n            cc.send(cfg, cfg.values[resetIndex])\n        },\n        receive: () => {\n            cc.subscribe((value: number) => {\n                const reset = value === cfg.values[1]\n                envApi.setRetrigger(currentEnvId, reset, ApiSource.MIDI)\n            }, cfg)\n        }\n    }\n})()\n\nconst releaseMode = (() => {\n    const cfg = controllers.ENV.RELEASE_MODE\n\n    return {\n        send: (source: ApiSource, envId: number, releaseMode: ReleaseMode) => {\n            if (!shouldSend(source)) {\n                return\n            }\n            selectEnv(envId)\n            cc.send(cfg, cfg.values[releaseMode])\n        },\n        receive: () => {\n            cc.subscribe((value: number) => {\n                const releaseMode = cfg.values.indexOf(value) || 0\n                envApi.setReleaseMode(currentEnvId, releaseMode, ApiSource.MIDI)\n            }, cfg)\n        }\n    }\n})()\n\nconst loopMode = (() => {\n    const cfg = controllers.ENV.LOOP_MODE\n\n    return {\n        send: (source: ApiSource, envId: number, loopMode: LoopMode) => {\n            if (!shouldSend(source)) {\n                return\n            }\n            selectEnv(envId)\n            cc.send(cfg, cfg.values[loopMode])\n        },\n        receive: () => {\n            cc.subscribe((value: number) => {\n                const loopMode = cfg.values.indexOf(value) || 0\n                envApi.setLoopMode(currentEnvId, loopMode, ApiSource.MIDI)\n            }, cfg)\n        }\n    }\n})()\n\nconst loopEnabled = (() => {\n    const cfg = controllers.ENV.LOOP\n\n    return {\n        send: (source: ApiSource, envId: number, enabled: boolean) => {\n            if (!shouldSend(source)) {\n                return\n            }\n            selectEnv(envId)\n            const loopEnabledIndex = enabled ? 1 : 0\n            cc.send(cfg, cfg.values[loopEnabledIndex])\n        },\n        receive: () => {\n            cc.subscribe((value: number) => {\n                const enabled = value === cfg.values[1]\n                envApi.setLoopEnabled(currentEnvId, enabled, ApiSource.MIDI)\n            }, cfg)\n        }\n    }\n})()\n\nconst stageEnabled = (() => {\n    const cfg = controllers.ENV.TOGGLE_STAGE\n\n    return {\n        send: (source: ApiSource, envId: number, stageId: number, enabled: boolean) => {\n            if (!shouldSend(source)) {\n                return\n            }\n            selectEnv(envId)\n            const enableBit = enabled ? 0b1000 : 0\n            const data = stageId | enableBit\n            cc.send(cfg, data)\n        },\n        receive: () => {\n            cc.subscribe((value: number) => {\n                const stageId = value & 0b111\n                const enabled = (value & 0b1000) > 0\n                envApi.setStageEnabled(currentEnvId, stageId, enabled, ApiSource.MIDI)\n            }, cfg)\n        }\n    }\n})()\n\nconst curve = (() => {\n    const cfg = controllers.ENV.CURVE\n\n    return {\n        send: (source: ApiSource, envId: number, stageId: number, curve: Curve) => {\n            if (!shouldSend(source)) {\n                return\n            }\n            selectEnv(envId)\n            nrpn.send(cfg, (stageId << 7) + curve)\n        },\n        receive: () => {\n            nrpn.subscribe((value: number) => {\n                const stageId = (value >> 7)\n                const curve = value & 0b01111111\n                envApi.setStageCurve(currentEnvId, stageId, curve, ApiSource.MIDI)\n            }, cfg)\n        }\n    }\n})()\n\nconst maxLoops = (() => {\n    const cfg = controllers.ENV.MAX_LOOPS\n\n    return {\n        send: (source: ApiSource, envId: number, maxLoops: number) => {\n            if (!shouldSend(source)) {\n                return\n            }\n            selectEnv(envId)\n            cc.send(cfg, maxLoops)\n        },\n        receive: () => {\n            cc.subscribe((value: number) => {\n                envApi.setMaxLoops(currentEnvId, value, ApiSource.MIDI)\n            }, cfg)\n        }\n    }\n})()\n\nconst env3Id = (() => {\n    const cfg = controllers.ENV.SELECT_ENV3_ID\n\n    return {\n        send: (source: ApiSource, id: number) => {\n            if (!shouldSend(source)) {\n                return\n            }\n            cc.send(cfg, id)\n        },\n        receive: () => {\n            cc.subscribe((id: number) => {\n                envApi.setEnv3Id(id, ApiSource.MIDI)\n            }, cfg)\n        }\n    }\n})()\n\nconst trigger = (() => {\n    const cfg = controllers.ENV.TRIGGER\n\n    return {\n        send: (source: ApiSource, envId: number) => {\n            if (!shouldSend(source)) {\n                return\n            }\n            selectEnv(envId)\n            cc.send(cfg, cfg.values[0])\n        },\n    }\n})()\n\nconst release = (() => {\n    const cfg = controllers.ENV.RELEASE\n\n    return {\n        send: (source: ApiSource, envId: number) => {\n            if (!shouldSend(source)) {\n                return\n            }\n            selectEnv(envId)\n            cc.send(cfg, cfg.values[0])\n        },\n    }\n})()\n\nconst initReceive = () => {\n    level.receive()\n    time.receive()\n    invert.receive()\n    resetOnTrigger.receive()\n    releaseMode.receive()\n    loopMode.receive()\n    loopEnabled.receive()\n    maxLoops.receive()\n    stageEnabled.receive()\n    curve.receive()\n    env3Id.receive()\n}\n\nconst midiApiEnv = {\n    setLevel: level.send,\n    setTime: time.send,\n    setInvert: invert.send,\n    setStageEnabled: stageEnabled.send,\n    setResetOnTrigger: resetOnTrigger.send,\n    setReleaseMode: releaseMode.send,\n    setLoopMode: loopMode.send,\n    setLoopEnabled: loopEnabled.send,\n    setMaxLoops: maxLoops.send,\n    setCurve: curve.send,\n    trigger: trigger.send,\n    release: release.send,\n    setEnv3Id: env3Id.send,\n    initReceive,\n}\n\nexport default midiApiEnv","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState } from '../../store'\nimport { ApiSource } from '../../types'\n\ntype ModsState = {\n    gui: {\n        source: number;\n        targetGroup: number;\n        targetFunc: number;\n        targetParam: number;\n        lastModSelectSource: ApiSource | undefined;\n    },\n    modValues: number[][];\n}\n\nexport const initialState: ModsState = {\n    gui: {\n        source: 0,\n        targetGroup: 0,\n        targetFunc: 0,\n        targetParam: 0,\n        lastModSelectSource: undefined\n    },\n    modValues: [],\n}\n\ntype GuiSourcePayload = {\n    source: ApiSource;\n    guiSource: number;\n}\n\ntype GuiTargetGroupPayload = {\n    source: ApiSource;\n    guiTargetGroup: number;\n}\n\ntype GuiTargetFuncPayload = {\n    source: ApiSource;\n    guiTargetFunc: number;\n}\n\ntype GuiTargetParamPayload = {\n    source: ApiSource;\n    guiTargetParam: number;\n}\n\ntype GuiSelectModPayload = {\n    guiSource: number;\n    guiTargetFunc: number;\n    guiTargetParam: number;\n}\n\ntype GuiLastModSelectSourcePayload = {\n    source: ApiSource;\n}\n\ntype ModValuePayload = {\n    sourceId: number;\n    targetId: number;\n    modValue: number;\n}\n\nexport const modsSlice = createSlice({\n    name: 'mods',\n    initialState,\n    reducers: {\n        setGuiSource: (state, { payload }: PayloadAction<GuiSourcePayload>) => {\n            state.gui.lastModSelectSource = payload.source;\n            state.gui.source = payload.guiSource\n\n        },\n        setGuiTargetGroup: (state, { payload }: PayloadAction<GuiTargetGroupPayload>) => {\n            state.gui.lastModSelectSource = payload.source;\n            state.gui.targetGroup = payload.guiTargetGroup\n        },\n        setGuiTargetFunc: (state, { payload }: PayloadAction<GuiTargetFuncPayload>) => {\n            state.gui.lastModSelectSource = payload.source;\n            state.gui.targetFunc = payload.guiTargetFunc\n        },\n        setGuiTargetParam: (state, { payload }: PayloadAction<GuiTargetParamPayload>) => {\n            state.gui.lastModSelectSource = payload.source;\n            state.gui.targetParam = payload.guiTargetParam\n        },\n        setLastModSelectSource: (state, { payload }: PayloadAction<GuiLastModSelectSourcePayload>) => {\n            state.gui.lastModSelectSource = payload.source;\n            state.gui.lastModSelectSource = payload.source\n        },\n        setModValue: (state, { payload }: PayloadAction<ModValuePayload>) => {\n            if (!state.modValues[payload.sourceId]) {\n                state.modValues[payload.sourceId] = []\n            }\n            state.modValues[payload.sourceId][payload.targetId] = payload.modValue\n        },\n\n        // actions only consumed by api\n        setGuiMod: (state, { payload }: PayloadAction<GuiSelectModPayload>) => {\n        },\n    }\n})\n\nexport const {\n    setGuiSource,\n    setGuiTargetGroup,\n    setGuiTargetFunc,\n    setGuiTargetParam,\n    setGuiMod,\n    setModValue,\n    setLastModSelectSource,\n} = modsSlice.actions\n\nexport const selectGuiSource = (state: RootState) => state.mods.gui.source\nexport const selectGuiTargetGroup = (state: RootState) => state.mods.gui.targetGroup\nexport const selectGuiTargetFunc = (state: RootState) => state.mods.gui.targetFunc\nexport const selectGuiTargetParam = (state: RootState) => state.mods.gui.targetParam\nexport const selectGuiLastModSelectSource = (state: RootState) => state.mods.gui.lastModSelectSource\nexport const selectModValue = (sourceId: number, targetId: number) => (state: RootState) => {\n    return state.mods.modValues?.[sourceId]?.[targetId] || 0\n}\n\nexport default modsSlice.reducer","import { ControllerConfig, FuncProps } from '../../../midi/types'\nimport { controllerGroups } from '../../../midi/controllers'\n\nexport const shortLabel = (element: ControllerConfig | FuncProps) => element.shortLabel || element.label\n\nconst getTargets = () => {\n\n    type Func = ControllerConfig[]\n    type Group = Func[];\n\n    const modTargets: Group[] = []\n    const modTargetGroupLabels: string[] = []\n    const modTargetFuncProps: FuncProps[][] = []\n\n    Object.values(controllerGroups).forEach((group) => {\n        const funcs: Func[] = []\n        const funcProps: FuncProps[] = []\n        Object.values(group).forEach((func) => {\n            const params: ControllerConfig[] = []\n            Object.values(func).forEach((param) => {\n                const controller = param as ControllerConfig\n                if (controller.isTargetDigi) {\n                    params.push(controller)\n                }\n            })\n            if (params.length > 0) {\n                funcs.push(params)\n                funcProps.push(func.props)\n            }\n        })\n        if (funcs.length > 0) {\n            modTargets.push(funcs)\n            modTargetGroupLabels.push(group.label)\n            modTargetFuncProps.push(funcProps)\n        }\n    })\n\n    return {\n        targets: modTargets,\n        groupLabels: modTargetGroupLabels,\n        funcProps: modTargetFuncProps\n    }\n}\n\nconst getSources = () => {\n    const sources: ControllerConfig[] = []\n    Object.values(controllerGroups).forEach((group) => {\n        Object.values(group).forEach((func) => {\n            Object.values(func).forEach((param) => {\n                const controller = param as ControllerConfig\n                if (controller.isSourceDigi) {\n                    sources.push(controller)\n                }\n            })\n        })\n    })\n    return sources\n}\n\nexport const modTarget = getTargets()\nexport const digitalModSources = getSources()","import { store } from '../../store'\nimport midiApi from '../../../midi/midiApi'\nimport { ApiSource } from '../../types'\nimport { dispatch, getBounded, getQuantized } from '../../utils'\nimport {\n    setGuiSource as setGuiSourceAction,\n    setGuiTargetGroup as setGuiTargetGroupAction,\n    setGuiTargetFunc as setGuiTargetFuncAction,\n    setGuiTargetParam as setGuiTargetParamAction,\n    setModValue as setModValueAction,\n    selectGuiSource,\n    selectGuiTargetGroup,\n    selectGuiTargetFunc,\n    selectGuiTargetParam,\n    selectModValue\n} from './modsReducer'\nimport { digitalModSources, modTarget } from './utils'\n\nconst setGuiMod = (\n    guiSource: number,\n    guiTargetFunc: number,\n    guiTargetParam: number,\n    source: ApiSource\n) => {\n    dispatch(setGuiSourceAction({ guiSource, source }))\n    dispatch(setGuiTargetFuncAction({ guiTargetFunc, source }))\n    dispatch(setGuiTargetParamAction({ guiTargetParam, source }))\n}\n\nconst setGuiSource = (guiSource: number, source: ApiSource) => {\n    const currSource = selectGuiSource(store.getState())\n    if (guiSource !== currSource) {\n        dispatch(setGuiSourceAction({ guiSource, source }))\n    }\n}\n\nconst incrementGuiSource = (inc: number, source: ApiSource) => {\n    const currSource = selectGuiSource(store.getState())\n    const nextSource = getBounded(currSource + inc, 0, digitalModSources.length - 1)\n    setGuiSource(nextSource, source)\n}\n\nconst setGuiTargetGroup = (guiTargetGroup: number, source: ApiSource) => {\n    const currTargetGroup = selectGuiTargetGroup(store.getState())\n    if (guiTargetGroup !== currTargetGroup) {\n        dispatch(setGuiTargetParamAction({ guiTargetParam: 0, source }))\n        dispatch(setGuiTargetFuncAction({ guiTargetFunc: 0, source }))\n        dispatch(setGuiTargetGroupAction({ guiTargetGroup, source }))\n    }\n}\n\nconst incrementGuiTargetGroup = (inc: number, source: ApiSource) => {\n    const currTargetGroup = selectGuiTargetGroup(store.getState())\n    const nextTargetGroup = getBounded(currTargetGroup + inc, 0, modTarget.targets.length - 1)\n    setGuiTargetGroup(nextTargetGroup, source)\n}\n\nconst setGuiTargetFunc = (guiTargetFunc: number, source: ApiSource) => {\n    const currTargetFunc = selectGuiTargetFunc(store.getState())\n    if (guiTargetFunc !== currTargetFunc) {\n        dispatch(setGuiTargetParamAction({ guiTargetParam: 0, source }))\n        dispatch(setGuiTargetFuncAction({ guiTargetFunc, source }))\n    }\n}\n\nconst incrementGuiTargetFunc = (inc: number, source: ApiSource) => {\n    const currTargetGroup = selectGuiTargetGroup(store.getState())\n    const currTargetFunc = selectGuiTargetFunc(store.getState())\n    const nextTargetFunc = getBounded(currTargetFunc + inc, 0, modTarget.targets[currTargetGroup].length - 1)\n    setGuiTargetFunc(nextTargetFunc, source)\n}\n\nconst setGuiTargetParam = (guiTargetParam: number, source: ApiSource) => {\n    const currTargetParam = selectGuiTargetParam(store.getState())\n    if (guiTargetParam !== currTargetParam) {\n        dispatch(setGuiTargetParamAction({ guiTargetParam, source }))\n    }\n}\n\nconst incrementGuiTargetParam = (inc: -1 | 1, source: ApiSource) => {\n    const currTargetGroup = selectGuiTargetGroup(store.getState())\n    const currTargetFunc = selectGuiTargetFunc(store.getState())\n    const currTargetParam = selectGuiTargetParam(store.getState())\n\n    const lastGuiTargetParam = modTarget.targets[currTargetGroup][currTargetFunc].length - 1\n    const requestedGuiTargetParam = currTargetParam + inc\n    if(requestedGuiTargetParam < 0){\n        if(currTargetFunc > 0){\n            const prevTargetFunc = currTargetFunc - 1\n            setGuiTargetFunc(prevTargetFunc, source)\n            const lastTargetParam = modTarget.targets[currTargetGroup][prevTargetFunc].length - 1\n            setGuiTargetParam(lastTargetParam, source)\n        }\n    } else if(requestedGuiTargetParam > lastGuiTargetParam){\n        if(currTargetFunc < modTarget.targets[currTargetGroup].length -1){\n            setGuiTargetFunc(currTargetFunc + 1, source)\n        }\n\n    } else {\n        setGuiTargetParam(requestedGuiTargetParam, source)\n    }\n}\n\nconst setModValue = (sourceId: number, targetId: number, modValue: number, source: ApiSource) => {\n    const quantizedValue = getQuantized(modValue, 32767)\n    const currModValue = selectModValue(sourceId, targetId)(store.getState())\n\n    if (quantizedValue === currModValue) {\n        return\n    }\n\n    dispatch(setModValueAction({ sourceId, targetId, modValue: quantizedValue }))\n    midiApi.route.setSource(source, sourceId)\n    midiApi.route.setTarget(source, targetId)\n    midiApi.route.setAmount(source, modValue)\n}\n\nconst incrementGuiModValue = (inc: number, source: ApiSource) => {\n    const sourceIndex = selectGuiSource(store.getState())\n    const targetGroupIndex = selectGuiTargetGroup(store.getState())\n    const targetFuncIndex = selectGuiTargetFunc(store.getState())\n    const targetParamIndex = selectGuiTargetParam(store.getState())\n\n    const sourceId = digitalModSources[sourceIndex].id\n    const targetId = modTarget.targets[targetGroupIndex][targetFuncIndex][targetParamIndex].id\n\n    const currModValue = selectModValue(sourceId, targetId)(store.getState())\n    const nextModValue = getBounded(currModValue + inc, -1, 1)\n\n    setModValue(sourceId, targetId, nextModValue, source)\n}\n\nconst modsApi = {\n    setGuiMod,\n    setGuiSource,\n    incrementGuiSource,\n    setGuiTargetGroup,\n    incrementGuiTargetGroup,\n    setGuiTargetFunc,\n    incrementGuiTargetFunc,\n    setGuiTargetParam,\n    incrementGuiTargetParam,\n    setModValue,\n    incrementGuiModValue,\n}\n\nexport default modsApi","import controllers from '../../controllers'\nimport { cc, nrpn } from '../../midibus'\nimport { ApiSource } from '../../../synthcore/types'\nimport { shouldSend } from '../../utils'\nimport modsApi from '../../../synthcore/modules/mods/modsApi'\n\nlet currentSourceId = 0;\nlet currentTargetId = 0;\n\nconst amount = (() => {\n    const cfg = controllers.ROUTE.AMOUNT\n\n    return {\n        send: (source: ApiSource, value: number) => {\n            if (!shouldSend(source)) {\n                return\n            }\n\n            // stageId is encoded as part of the extra available bits\n            const rounded = Math.round(value * 32767) + 32767\n            nrpn.send(cfg, rounded)\n        },\n        receive: () => {\n            nrpn.subscribe((value: number) => {\n                modsApi.setModValue( currentSourceId, currentTargetId,(value - 32767) / 32767, ApiSource.MIDI)\n            }, cfg)\n        }\n    }\n})()\n\nconst source = (() => {\n    const cfg = controllers.ROUTE.FROM\n\n    return {\n        send: (source: ApiSource, value: number) => {\n            if (!shouldSend(source)) {\n                return\n            }\n            cc.send(cfg, value)\n        },\n        receive: () => {\n            cc.subscribe((value: number) => {\n                currentSourceId = value\n            }, cfg)\n        }\n    }\n})()\n\nconst target = (() => {\n    const cfg = controllers.ROUTE.TO\n\n    return {\n        send: (source: ApiSource, value: number) => {\n            if (!shouldSend(source)) {\n                return\n            }\n            cc.send(cfg, value)\n        },\n        receive: () => {\n            cc.subscribe((value: number) => {\n                currentTargetId = value\n            }, cfg)\n        }\n    }\n})()\n\nconst initReceive = () => {\n    amount.receive()\n    source.receive()\n    target.receive()\n}\n\nconst midiApiRoute = {\n    setAmount: amount.send,\n    setSource: source.send,\n    setTarget: target.send,\n    initReceive,\n}\n\nexport default midiApiRoute","import midiApiEnv from './modules/env/midiApiEnv'\nimport midiApiRoute from './modules/route/midiApiRoute'\n\nconst initReceive = () => {\n    midiApiEnv.initReceive()\n}\n\nconst midiApi = {\n    initReceive,\n    env: midiApiEnv,\n    route: midiApiRoute,\n}\n\nexport default midiApi","// All functions are rising between 0, 0 and 1, 1\n\nexport const exponentialFunc = (sharpness: number) => {\n    const a = 1 / (Math.exp(sharpness) - 1)\n\n    return (x: number) => {\n        return a*Math.exp(sharpness*x) - a;\n    }\n}\n\nexport const logarithmicFunc = (sharpness: number) => {\n    const a = 1 / (Math.pow(10,sharpness) - 1)\n\n    return (x: number) => {\n        return Math.log10(x+a) / sharpness -Math.log10(a) / sharpness\n    }\n}\n\nexport const squared = (x: number) => Math.pow(x, 2);\n\nexport const getKeypoints = (keypointCount: number) => {\n    const points = [];\n    for(let point=0; point<=1; point+= 1/keypointCount){\n        points.push(point);\n    }\n    return points;\n}\n\nexport const getScaledPoints = (func: (x: number) => number, yScale: number, keypointCount: number, round: boolean = true) => {\n    const keypoints = getKeypoints(keypointCount);\n    const scaled = keypoints\n        .map(func)\n        .map((point) => round ? Math.round(yScale * point) : yScale * point);\n    return scaled;\n}\n\nexport const getDerivated = (yValues: number[], intermediatesPerKeypoint: number, accuracy: number) => {\n    const derivated = [];\n    for(let i = 0; i<yValues.length-1; i++){\n        const diff = yValues[i+1] - yValues[i];\n        derivated.push(Math.floor(diff * accuracy / intermediatesPerKeypoint));\n    }\n    return derivated\n}\n\nconst expo1 = exponentialFunc(2);\nconst expo2 = exponentialFunc(4.2);\nconst expo3 = exponentialFunc(5.5);\nconst linear = (x:number) => x;\nconst log1 = logarithmicFunc(1.35);\nconst log2 = logarithmicFunc(1.6);\nconst log3 = logarithmicFunc(2);\n\nexport const curveFuncs = [\n    expo3,\n    expo2,\n    expo1,\n    linear,\n    log1,\n    log2,\n    log3,\n]\n\nexport const curveNamesForCpp = [\n    'expo3',\n    'expo2',\n    'expo1',\n    'linear',\n    'log1',\n    'log2',\n    'log3',\n]\n\n/*\nconst testInterpolation = (\n    func: (x: number) => number,\n    yScale: number,\n    keypointCount: number,\n    intermediatesPerKeypoint: number,\n    accuracy: number\n) => {\n    const scaledPoints = getScaledPoints(func, yScale, keypointCount);\n    const derivated = getDerivated(scaledPoints, intermediatesPerKeypoint, accuracy);\n\n    for(let i=0; i<scaledPoints.length-1; i++){\n        for(let j=0; j<intermediatesPerKeypoint; j++){\n            console.log(scaledPoints[i] + Math.floor(derivated[i] * j / accuracy))\n        }\n    }\n}\n\ntestInterpolation(log, 65535, 256,256, 256)\n */\n\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst generateAndPrintTables = (\n    yScale: number,\n    keypointCount: number,\n    intermediatesPerKeypoint: number,\n    accuracy: number\n) => {\n    const valuesForAllFuncs = curveFuncs.map((curveFunc) => getScaledPoints(curveFunc, yScale, keypointCount))\n    const slopesForAllFuncs = valuesForAllFuncs.map((scaledPoints) => getDerivated(scaledPoints, intermediatesPerKeypoint, accuracy))\n\n    const valueStrings = valuesForAllFuncs.map((values, index) => {\n        return `// ${curveNamesForCpp[index]}\\n{\\n${values.slice(0, values.length-1).join(',\\n')}\\n}`\n    })\n\n    const slopeStrings = slopesForAllFuncs.map((slopes, index) => {\n        return `// ${curveNamesForCpp[index]}\\n{\\n${slopes.join(',\\n')}\\n}`\n    })\n    console.log(`const uint16_t values[CURVE_VARIATIONS][CURVE_SAMPLES] = {\\n${valueStrings.join(',\\n')}\\n};`);\n    console.log(`const uint16_t slopes[CURVE_VARIATIONS][CURVE_SAMPLES] = {\\n${slopeStrings.join(',\\n')}\\n};`);\n}\n\n// Uncomment if you want to generate tables for teensy/c++ again\n// generateAndPrintTables( 65536, 256,256, 256)\n\nconst curveCalculator = {\n    logarithmicFunc,\n    exponentialFunc,\n    squared,\n    getKeypoints,\n}\n\nexport default curveCalculator","import { Envelope, LoopMode, ReleaseMode, StageId } from './types'\nimport {\n    deselectStage,\n    selectCurrEnvId,\n    selectCurrStageId,\n    selectEnv,\n    selectEnvelope,\n    selectEnvelopes,\n    selectStage,\n    setCurve,\n    setDualLevels,\n    setInvert as setInvertAction,\n    setLevel,\n    setLoopMode as setLoopModeAction,\n    setLoopEnabled as setLoopEnabledAction,\n    setMaxLoops as setMaxLoopsAction,\n    setReleaseMode as setReleaseModeAction,\n    setResetOnTrigger,\n    setStageEnabled as setStageEnabledAction,\n    setTime,\n    setEnv3Id as setEnv3IdAction,\n    selectEnv3Id,\n} from '../env/envReducer'\nimport { store } from '../../store'\nimport midiApi from '../../../midi/midiApi'\nimport { curveFuncs } from '../../../components/curves/curveCalculator'\nimport { ApiSource } from '../../types'\nimport { dispatch, getBounded, getQuantized } from '../../utils'\n\nconst updateReleaseLevels = (env: Envelope, value: number) => {\n    if (env.stages[StageId.RELEASE1].enabled) {\n        dispatch(setLevel({ env: env.id, stage: StageId.RELEASE1, value }))\n    } else {\n        dispatch(setLevel({ env: env.id, stage: StageId.RELEASE2, value }))\n    }\n}\n\nconst cannotDisableStage = (stage: StageId) => stage === StageId.ATTACK || stage === StageId.RELEASE2 || stage === StageId.SUSTAIN\n\n// requestedValue is always 0-1 while store value is -1 to 1 if bipolar\nconst setStageLevel = (envId: number, stageId: StageId, requestedValue: number, source: ApiSource) => {\n    const env = selectEnvelopes(store.getState()).envs[envId]\n    const r1enabled = env.stages[StageId.RELEASE1].enabled\n    if (\n        stageId === StageId.DECAY2 ||\n        stageId === StageId.SUSTAIN ||\n        (stageId === StageId.RELEASE2 && r1enabled)\n    ) {\n        const boundedValue = getQuantized(getBounded(requestedValue), 32767)\n        const value = env.bipolar ? boundedValue * 2 - 1 : boundedValue\n\n        const currentLevel = env.stages[stageId].level\n        if(value === currentLevel){\n            return\n        }\n\n        // sustain level is not used directly. Instead it replaces r1 or r2 level depending on if\n        // r1 is enabled or not.\n        if (stageId === StageId.SUSTAIN) {\n            const stage2Id = r1enabled ? StageId.RELEASE1 : StageId.RELEASE2\n            dispatch(setDualLevels({ env: env.id, stage1: StageId.SUSTAIN, stage2: stage2Id, value }))\n        } else {\n            dispatch(setLevel({ env: envId, stage: stageId, value }))\n        }\n\n        if (stageId === StageId.SUSTAIN) {\n            updateReleaseLevels(env, value)\n        }\n\n        midiApi.env.setLevel(source, envId, stageId, boundedValue)\n    }\n}\n\nconst incrementStageLevel = (envId: number, stageId: StageId, incLevel: number, source: ApiSource) => {\n    const env = selectEnvelopes(store.getState()).envs[envId]\n    let currentLevel = selectEnvelope(envId)(store.getState()).stages[stageId].level\n    if (env.bipolar) {\n        currentLevel = (currentLevel + 1) / 2\n    }\n    setStageLevel(envId, stageId, currentLevel + incLevel, source)\n}\n\nconst setStageTime = (envId: number, stageId: StageId, requestedValue: number, source: ApiSource) => {\n    const boundedValue = getQuantized(getBounded(requestedValue))\n    const currentTime = selectEnvelope(envId)(store.getState()).stages[stageId].time\n    if (boundedValue === currentTime) {\n        return\n    }\n\n    dispatch(setTime({ env: envId, stage: stageId, value: boundedValue }))\n    midiApi.env.setTime(source, envId, stageId, boundedValue)\n}\n\nconst incrementStageTime = (envId: number, stageId: StageId, incTime: number, source: ApiSource) => {\n    const currentTime = selectEnvelope(envId)(store.getState()).stages[stageId].time\n    setStageTime(envId, stageId, currentTime + incTime, source)\n}\n\nconst setStageEnabled = (envId: number, stageId: StageId, enabled: boolean, source: ApiSource) => {\n    if (cannotDisableStage(stageId)) {\n        return\n    }\n\n    const env = selectEnvelopes(store.getState()).envs[envId]\n    if (env.stages[stageId].enabled === enabled) {\n        return\n    }\n\n    dispatch(setStageEnabledAction({ env: envId, stage: stageId, enabled }))\n\n    if (stageId === StageId.RELEASE1) {\n        if (enabled) {\n            dispatch(setLevel({ env: envId, stage: StageId.RELEASE1, value: env.stages[StageId.SUSTAIN].level }))\n        } else {\n            dispatch(setLevel({ env: envId, stage: StageId.RELEASE2, value: env.stages[StageId.SUSTAIN].level }))\n        }\n    }\n    midiApi.env.setStageEnabled(source, envId, stageId, enabled)\n}\nconst toggleStageEnabled = (envId: number, stageId: StageId, source: ApiSource) => {\n    const env = selectEnvelopes(store.getState()).envs[envId]\n    const stage = env.stages[stageId]\n    const enabled = !stage.enabled\n    setStageEnabled(envId, stageId, enabled, source)\n}\nconst setInvert = (envId: number, invert: boolean, source: ApiSource) => {\n    const env = selectEnvelopes(store.getState()).envs[envId]\n    if (env.invert === invert) {\n        return\n    }\n\n    dispatch(setInvertAction({ env: envId, invert }))\n    midiApi.env.setInvert(source, envId, invert)\n}\nconst toggleInvert = (envId: number, source: ApiSource) => {\n    const env = selectEnvelopes(store.getState()).envs[envId]\n    const invert = !env.invert\n    setInvert(envId, invert, source)\n}\nconst setRetrigger = (envId: number, resetOnTrigger: boolean, source: ApiSource) => {\n    const env = selectEnvelopes(store.getState()).envs[envId]\n    if (env.resetOnTrigger === resetOnTrigger) {\n        return\n    }\n\n    dispatch(setResetOnTrigger({ env: envId, resetOnTrigger }))\n    midiApi.env.setResetOnTrigger(source, envId, resetOnTrigger)\n}\nconst toggleRetrigger = (envId: number, source: ApiSource) => {\n    const env = selectEnvelopes(store.getState()).envs[envId]\n    const resetOnTrigger = !env.resetOnTrigger\n    setRetrigger(envId, resetOnTrigger, source)\n}\nconst setReleaseMode = (envId: number, releaseMode: ReleaseMode, source: ApiSource) => {\n    const env = selectEnvelopes(store.getState()).envs[envId]\n    if (env.releaseMode === releaseMode) {\n        return\n    }\n\n    dispatch(setReleaseModeAction({ env: envId, releaseMode }))\n    midiApi.env.setReleaseMode(source, envId, releaseMode)\n}\nconst toggleReleaseMode = (envId: number, source: ApiSource) => {\n    const env = selectEnvelopes(store.getState()).envs[envId]\n    const releaseMode = (env.releaseMode + 1) % 3\n    setReleaseMode(envId, releaseMode, source)\n}\nconst setLoopMode = (envId: number, loopMode: LoopMode, source: ApiSource) => {\n    const env = selectEnvelopes(store.getState()).envs[envId]\n    if (env.loopMode === loopMode) {\n        return\n    }\n\n    dispatch(setLoopModeAction({ env: envId, loopMode }))\n    midiApi.env.setLoopMode(source, envId, loopMode)\n}\nconst toggleLoopMode = (envId: number, source: ApiSource) => {\n    const env = selectEnvelopes(store.getState()).envs[envId]\n    const loopMode = (env.loopMode + 1) % 3\n    setLoopMode(envId, loopMode, source)\n}\nconst setLoopEnabled = (envId: number, enabled: boolean, source: ApiSource) => {\n    const env = selectEnvelopes(store.getState()).envs[envId]\n    if (env.loopEnabled === enabled) {\n        return\n    }\n\n    dispatch(setLoopEnabledAction({ env: envId, enabled }))\n    midiApi.env.setLoopEnabled(source, envId, enabled)\n}\nconst toggleLoopEnabled = (envId: number, source: ApiSource) => {\n    const env = selectEnvelopes(store.getState()).envs[envId]\n    const loopEnabled = !env.loopEnabled\n    setLoopEnabled(envId, loopEnabled, source)\n}\nconst toggleStageSelected = (envId: number, stageId: StageId, source: ApiSource) => {\n    const currStageId = selectCurrStageId(store.getState())\n    if (currStageId === stageId) {\n        dispatch(deselectStage({ env: -1, stage: stageId }))\n    } else {\n        dispatch(selectStage({ env: -1, stage: stageId }))\n    }\n}\nconst setCurrentEnv = (envId: number, source: ApiSource) => {\n    const boundedEnv = getBounded(envId, 0, selectEnvelopes(store.getState()).envs.length - 1)\n    if (selectCurrEnvId(store.getState()) !== boundedEnv) {\n        dispatch(selectEnv({ env: boundedEnv }))\n    }\n}\nconst incrementCurrentEnvelope = (increment: number, source: ApiSource) => {\n    setCurrentEnv(selectCurrEnvId(store.getState()) + increment, source)\n}\nconst setStageCurve = (envId: number, stageId: StageId, curve: number, source: ApiSource) => {\n    const stage = selectEnvelope(envId)(store.getState()).stages[stageId]\n    const boundedCurve = getBounded(curve, 0, curveFuncs.length - 1)\n    if (stage.curve === boundedCurve) {\n        return\n    }\n\n    dispatch(setCurve({ env: envId, stage: stageId, curve: boundedCurve }))\n    midiApi.env.setCurve(source, envId, stageId, curve)\n}\nconst incrementStageCurve = (envId: number, stageId: StageId, increment: number, source: ApiSource) => {\n    const stage = selectEnvelope(envId)(store.getState()).stages[stageId]\n    console.log('increment', {\n        envId,\n        stageId,\n        increment,\n        source,\n        env: selectEnvelope(envId),\n        stages: selectEnvelope(envId)(store.getState()).stages,\n        stage,\n    })\n    setStageCurve(envId, stageId, stage.curve + increment, source)\n}\nconst setMaxLoops = (envId: number, maxLoops: number, source: ApiSource) => {\n    const currMaxLoops = selectEnvelope(envId)(store.getState()).maxLoops\n    const boundedMaxLoops = getBounded(maxLoops, 2, 128)\n    if (boundedMaxLoops === currMaxLoops) {\n        return\n    }\n\n    dispatch(setMaxLoopsAction({ env: envId, value: boundedMaxLoops }))\n    midiApi.env.setMaxLoops(source, envId, boundedMaxLoops)\n}\nconst incrementMaxLoops = (envId: number, increment: number, source: ApiSource) => {\n    const currMaxLoops = selectEnvelope(envId)(store.getState()).maxLoops\n    setMaxLoops(envId, currMaxLoops + increment, source)\n}\nconst trigger = (envId: number, source: ApiSource) => {\n    midiApi.env.trigger(source, envId)\n}\nconst release = (envId: number, source: ApiSource) => {\n    midiApi.env.trigger(source, envId)\n}\nconst setEnv3Id = (id: number, source: ApiSource) => {\n    const envelopes = selectEnvelopes(store.getState()).envs.length\n    const currentEnv3Id = selectEnv3Id(store.getState())\n    if (id !== currentEnv3Id && id < envelopes && id > 1) {\n        dispatch(setEnv3IdAction({ id }))\n        midiApi.env.setEnv3Id(source, id)\n    }\n}\nconst toggleEnv3Id = (source: ApiSource) => {\n    const envelopes = selectEnvelopes(store.getState()).envs.length\n    const currEnv3Id = selectEnv3Id(store.getState())\n    let nextEnv3Id = (currEnv3Id + 1)\n    if (nextEnv3Id > envelopes - 1) {\n        nextEnv3Id = 2\n    }\n    setEnv3Id(nextEnv3Id, source)\n}\n\nconst envApi = {\n    setStageLevel,\n    incrementStageLevel,\n    setStageTime,\n    incrementStageTime,\n    setStageEnabled,\n    toggleStageEnabled,\n    setInvert,\n    toggleInvert,\n    setRetrigger,\n    toggleRetrigger,\n    setReleaseMode,\n    toggleReleaseMode,\n    setLoopMode,\n    toggleLoopMode,\n    setLoopEnabled,\n    toggleLoopEnabled,\n    toggleStageSelected,\n    setCurrentEnv,\n    incrementCurrentEnvelope,\n    setStageCurve,\n    incrementStageCurve,\n    setMaxLoops,\n    incrementMaxLoops,\n    trigger,\n    setEnv3Id,\n    toggleEnv3Id,\n}\n\nexport default envApi","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { MainDisplayScreenId } from './types'\nimport { RootState } from '../../store'\n\ntype MainDisplayState = {\n    currentScreen: MainDisplayScreenId\n}\n\nconst initialState: MainDisplayState = {\n    currentScreen:MainDisplayScreenId.MOD\n}\n\ntype CurrentScreenPayload = {\n    id: number;\n}\n\nexport const mainDisplaySlice = createSlice({\n    name: 'mainDisplay',\n    initialState,\n    reducers: {\n        setCurrentScreen: (state, {payload}: PayloadAction<CurrentScreenPayload>) => {\n            state.currentScreen = payload.id\n        }\n    }\n})\n\nexport const selectCurrScreen = (state: RootState) => state.mainDisplay.currentScreen\n\nexport const {\n    setCurrentScreen,\n} = mainDisplaySlice.actions;\n\nexport default mainDisplaySlice.reducer;","import { ControllerConfigCC, ControllerConfigNRPN } from './types'\nimport { store } from '../synthcore/store'\nimport { selectMidiChannel } from '../synthcore/modules/settings/settingsReducer'\nimport CC from './mapCC'\n\ntype MIDIMessageEvent = WebMidi.MIDIMessageEvent\ntype MIDIInput = WebMidi.MIDIInput\ntype MIDIOutput = WebMidi.MIDIOutput\ntype MIDIAccess = WebMidi.MIDIAccess\n\ntype CCSubscriber = {\n    id: number;\n    values: number[] | undefined;\n    callback: (value: number) => void;\n}\n\ntype NRPNSubscriber = {\n    id: number;\n    values: number[] | undefined;\n    callback: (value: number) => void;\n}\n\nconst midiConfig = {\n    inputIds: [\n        '-213316575', // Akai MPK25 Port 1/A\n    ],\n    outputIds: ['-259958146'],\n    sysexAddr: [1, 2, 3],\n    channel: 0,\n}\n\nconst MIDI_CC = 0b10110000\n\nlet midiOut: MIDIOutput | undefined\nlet midiIn: MIDIInput | undefined\n\nconst loopback = true\nlet idPool = 0\nconst ccSubscribers: { [key: number]: CCSubscriber[] } = {}\nconst nrpnSubscribers: { [key: number]: NRPNSubscriber[] } = {}\n\nconst getChannel = () => selectMidiChannel(store.getState())\n\nexport const cc = {\n    subscribe: (callback: (value: number) => void, { cc, values }: ControllerConfigCC) => {\n        const id = idPool++\n        ccSubscribers[cc] = [...(ccSubscribers[cc] || []), { id, values, callback }]\n        return id\n    },\n    unsubscribe: (controller: ControllerConfigCC, id: number) => {\n        const subscribersForCC = ccSubscribers[controller.cc]\n        const index = subscribersForCC.map(sub => sub.id).indexOf(id)\n        if (index > -1) {\n            ccSubscribers[controller.cc] = [...subscribersForCC.slice(0, index), ...subscribersForCC.slice(index + 1)]\n        }\n    },\n    publish: (cc: number, value: number) => {\n        if (ccSubscribers[cc]) {\n            ccSubscribers[cc].forEach((subscriber) => {\n                if (!subscriber.values || subscriber.values.includes(value)) {\n                    subscriber.callback(value)\n                }\n            })\n        }\n    },\n    send: (controller: ControllerConfigCC, value: number) => {\n        if (loopback) {\n            cc.publish(controller.cc, value)\n        }\n        if (midiOut) {\n            const ccForChannel = MIDI_CC + getChannel()\n            midiOut.send([ccForChannel, controller.cc, value])\n        }\n    }\n}\n\nexport const nrpn = {\n    subscribe: (callback: (value: number) => void, { addr, values }: ControllerConfigNRPN) => {\n        const id = idPool++\n        nrpnSubscribers[addr] = [...(nrpnSubscribers[addr] || []), { id, values, callback }]\n        return id\n    },\n    unsubscribe: (controller: ControllerConfigNRPN, id: number) => {\n        const subscribersForNRPN = nrpnSubscribers[controller.addr]\n        const index = subscribersForNRPN.map(sub => sub.id).indexOf(id)\n        if (index > -1) {\n            nrpnSubscribers[controller.addr] = [...subscribersForNRPN.slice(0, index), ...subscribersForNRPN.slice(index + 1)]\n        }\n    },\n    publish: (addr: number, value: number) => {\n        if (nrpnSubscribers[addr]) {\n            nrpnSubscribers[addr].forEach((subscriber) => {\n                if (!subscriber.values || subscriber.values.includes(value)) {\n                    subscriber.callback(value)\n                }\n            })\n        }\n    },\n    send: (controller: ControllerConfigNRPN, value: number) => {\n        if (loopback) {\n            nrpn.publish(controller.addr, value)\n        }\n        if (midiOut) {\n            const loAddr = controller.addr & 0b01111111\n            const hiAddr = (controller.addr >> 7) & 0b01111111\n\n            const loValue = value & 0b01111111\n            const midValue = (value >> 7) & 0b01111111\n            const hiValue = (value >> 14) & 0b01111111\n\n            const ccForChannel = MIDI_CC + getChannel()\n\n            let data = [ccForChannel, CC.NRPN_MSB, hiAddr, ccForChannel, CC.NRPN_LSB, loAddr]\n            if(value > 16383) {\n                data.push(ccForChannel)\n                data.push(CC.DATA_ENTRY_HSB)\n                data.push(hiValue)\n            }\n            if(value > 127) {\n                data.push(ccForChannel)\n                data.push(CC.DATA_ENTRY_MSB)\n                data.push(midValue)\n            }\n            data.push(ccForChannel)\n            data.push(CC.DATA_ENTRY_LSB)\n            data.push(loValue)\n\n            midiOut.send(data)\n        }\n    }\n}\n\nconst currNRPN = {\n    hiAddr: 0,\n    loAddr: 0,\n    hiValue: 0,\n    midValue: 0,\n    loValue: 0,\n}\n\nexport const receiveMidiMessage = (midiEvent: MIDIMessageEvent) => {\n    const midiData = midiEvent.data\n    const ccForChannel = MIDI_CC + getChannel()\n    if (midiData[0] === ccForChannel) {\n        if (midiData[1] === CC.NRPN_MSB) {\n            currNRPN.hiAddr = midiData[2]\n        } else if(midiData[1] === CC.NRPN_LSB) {\n            currNRPN.loAddr = midiData[2]\n        } else if(midiData[1] === CC.DATA_ENTRY_HSB) {\n            currNRPN.hiValue = midiData[2]\n        } else if(midiData[1] === CC.DATA_ENTRY_MSB) {\n            currNRPN.midValue = midiData[2]\n        } else if(midiData[1] === CC.DATA_ENTRY_LSB) {\n            // triggering an update on lsb means we don't have to send hsb and msb if we\n            // don't want to\n            currNRPN.loValue = midiData[2]\n            const addr = (currNRPN.hiAddr << 7) + currNRPN.loAddr\n            const value = (currNRPN.midValue << 14) + (currNRPN.midValue << 7) + currNRPN.loValue\n            nrpn.publish(addr, value)\n            currNRPN.hiValue = 0\n            currNRPN.midValue = 0\n            currNRPN.loValue = 0\n        } else {\n            cc.publish(midiData[1], midiData[2])\n        }\n    }\n}\n\nconst updateSelectedMidi = async (midiAccess: MIDIAccess) => {\n    console.log('UPDATING MIDI CONFIG')\n    midiAccess.inputs.forEach((value, key) => console.log({ key, value }))\n    midiAccess.outputs.forEach((value, key) => console.log({ key, value }))\n\n    const foundInputId = midiConfig.inputIds.find(id => midiAccess.inputs.has(id))\n    const foundOutputId = midiConfig.outputIds.find(id => midiAccess.outputs.has(id))\n\n    if (foundInputId) {\n        midiIn = midiAccess.inputs.get(foundInputId)\n        if (midiIn) {\n            midiIn.onmidimessage = receiveMidiMessage\n        }\n        console.log('Selected midi input', midiIn?.name)\n    } else {\n        midiIn = undefined\n        console.log('Desired midi input not found')\n    }\n\n    if (foundOutputId) {\n        midiOut = midiAccess.outputs.get(foundOutputId)\n        console.log('Selected midi output', midiOut?.name)\n    } else {\n        midiOut = undefined\n        console.log('Desired midi output not found')\n    }\n\n}\n\nconst onMIDISuccess = async (midiAccess: MIDIAccess) => {\n\n    await updateSelectedMidi(midiAccess)\n\n    midiAccess.onstatechange = async (connectionEvent) => {\n        console.log(`Midi port ${connectionEvent.port.name} state changed to ${connectionEvent.port.state}, updating connections`)\n        await updateSelectedMidi(midiAccess)\n    }\n}\n\nconst onMIDIFailure = () => {\n    console.log('Could not access your MIDI devices.')\n}\n\nif (navigator.requestMIDIAccess) {\n    navigator.requestMIDIAccess({ sysex: true }).then(onMIDISuccess, onMIDIFailure)\n}\n\n//TODO: Close midi connection on app close!","import { MainDisplayControllerIds } from '../mainDisplay/types'\nimport modsApi from './modsApi'\nimport { ApiSource } from '../../types'\nimport { step } from '../../utils'\n\nexport const mainDisplayModsPotResolutions = {\n    [MainDisplayControllerIds.POT1]: 16,\n    [MainDisplayControllerIds.POT2]: 16,\n    [MainDisplayControllerIds.POT3]: 16,\n    [MainDisplayControllerIds.POT4]: 16,\n    [MainDisplayControllerIds.POT5]: 100,\n    [MainDisplayControllerIds.POT6]: 1000,\n}\n\nexport const mainDisplayModsApi = {\n    handleMainDisplayController: (ctrlId: MainDisplayControllerIds, increment: number) => {\n        if (ctrlId === MainDisplayControllerIds.POT1) {\n            modsApi.incrementGuiTargetGroup(step(increment), ApiSource.UI)\n        } else if (ctrlId === MainDisplayControllerIds.POT2) {\n            modsApi.incrementGuiSource(step(increment), ApiSource.UI)\n        } else if (ctrlId === MainDisplayControllerIds.POT3) {\n            modsApi.incrementGuiTargetFunc(step(increment), ApiSource.UI)\n        } else if (ctrlId === MainDisplayControllerIds.POT4) {\n            modsApi.incrementGuiTargetParam(step(increment), ApiSource.UI)\n        } else if (ctrlId === MainDisplayControllerIds.POT5) {\n            modsApi.incrementGuiModValue(increment, ApiSource.UI)\n        } else if (ctrlId === MainDisplayControllerIds.POT6) {\n\n        }\n    }\n}\n","import { MainDisplayControllerIds } from '../mainDisplay/types'\nimport { selectCurrEnvId, selectCurrStageId, selectEnvelope } from './envReducer'\nimport { store } from '../../store'\nimport { envApi } from '../../synthcoreApi'\nimport { ApiSource } from '../../types'\nimport { LoopMode, StageId } from './types'\nimport { step } from '../../utils'\n\nexport const mainDisplayEnvPotResolutions = {\n    [MainDisplayControllerIds.POT1]: 8,\n    [MainDisplayControllerIds.POT2]: 1000,\n    [MainDisplayControllerIds.POT3]: 1000,\n    [MainDisplayControllerIds.POT4]: 8,\n    [MainDisplayControllerIds.POT5]: 32,\n    [MainDisplayControllerIds.POT6]: 1000,\n}\n\nexport const mainDisplayEnvApi = {\n    handleMainDisplayController: (ctrlId: MainDisplayControllerIds, increment: number) => {\n        //TODO Check current display page here\n        const envId = selectCurrEnvId(store.getState())\n        if (ctrlId === MainDisplayControllerIds.POT1) {\n            envApi.incrementCurrentEnvelope(step(increment), ApiSource.UI)\n        } else if (ctrlId === MainDisplayControllerIds.POT2) {\n            const stageId = selectCurrStageId(store.getState())\n            if (stageId !== StageId.STOPPED) {\n                envApi.incrementStageTime(envId, stageId, increment, ApiSource.UI)\n            }\n        } else if (ctrlId === MainDisplayControllerIds.POT3) {\n            const stageId = selectCurrStageId(store.getState())\n            if (stageId !== StageId.STOPPED) {\n                envApi.incrementStageLevel(envId, stageId, increment, ApiSource.UI)\n            }\n        } else if (ctrlId === MainDisplayControllerIds.POT4) {\n            const stageId = selectCurrStageId(store.getState())\n            if (stageId !== StageId.STOPPED) {\n                envApi.incrementStageCurve(envId, stageId, step(increment), ApiSource.UI)\n            }\n        } else if (ctrlId === MainDisplayControllerIds.POT5) {\n            const env = selectEnvelope(envId)(store.getState())\n            if (env.loopMode !== LoopMode.COUNTED) {\n                return\n            }\n            envApi.incrementMaxLoops(envId, step(increment), ApiSource.UI)\n        } else if (ctrlId === MainDisplayControllerIds.POT6) {\n\n        }\n    }\n}","import { MainDisplayControllerIds, MainDisplayScreenId } from './types'\nimport { store } from '../../store'\nimport { selectCurrScreen, setCurrentScreen } from './mainDisplayReducer'\nimport { dispatch } from '../../utils'\nimport { mainDisplayModsApi, mainDisplayModsPotResolutions } from '../mods/modsMainDisplayApi'\nimport { mainDisplayEnvApi, mainDisplayEnvPotResolutions } from '../env/envMainDisplayApi'\n\ntype PotResolutions = {\n    [key: number]: {\n        [key: number]: number\n    }\n}\n\nconst potResolution: PotResolutions = {\n    [MainDisplayScreenId.ENV]: mainDisplayEnvPotResolutions,\n    [MainDisplayScreenId.MOD]: mainDisplayModsPotResolutions\n}\n\nexport const getPotResolution = (ctrlId: MainDisplayControllerIds, currScreen: number) => {\n    const screenPots = potResolution[currScreen]\n    if (screenPots?.[ctrlId]) {\n        return screenPots[ctrlId]\n    }\n    return 1000\n}\n\nconst mainDisplayApi = {\n    handleMainDisplayController: (ctrlId: MainDisplayControllerIds, value: number) => {\n        const currScreenId = selectCurrScreen(store.getState())\n        if (currScreenId === MainDisplayScreenId.MOD) {\n            mainDisplayModsApi.handleMainDisplayController(ctrlId, value)\n        } else if (currScreenId === MainDisplayScreenId.ENV) {\n            mainDisplayEnvApi.handleMainDisplayController(ctrlId, value)\n        }\n    },\n    setCurrentScreen: (id: number) => {\n        dispatch(setCurrentScreen({id}))\n    }\n}\n\nexport default mainDisplayApi","import synthcoreEnvApi from './modules/env/envApi'\nimport synthcoreMainDisplayApi from './modules/mainDisplay/mainDisplayApi'\n\nexport const envApi = synthcoreEnvApi\nexport const mainDisplayApi = synthcoreMainDisplayApi\n","import { click, increment } from '../ui/uiReducer'\nimport { envApi } from '../../synthcoreApi'\nimport { StageId } from './types'\nimport { toggleInvert, toggleLoopEnabled, toggleLoopMode, toggleReleaseMode, toggleRetrigger, toggleStageEnabled, toggleStageSelected } from './envReducer'\nimport { ApiSource } from '../../types'\nimport { EnvControllerId } from './types'\nimport { PayloadAction } from '@reduxjs/toolkit'\n\ntype EnvApiMapperType = {\n    [key: number]: (ctrlIndex: number, value: number) => void\n}\n\nconst envApiMapper: EnvApiMapperType = {\n    [EnvControllerId.ENV_DELAY]: (ctrlIndex: number, value: number) => envApi.incrementStageTime(ctrlIndex, StageId.DELAY, value, ApiSource.UI),\n    [EnvControllerId.ENV_ATTACK]: (ctrlIndex: number, value: number) => envApi.incrementStageTime(ctrlIndex, StageId.ATTACK, value, ApiSource.UI),\n    [EnvControllerId.ENV_DECAY1]: (ctrlIndex: number, value: number) => envApi.incrementStageTime(ctrlIndex, StageId.DECAY1, value, ApiSource.UI),\n    [EnvControllerId.ENV_DECAY2]: (ctrlIndex: number, value: number) => envApi.incrementStageTime(ctrlIndex, StageId.DECAY2, value, ApiSource.UI),\n    [EnvControllerId.ENV_SUSTAIN]: (ctrlIndex: number, value: number) => envApi.incrementStageLevel(ctrlIndex, StageId.SUSTAIN, value, ApiSource.UI),\n    [EnvControllerId.ENV_RELEASE1]: (ctrlIndex: number, value: number) => envApi.incrementStageTime(ctrlIndex, StageId.RELEASE1, value, ApiSource.UI),\n    [EnvControllerId.ENV_RELEASE2]: (ctrlIndex: number, value: number) => envApi.incrementStageTime(ctrlIndex, StageId.RELEASE2, value, ApiSource.UI),\n    [EnvControllerId.ENV_D2_LEVEL]: (ctrlIndex: number, value: number) => envApi.incrementStageLevel(ctrlIndex, StageId.DECAY2, value, ApiSource.UI),\n    [EnvControllerId.ENV_R2_LEVEL]: (ctrlIndex: number, value: number) => envApi.incrementStageLevel(ctrlIndex, StageId.RELEASE2, value, ApiSource.UI),\n    [EnvControllerId.ENV_SELECT_ENV3ID]: () => envApi.toggleEnv3Id(ApiSource.UI),\n    [EnvControllerId.ENV_LOOP]: (ctrlIndex: number) => envApi.toggleLoopEnabled(ctrlIndex, ApiSource.UI),\n    [EnvControllerId.ENV_TRIGGER]: (ctrlIndex: number) => envApi.trigger(ctrlIndex, ApiSource.UI),\n    [EnvControllerId.ENV_INVERT]: (ctrlIndex: number) => envApi.toggleInvert(ctrlIndex, ApiSource.UI)\n}\n\nexport const envMiddleware = (action: PayloadAction): void => {\n    if (increment.match(action)) {\n        const ctrlIndex = action.payload.ctrlIndex || 0\n        envApiMapper[action.payload.ctrlId](ctrlIndex, action.payload.value)\n    } else if (click.match(action)) {\n        const ctrlIndex = action.payload.ctrlIndex || 0\n        envApiMapper[action.payload.ctrlId](ctrlIndex, 0)\n    } else if (toggleStageEnabled.match(action)) {\n        envApi.toggleStageEnabled(action.payload.env, action.payload.stage, ApiSource.GUI)\n    } else if (toggleInvert.match(action)) {\n        envApi.toggleInvert(action.payload.env, ApiSource.GUI)\n    } else if (toggleRetrigger.match(action)) {\n        envApi.toggleRetrigger(action.payload.env, ApiSource.GUI)\n    } else if (toggleReleaseMode.match(action)) {\n        envApi.toggleReleaseMode(action.payload.env, ApiSource.GUI)\n    } else if (toggleLoopMode.match(action)) {\n        envApi.toggleLoopMode(action.payload.env, ApiSource.GUI)\n    } else if (toggleLoopEnabled.match(action)) {\n        envApi.toggleLoopEnabled(action.payload.env, ApiSource.GUI)\n    } else if (toggleStageSelected.match(action)) {\n        envApi.toggleStageSelected(action.payload.env, action.payload.stage, ApiSource.GUI)\n    }\n}\n","import { PayloadAction } from '@reduxjs/toolkit'\nimport { click, increment } from '../ui/uiReducer'\nimport { mainDisplayApi } from '../../synthcoreApi'\nimport { MainDisplayControllerIds, MainDisplayScreenId } from './types'\n\ntype MainDisplayApiMapperType = {\n    [key: number]: (ctrlIndex: number, value: number) => void\n}\n\nconst mainDisplayApiMapper: MainDisplayApiMapperType = {\n    [MainDisplayControllerIds.MENU_LFO]: () => mainDisplayApi.setCurrentScreen(MainDisplayScreenId.LFO),\n    [MainDisplayControllerIds.MENU_OSC]: () => mainDisplayApi.setCurrentScreen(MainDisplayScreenId.OSC),\n    [MainDisplayControllerIds.MENU_FILTER]: () => mainDisplayApi.setCurrentScreen(MainDisplayScreenId.FILTER),\n    [MainDisplayControllerIds.MENU_ENVELOPE]: () => mainDisplayApi.setCurrentScreen(MainDisplayScreenId.ENV),\n    [MainDisplayControllerIds.MENU_MOD]: () => mainDisplayApi.setCurrentScreen(MainDisplayScreenId.MOD),\n    [MainDisplayControllerIds.MENU_FX]: () => mainDisplayApi.setCurrentScreen(MainDisplayScreenId.FX),\n}\nexport const mainDisplayMiddleware = (action: PayloadAction): void => {\n    if (increment.match(action)) {\n        mainDisplayApi.handleMainDisplayController(action.payload.ctrlId, action.payload.value)\n    } else if (click.match(action)) {\n        mainDisplayApiMapper[action.payload.ctrlId](0, 0)\n    }\n}\n","import { Middleware } from 'redux'\nimport { ControllerGroupIds } from './types'\nimport { envMiddleware } from './modules/env/envMiddleware'\nimport { mainDisplayMiddleware } from './modules/mainDisplay/mainDisplayMiddleware'\nimport { modsMiddleware } from './modules/mods/modsMiddleware'\n\nexport const synthcoreMiddleware: Middleware<{}, any> = storeAPI => next => action => {\n    if (action.payload.ctrlGroup === ControllerGroupIds.ENV || action.type.indexOf('envelopes/') > -1) {\n        envMiddleware(action)\n    } else if (action.payload.ctrlGroup === ControllerGroupIds.MODS || action.type.indexOf('mods/') > -1) {\n        modsMiddleware(action)\n    } else if(action.payload.ctrlGroup === ControllerGroupIds.MAIN_DISP) {\n        mainDisplayMiddleware(action)\n    }\n    return next(action)\n}\n","import { ApiSource } from '../../types'\nimport { PayloadAction } from '@reduxjs/toolkit'\nimport { setGuiMod } from './modsReducer'\nimport modsApi from './modsApi'\n\nexport const modsMiddleware = (action: PayloadAction): void => {\n    if (setGuiMod.match(action)) {\n        modsApi.setGuiMod(\n            action.payload.guiSource,\n            action.payload.guiTargetFunc,\n            action.payload.guiTargetParam,\n            ApiSource.GUI\n        )\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState } from '../../store'\n\ntype SettingsState = {\n    midiChannel: number\n}\n\nconst initialState: SettingsState = {\n    midiChannel: 0,\n}\n\ntype MidiChannelPayload = {\n    channel: number;\n}\n\nexport const uiSlice = createSlice({\n    name: 'settings',\n    initialState,\n    reducers: {\n        setMidiChannel: (state, {payload}: PayloadAction<MidiChannelPayload>) => {\n            state.midiChannel = payload.channel\n        },\n    }\n})\n\nexport const selectMidiChannel = (state: RootState) => state.settings.midiChannel\n\nexport const {\n    setMidiChannel,\n} = uiSlice.actions;\n\nexport default uiSlice.reducer;","import { configureStore } from '@reduxjs/toolkit'\nimport envReducer from './modules/env/envReducer'\nimport { synthcoreMiddleware } from './synthcoreMiddleware'\nimport uiReducer from './modules/ui/uiReducer'\nimport settingsReducer from './modules/settings/settingsReducer'\nimport mainDisplayReducer from './modules/mainDisplay/mainDisplayReducer'\nimport modsReducer from './modules/mods/modsReducer'\n\nexport const store = configureStore({\n    reducer: {\n        envelopes: envReducer,\n        mods: modsReducer,\n        settings: settingsReducer,\n        ui: uiReducer,\n        mainDisplay: mainDisplayReducer,\n    },\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware()\n            .concat(\n                synthcoreMiddleware,\n            )\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n\n","import React, { useCallback, useEffect, useState } from 'react'\nimport classNames from 'classnames'\nimport arc from '../../utils/svg/arc'\nimport RotaryPotBase from './RotaryPotBase'\nimport { ControllerConfigCC } from '../../midi/types'\nimport { cc } from '../../midi/midibus'\nimport { useAppDispatch } from '../../synthcore/hooks'\nimport { increment } from '../../synthcore/modules/ui/uiReducer'\nimport { ControllerGroupIds } from '../../synthcore/types'\nimport './RotaryPot.scss'\n\nexport type LedMode = 'single' | 'multi';\nexport type PotMode = 'normal' | 'pan' | 'spread';\n\nexport interface Props {\n    x: number;\n    y: number;\n    ledCount?: number;\n    ledMode?: LedMode\n    potMode?: PotMode\n    label: string\n    position?: number;\n    midiConfig?: ControllerConfigCC;\n    defaultValue?: number;\n    storePosition?: number;\n    ctrlGroup?: ControllerGroupIds;\n    ctrlId?: number;\n    ctrlIndex?: number;\n    disabled?: boolean;\n}\n\ninterface Config {\n    knobRadius: number;\n    ledArc?: number;\n    windowToKnobMargin?: number;\n    windowWidth?: number;\n}\n\nconst getRenderProps = (props: Props & Config) => {\n    const knobRadius = props.knobRadius\n    const ledCount = props.ledCount || 31\n    const ledArc = props.ledArc || 270\n    const windowToKnobMargin = props.windowToKnobMargin || 2\n    const windowWidth = props.windowWidth || 4\n\n    const ledRadius = 0.4\n    const centerLed = (ledCount - 1) / 2\n    const ledRingRadius = knobRadius + windowToKnobMargin + windowWidth / 2\n\n    // TODO: Dynamically calculate this based on window\n    // TODO: Set font size in relative units...\n    const labelY = ledRingRadius + 5\n\n    const degreesBetweenLeds = ledArc / (ledCount - 1)\n    const ledAngles = []\n    for (let i = 0; i < ledCount; i++) {\n        ledAngles.push(-(ledArc / 2) + degreesBetweenLeds * i)\n    }\n\n    // Ideally the window should be a shape, not a path with a stroke, to be able to convert the\n    // SVG into paths for cutting.\n\n    // Distance from last led to the end should really be equal to the distance between two leds,\n    // but for now it's just 2/3 the distance from the center of one led to the next.\n    const windowStartAngle = -ledArc / 2 - 2 * (degreesBetweenLeds / 3)\n    const windowEndAngle = windowStartAngle * -1\n    const windowArc = arc(0, 0, ledRingRadius, windowStartAngle, windowEndAngle)\n\n    return {\n        ledRadius,\n        knobRadius,\n        ledCount,\n        centerLed,\n        windowWidth,\n        ledRingRadius,\n        labelY,\n        ledAngles,\n        windowArc,\n        ledArc,\n    }\n}\n\nconst getLedPos = (centerLed: number, ledCount: number, mode: PotMode, position: number): number => {\n    switch (mode) {\n        case 'normal':\n            return Math.abs(Math.ceil(position * (ledCount - 1) - 0.5))\n        case 'pan': {\n            // Done this way so that edge case for rounding is the same on both sides of center\n            // Pan is sentered when position is 0.5.\n            const panAmount = Math.round(Math.abs(2 * (position - 0.5) * centerLed))\n            const sign = position >= 0.5 ? 1 : -1\n            return centerLed + (panAmount * sign)\n        }\n        case 'spread': {\n            // Done this way so that edge case for rounding is the same on both sides of center\n            // Spread goes from 0 to 1 where 0 is senter and 1 is max spread.\n            const panAmount = Math.round(Math.abs((position) * centerLed))\n            return centerLed + panAmount\n        }\n    }\n    return 0\n}\n\nconst RotaryPotWithLedRingBase = (props: Props & Config) => {\n\n    // Position should be in the range 0-1 in all modes but pan. In pan the range is -0.5 - 0.5\n    const { x, y, ledMode = 'single', potMode = 'normal', label, midiConfig, position: defaultValue,\n        storePosition, ctrlGroup, ctrlId, ctrlIndex, disabled\n    } = props\n\n    const localControl = ctrlGroup === undefined && ctrlId === undefined && ctrlIndex === undefined\n\n    const dispatch = useAppDispatch()\n\n    const {\n        ledRadius,\n        knobRadius,\n        ledCount,\n        centerLed,\n        windowWidth,\n        ledRingRadius,\n        labelY,\n        ledAngles,\n        windowArc,\n        ledArc,\n    } = getRenderProps(props);\n    // For objects centered around 0, use overflow: visible\n    // For scaling, use viewBox on the outer svg and unitless the rest of the way\n\n    const [statePosition, setStatePosition] = useState(defaultValue || 0);\n\n    // positive pointer\n    const currentPosition = storePosition !== undefined ? storePosition : statePosition\n    const ledPosition = getLedPos(centerLed, ledCount, potMode, currentPosition)\n\n    // negative pointer used for spread\n    const negLedPosition = centerLed - (ledPosition - centerLed)\n\n    // TODO: Remove once all functions go through redux store. Until then, pots without connection will send and receive midi\n    // themselves.\n    const sendMidi = useCallback((position: number) => {\n        if(midiConfig){\n            cc.send(midiConfig, Math.round(127 * position));\n        }\n    }, [midiConfig]);\n\n    const localIncrement = useCallback((steps: number, stepSize: number) => {\n        if(disabled) return;\n\n        const newPosition = statePosition + steps * stepSize;\n        if(newPosition < 0){\n            if(statePosition > 0){\n                sendMidi(0);\n            }\n        } else if(newPosition > 1){\n            if(statePosition < 1) {\n                sendMidi(1);\n            }\n        } else if(newPosition !== statePosition){\n            sendMidi(newPosition);\n        }\n    }, [disabled, sendMidi, statePosition])\n\n    const onIncrement = useCallback((steps: number, stepSize: number) => {\n        if(disabled) return;\n\n        if(ctrlId !== undefined && ctrlGroup !== undefined) {\n            dispatch(increment({ ctrlGroup, ctrlId, value: steps * stepSize, ctrlIndex }))\n        }\n    }, [disabled, ctrlGroup, ctrlId, ctrlIndex, dispatch])\n\n    useEffect(() => {\n        if(midiConfig) {\n            const updateValueFromMidi = (midiValue: number) => {\n                setStatePosition(midiValue / 127);\n            }\n\n            const subscriberId = cc.subscribe(updateValueFromMidi, midiConfig)\n            return function cleanup() {\n                cc.unsubscribe(midiConfig, subscriberId);\n            };\n        }\n    });\n\n    return (\n        <svg x={x} y={y} className=\"pot\">\n            <RotaryPotBase\n                knobRadius={knobRadius}\n                onIncrement={localControl ? localIncrement : onIncrement}\n                arc={ledArc}\n                defaultValue={defaultValue }\n            />\n            <path d={windowArc} className=\"pot-ring-window\" strokeWidth={windowWidth}/>\n            {ledAngles.map((angle, led) => {\n                const ledOn =\n                    !disabled && (\n                    // pointer should always be on\n                    (ledMode === 'single' && led === ledPosition) ||\n\n                    // 'negative' pointer should be on for spread\n                    (ledMode === 'single' && potMode === 'spread' && led === negLedPosition) ||\n\n                    // highlight all from start to position\n                    (ledMode === 'multi' && potMode === 'normal' && led <= ledPosition) ||\n\n                    // highlight all from center to position when panning\n                    (ledMode === 'multi' && potMode === 'pan' && (\n                        (ledPosition >= centerLed && led >= centerLed && led <= ledPosition) ||\n                        (ledPosition <= centerLed && led <= centerLed && led >= ledPosition)\n                    )) ||\n\n                    // highlight all from center to pointer on both sides when spreading\n                    (ledMode === 'multi' && potMode === 'spread' && (\n                        (led >= negLedPosition) && (led <= ledPosition)\n                    ))\n                    )\n\n                return <circle\n                    key={led}\n                    cx={0} cy={-ledRingRadius} r={ledRadius} stroke=\"black\" fill=\"red\"\n                    transform={`rotate(${angle})`}\n                    className={classNames('pot-ring-led', { 'pot-ring-led__on': ledOn })}/>\n            })}\n            <text x={0} y={labelY} className=\"pot-label\" textAnchor=\"middle\">{label}</text>\n        </svg>\n    )\n}\n\nexport default RotaryPotWithLedRingBase\n","import React from 'react'\nimport RotaryPotWithLedRingBase, { Props } from './RotaryPotWithLedRingBase';\n\nconst RotaryPot32 = (props: Props) => <RotaryPotWithLedRingBase knobRadius={16} ledCount={47} {...props} />\n\nexport default RotaryPot32","import React from 'react'\nimport RotaryPotWithLedRingBase, { Props } from './RotaryPotWithLedRingBase';\n\nconst RotaryPot10 = (props: Props) => <RotaryPotWithLedRingBase\n    knobRadius={5}\n    ledCount={19}\n    windowToKnobMargin={1}\n    windowWidth={3}\n    {...props} />\n\nexport default RotaryPot10","import React from 'react';\nimport './RoundButton.scss';\n\ninterface Props {\n  onClick: () => void;\n  buttonRadius: number;\n  className: string;\n}\n\nconst RoundPushButtonBase = ({buttonRadius, className, onClick}: Props) =>\n    <circle cx={0} cy={0} r={buttonRadius} className={className} onClick={onClick}/>\n\nexport default RoundPushButtonBase","import React, { useCallback, useEffect, useState } from 'react'\nimport classNames from 'classnames'\nimport RoundPushButtonBase from './RoundPushButtonBase'\nimport RotaryPotBase from '../pots/RotaryPotBase'\nimport { cc } from '../../midi/midibus'\nimport { ControllerConfigCC } from '../../midi/types'\nimport { ControllerGroupIds } from '../../synthcore/types'\nimport { click } from '../../synthcore/modules/ui/uiReducer'\nimport { dispatch } from '../../synthcore/utils'\nimport './RoundButton.scss'\n\ntype LedPosition = 'left' | 'right' | 'sides' | 'top' | 'bottom' | undefined;\ntype LabelPosition = 'left' | 'right' | 'top' | 'bottom' | undefined;\ntype ButtonMode = 'push' | 'rotate';\n\n// Stuff that is special for a particular kind of button, used in wrapper functions.\ntype Config = {\n    buttonRadius: number;\n    buttonMode: ButtonMode;\n    ledMargin?: number; // margin button-led\n    ledToLedMargin?: number; // vertical spacing\n    labelMargin?: number; // margin button-label\n    ledTolabelMargin?: number; // margin button-label\n    ledButton?: boolean;\n}\n\n// Per instance properties.\nexport interface Props {\n    x: number;\n    y: number;\n    label?: string;\n    labelPosition?: LabelPosition;\n    ledLabels?: string[];\n    ledPosition?: LedPosition;\n\n    // Number of leds AROUND the button. If this is undefined but ledButton is true, the button itself is a led.\n    ledCount?: number;\n\n    // What midi messages to send when clicking the button.\n    // If the midi values array is longer than the ledCount (+1 if hasOff is used), all leds will light up on the rest, making it possible\n    // to create a all-on mode.\n    midiConfig?: ControllerConfigCC;\n\n    // True if the first midi value is an off state, lets us switch off all diodes\n    hasOff?: boolean;\n\n    // Normally, clicking a button adds one modulo the length of the value array to the value. If this is true it subtracts instead\n    reverse?: boolean;\n\n    // This is true by default, meaning that modulo is used when the next value is larger than the number of values in the array.\n    // If it is set to false, the button stops sending messages when the end of the value array is reached. Useful for up/down buttons.\n    loop?: boolean;\n\n    // Used if button is part of a group - \"radio button\"\n    radioButtonIndex?: number;\n\n    // External callback to do stuff like light up external leds when a value changes.\n    onUpdate?: (valueIndex: number) => void;\n\n    onClick?: () => void;\n\n    // Default value is 0 unless this is set to another index in the midi values array. Must be less than the length of the values array.\n    defaultValueIndex?: number;\n\n    ctrlGroup?: ControllerGroupIds;\n    ctrlId?: number;\n    ctrlIndex?: number;\n    storeValue?: number;\n}\n\ntype LabelPos = {\n    x: number;\n    y: number;\n    textAnchor: string;\n}\n\ntype LedPos = {\n    x: number;\n    y: number;\n    labelX: number;\n    textAnchor: string;\n}\n\ntype RenderProps = {\n    buttonRadius: number;\n    buttonMode: ButtonMode;\n    ledRadius: number;\n    labelPos: LabelPos;\n    ledPos: LedPos[];\n    ledLabels: string[];\n}\n\nconst positionLabel = (buttonRadius: number, labelPosition: LabelPosition, labelMargin: number): LabelPos => {\n    switch (labelPosition) {\n        case 'left':\n            return {\n                x: -(buttonRadius + labelMargin + 2),\n                y: 0,\n                textAnchor: 'end'\n            }\n        case 'right':\n            return {\n                x: buttonRadius + labelMargin + 2,\n                y: 0,\n                textAnchor: 'start'\n            }\n        case 'top':\n            return {\n                x: 0,\n                y: -(buttonRadius + labelMargin + 3),\n                textAnchor: 'middle'\n            }\n        case 'bottom':\n            return {\n                x: 0,\n                y: buttonRadius + labelMargin + 3,\n                textAnchor: 'middle'\n            }\n        default:\n            return { x: 0, y: 0, textAnchor: 'right' }\n    }\n}\n\nconst positionLeds = (\n    buttonRadius: number,\n    ledRadius: number,\n    ledCount: number,\n    ledPosition: LedPosition,\n    ledMargin: number,\n    ledToLedMargin: number,\n    ledTolabelMargin: number\n): LedPos[] => {\n    if (ledCount === 0) {\n        return []\n    }\n\n    const yDist = 2 * ledRadius + ledToLedMargin\n    const ledPositions = []\n\n    for (let i = 0; i < ledCount; i++) {\n        const leftLeds = Math.ceil(ledCount / 2)\n        let adjustedPosition = ledPosition\n        let adjustedLedCount = ledCount\n        let adjustedI = i\n        if (ledPosition === 'sides') {\n            if (i < leftLeds) {\n                adjustedPosition = 'left'\n                adjustedLedCount = leftLeds\n            } else {\n                adjustedPosition = 'right'\n                adjustedLedCount = ledCount - leftLeds\n                adjustedI = i - leftLeds\n            }\n        }\n\n        switch (adjustedPosition) {\n            case 'left':\n                ledPositions.push({\n                    x: -(buttonRadius + ledMargin + 2 + ledRadius),\n                    y: (adjustedI - (adjustedLedCount - 1) / 2) * yDist,\n                    labelX: -(buttonRadius + ledMargin + 2 + ledTolabelMargin + 2 * ledRadius),\n                    textAnchor: 'end'\n                })\n                break\n            case 'right':\n                ledPositions.push({\n                    x: buttonRadius + ledMargin + 2 + ledRadius,\n                    y: (adjustedI - (adjustedLedCount - 1) / 2) * yDist,\n                    labelX: buttonRadius + ledMargin + 2 + ledTolabelMargin + 2 * ledRadius,\n                    textAnchor: 'start'\n                })\n                break\n            case 'top':\n                ledPositions.push({\n                    x: 0,\n                    y: -((ledCount - 1 - i) * yDist + buttonRadius + ledMargin + ledRadius),\n                    labelX: ledRadius + ledTolabelMargin,\n                    textAnchor: 'start'\n                })\n                break\n            case 'bottom':\n                ledPositions.push({\n                    x: 0,\n                    y: i * yDist + buttonRadius + ledMargin + ledRadius,\n                    labelX: ledRadius + ledTolabelMargin,\n                    textAnchor: 'start'\n                })\n                break\n            default:\n                ledPositions.push({ x: 0, y: 0, labelX: 0, textAnchor: 'right' })\n        }\n    }\n    return ledPositions\n}\n\nconst getRenderProps = (props: Props & Config): RenderProps => {\n    const buttonRadius = props.buttonRadius\n\n    const labelMargin = props.labelMargin || 2\n    const labelPosition = props.labelPosition || 'left'\n\n    const ledRadius = 1.5\n    const ledCount = props.ledCount || 0\n    const ledToLedMargin = props.ledToLedMargin || 3\n    const ledMargin = props.ledMargin || 4\n    const ledTolabelMargin = props.ledTolabelMargin || 3\n    const ledPosition = props.ledPosition || 'left'\n\n    return {\n        ledRadius,\n        buttonRadius,\n        labelPos: positionLabel(buttonRadius, labelPosition, labelMargin),\n        ledPos: positionLeds(buttonRadius, ledRadius, ledCount, ledPosition, ledMargin, ledToLedMargin, ledTolabelMargin),\n        ledLabels: props.ledLabels || [],\n        buttonMode: props.buttonMode,\n    }\n}\n\nexport const RoundButtonBase = (props: Props & Config) => {\n\n    const { x, y, label, midiConfig, radioButtonIndex,\n        hasOff, ledCount, ledButton, onUpdate, reverse, loop = true, defaultValueIndex, onClick,\n        ctrlGroup, ctrlId, ctrlIndex, storeValue\n    } = props\n\n    const [stateValue, setStateValue] = useState(defaultValueIndex || 0);\n\n    const currentValue = storeValue !== undefined ? storeValue : stateValue;\n\n    // off is always the first element in the midi config values list, so when a radio\n    // button has an off state we need to offset our index by one.\n    const radioButtonValueIndex = hasOff ? (radioButtonIndex || 0) + 1 : radioButtonIndex || 0;\n    const hasOffValue = hasOff || (ledButton && ledCount === undefined)\n    const ledOnIndex = hasOffValue ? currentValue - 1 : currentValue;\n\n    const handleOnClick = useCallback(() => {\n        if(onClick) onClick();\n\n        if(ctrlId !== undefined && ctrlGroup !== undefined) {\n            dispatch(click({ ctrlGroup, ctrlId, ctrlIndex }))\n        } else {\n            if (midiConfig && midiConfig.values) {\n                if (radioButtonIndex !== undefined) {\n                    if (midiConfig.values.length >= radioButtonValueIndex) {\n                        if (hasOffValue && currentValue === radioButtonValueIndex) {\n                            cc.send(midiConfig, midiConfig.values[0]);\n                        } else {\n                            cc.send(midiConfig, midiConfig.values[radioButtonValueIndex]);\n                        }\n                    }\n                } else if (reverse) {\n                    const valueCandidate = (currentValue - 1);\n                    if (loop) {\n                        const newValue = (valueCandidate + midiConfig.values.length) % midiConfig.values.length;\n                        cc.send(midiConfig, midiConfig.values[newValue]);\n                    } else {\n                        if (valueCandidate >= 0) {\n                            cc.send(midiConfig, midiConfig.values[valueCandidate]);\n                        }\n                    }\n                } else {\n                    const valueCandidate = (currentValue + 1);\n                    if (loop) {\n                        const newValue = valueCandidate % midiConfig.values.length;\n                        cc.send(midiConfig, midiConfig.values[newValue]);\n                    } else {\n                        if (valueCandidate < midiConfig.values.length) {\n                            cc.send(midiConfig, midiConfig.values[valueCandidate]);\n                        }\n                    }\n                }\n            }\n        }\n    }, [\n        radioButtonValueIndex, hasOffValue, midiConfig,\n        currentValue, radioButtonIndex, reverse, loop,\n        onClick, ctrlId, ctrlGroup, ctrlIndex\n    ])\n\n    useEffect(() => {\n        if(midiConfig && midiConfig.values) {\n            const updateValueFromMidi = (midiValue: number) => {\n                const newValue = midiConfig.values?.indexOf(midiValue) || 0;\n                setStateValue(newValue);\n                if(onUpdate) onUpdate(newValue);\n            }\n\n            const subscriberId = cc.subscribe(updateValueFromMidi, midiConfig)\n            return function cleanup() {\n                cc.unsubscribe(midiConfig, subscriberId);\n            };\n        }\n    });\n\n    const ledOn: boolean[] = [];\n    for(let i = 0; i< (ledCount || 1); i++){\n        ledOn[i] = false;\n    }\n\n    if(radioButtonIndex !== undefined){\n        if(currentValue === radioButtonValueIndex) {\n          ledOn[0] = true;\n        }\n    } else {\n        if(ledOnIndex < ledOn.length ) {\n            // ledOnIndex -1 means all leds are off\n            if(ledOnIndex > -1){\n                ledOn[ledOnIndex] = true;\n            }\n        } else {\n            // light up all leds if there are more options than leds (minus off)\n            for(let i = 0; i< (ledCount || 1); i++){\n                ledOn[i] = true;\n            }\n        }\n    }\n\n\n    const {\n        buttonRadius,\n        buttonMode,\n        ledRadius,\n        labelPos,\n        ledPos,\n        ledLabels,\n    } = getRenderProps(props);\n\n    return (\n        <svg x={x} y={y} className=\"button\">\n            {buttonMode === 'push'\n                ? <RoundPushButtonBase buttonRadius={buttonRadius}\n                                       onClick={handleOnClick}\n                                       className={classNames('button-cap', { 'button-cap-led': ledButton, 'button-cap-led__on': ledButton && ledOn.length > 0 && ledOn[0] })}/>\n                : <RotaryPotBase onClick={handleOnClick} knobRadius={buttonRadius}/>\n            }\n            {label && <text\n              x={labelPos.x}\n              y={labelPos.y}\n              className=\"button-label\"\n              textAnchor={labelPos.textAnchor}\n              alignmentBaseline=\"middle\"\n            >{label}</text>}\n            {ledPos.map((position, index) => <React.Fragment key={index}>\n                <circle\n                    cx={position.x} cy={position.y} r={ledRadius} stroke=\"black\" fill=\"red\"\n                    className={classNames('button-led', { 'button-led__on': ledOn.length > index && ledOn[index] })}/>\n                {ledLabels[index] && <text\n                  x={position.labelX}\n                  y={position.y}\n                  className=\"button-led-label\"\n                  textAnchor={position.textAnchor}\n                  alignmentBaseline=\"middle\"\n                >{ledLabels[index]}</text>}\n            </React.Fragment>)}\n        </svg>\n    )\n}\n\nexport default RoundButtonBase","import React from 'react'\nimport RoundButtonBase, { Props } from './RoundButtonBase';\n\nconst RoundPushButton8 = (props: Props) => <RoundButtonBase buttonRadius={4} buttonMode=\"push\" {...props} />\n\nexport default RoundPushButton8","import React from 'react'\nimport RoundButtonBase, { Props } from './RoundButtonBase';\n\nconst RoundLedPushButton8 = (props: Props) => <RoundButtonBase buttonRadius={4} buttonMode=\"push\" ledButton {...props} />\n\nexport default RoundLedPushButton8","import React from 'react';\nimport './Header.scss';\n\ntype PositionAlign = 'center' | 'left' | 'right';\n\ninterface Props {\n  x: number,\n  y: number,\n  width: number,\n  align?: PositionAlign,\n  label: string,\n}\n\nconst getCenter = (x: number, y: number, width: number, align: PositionAlign) => {\n  switch(align){\n    case 'center':\n      return x;\n    case 'left':\n      return x + width / 2;\n    case 'right':\n      return x - width / 2;\n  }\n}\n\nconst Header = ({ x, y, width, align = 'left', label }: Props) => {\n\n  const center = getCenter(x, y, width, align);\n\n  return <>\n    <text\n      x={center}\n      y={y+5}\n      className=\"header-label\"\n      textAnchor=\"middle\"\n      alignmentBaseline=\"baseline\"\n    >{label}</text>\n    <line x1={center - width / 2} y1={y+7} x2={center + width / 2} y2={y+7} className=\"header-underline\" />\n  </>;\n};\n\n\n\nexport default Header;","import React from 'react';\nimport RotaryPot32 from '../pots/RotaryPot32';\nimport RotaryPot10 from '../pots/RotaryPot10';\nimport RoundPushButton8 from '../buttons/RoundPushButton8';\nimport RoundLedPushButton8 from '../buttons/RoundLedPushButton8';\nimport Header from '../misc/Header';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n  x: number,\n  y: number\n}\n\n\nconst dco1 = ({ x, y }: Props) => {\n\n  const topRow = y - 35;\n  const bottomRow1 = y + 40;\n  const bottomRow2 = bottomRow1 + 25;\n\n  const col1 = x - 39;\n  const col2 = x - 13;\n  const col3 = x + 13;\n  const col4 = x + 39;\n\n  return <>\n    <Header label=\"Oscillator 1\" x={x} y={topRow - 20} width={100} align=\"center\"/>\n    <RotaryPot32 x={x} y={y} ledMode=\"single\" label=\"Waveform\" position={0.8} midiConfig={midiConstants.DCO1.WAVEFORM}/>\n\n    <RotaryPot10 x={col1} y={topRow} ledMode=\"single\" label=\"Note\" position={0.5} midiConfig={midiConstants.DCO1.NOTE}/>\n    <RoundPushButton8 x={col2} y={topRow}\n                      ledPosition=\"right\" ledCount={2} ledLabels={['1 -> 2', '2 -> 1']}\n                      label=\"Sync\" labelPosition=\"bottom\"\n                      hasOff\n                      midiConfig={midiConstants.DCO1.SYNC}\n    />\n    <RotaryPot10 x={col4} y={topRow} ledMode=\"multi\" label=\"Super saw\" position={0.3} midiConfig={midiConstants.DCO1.SUPER_SAW}/>\n\n    <RoundPushButton8 x={col4} y={y+11}\n                      ledPosition=\"top\" ledCount={3} ledLabels={['DCO', 'WT', 'PCM']}\n                      label=\"Mode\" labelPosition=\"bottom\"\n                      midiConfig={midiConstants.DCO1.MODE}\n    />\n\n    <RoundPushButton8 x={col1} y={bottomRow1}\n                      ledPosition=\"top\" ledCount={2} ledLabels={['Sqr', 'Saw']}\n                      label=\"Sub wave\" labelPosition=\"bottom\"\n                      midiConfig={midiConstants.DCO1.SUB_WAVE}\n    />\n    <RotaryPot10 x={col2} y={bottomRow1} ledMode=\"multi\" label=\"Sub -1\" position={0.1} midiConfig={midiConstants.DCO1.SUB1}/>\n    <RotaryPot10 x={col3} y={bottomRow1} ledMode=\"multi\" label=\"Sub -2\" position={0.6} midiConfig={midiConstants.DCO1.SUB2}/>\n    <RotaryPot10 x={col4} y={bottomRow1} ledMode=\"single\" label=\"PW\" position={0.3} midiConfig={midiConstants.DCO1.PW}/>\n    <RoundLedPushButton8 x={col2} y={bottomRow2} label=\"Wheel\" labelPosition=\"bottom\" midiConfig={midiConstants.DCO1.WHEEL}/>\n    <RoundLedPushButton8 x={col3} y={bottomRow2} label=\"LFO\" labelPosition=\"bottom\" midiConfig={midiConstants.DCO1.LFO}/>\n    <RoundLedPushButton8 x={col4} y={bottomRow2} label=\"Kbd\" labelPosition=\"bottom\" midiConfig={midiConstants.DCO1.KBD}/>\n  </>;\n};\n\nexport default dco1;","import React from 'react';\nimport RotaryPot32 from '../pots/RotaryPot32';\nimport RotaryPot10 from '../pots/RotaryPot10';\nimport RoundPushButton8 from '../buttons/RoundPushButton8';\nimport Header from '../misc/Header';\nimport RoundLedPushButton8 from '../buttons/RoundLedPushButton8';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n  x: number,\n  y: number\n}\n\n\nconst dco2 = ({ x, y }: Props) => {\n  const topRow = y - 35;\n  const bottomRow1 = y + 40;\n  const bottomRow2 = bottomRow1 + 25;\n\n  const col1 = x - 39;\n  const col2 = x - 13;\n  const col3 = x + 13;\n  const col4 = x + 39;\n\n  return <>\n    <Header label=\"Oscillator 2\" x={x} y={topRow - 20} width={100} align=\"center\"/>\n    <RotaryPot32 x={x} y={y} ledMode=\"single\" label=\"Waveform\" position={0.8} midiConfig={midiConstants.DCO2.WAVEFORM}/>\n\n    <RotaryPot10 x={col1} y={topRow} ledMode=\"single\" label=\"Note\" position={0.5} midiConfig={midiConstants.DCO2.NOTE}/>\n    <RotaryPot10 x={col1} y={y} ledMode=\"single\" label=\"Detune\" position={0.5} midiConfig={midiConstants.DCO2.DETUNE}/>\n    <RotaryPot10 x={col4} y={topRow} ledMode=\"multi\" label=\"Super saw\" position={0.3} midiConfig={midiConstants.DCO2.SUPER_SAW}/>\n\n    <RoundPushButton8 x={col4} y={y+11}\n                      ledPosition=\"top\" ledCount={3} ledLabels={['DCO', 'WT', 'PCM']}\n                      label=\"Mode\" labelPosition=\"bottom\"\n                      midiConfig={midiConstants.DCO2.MODE}\n    />\n\n\n    <RoundPushButton8 x={col1} y={bottomRow1}\n                      ledPosition=\"top\" ledCount={2} ledLabels={['Sqr', 'Saw']}\n                      label=\"Sub wave\" labelPosition=\"bottom\"\n                      midiConfig={midiConstants.DCO2.SUB_WAVE}\n    />\n    <RotaryPot10 x={col2} y={bottomRow1} ledMode=\"multi\" label=\"Sub -1\" position={0.1} midiConfig={midiConstants.DCO2.SUB1}/>\n    <RotaryPot10 x={col3} y={bottomRow1} ledMode=\"multi\" label=\"Sub -2\" position={0.6} midiConfig={midiConstants.DCO2.SUB2}/>\n    <RotaryPot10 x={col4} y={bottomRow1} ledMode=\"single\" label=\"PW\" position={0.3} midiConfig={midiConstants.DCO2.PW}/>\n\n    <RoundLedPushButton8 x={col2} y={bottomRow2} label=\"Wheel\" labelPosition=\"bottom\" midiConfig={midiConstants.DCO2.WHEEL}/>\n    <RoundLedPushButton8 x={col3} y={bottomRow2} label=\"LFO\" labelPosition=\"bottom\" midiConfig={midiConstants.DCO2.LFO}/>\n    <RoundLedPushButton8 x={col4} y={bottomRow2} label=\"Kbd\" labelPosition=\"bottom\" midiConfig={midiConstants.DCO2.KBD}/>\n  </>;\n};\n\nexport default dco2;","import React from 'react';\nimport RotaryPot32 from '../pots/RotaryPot32';\nimport RotaryPot10 from '../pots/RotaryPot10';\nimport RoundPushButton8 from '../buttons/RoundPushButton8';\nimport Header from '../misc/Header';\nimport RoundLedPushButton8 from '../buttons/RoundLedPushButton8';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n  x: number,\n  y: number\n}\n\n\nconst vco = ({ x, y }: Props) => {\n  const topRow = y - 35;\n  const bottomRow1 = y + 40;\n  const bottomRow2 = bottomRow1 + 25;\n\n  const col1 = x - 39;\n  const col2 = x - 13;\n  const col3 = x + 13;\n  const col4 = x + 39;\n\n  return <>\n    <Header label=\"Oscillator 3\" x={x} y={topRow - 20} width={100} align=\"center\"/>\n    <RotaryPot32 x={x} y={y} ledMode=\"single\" label=\"Waveform\" position={0.8} midiConfig={midiConstants.VCO.WAVEFORM}/>\n\n    <RotaryPot10 x={col1} y={topRow} ledMode=\"single\" label=\"Note\" position={0.5} midiConfig={midiConstants.VCO.NOTE}/>\n    <RotaryPot10 x={col1} y={y} ledMode=\"single\" label=\"Detune\" position={0.5} midiConfig={midiConstants.VCO.DETUNE}/>\n\n    <RoundPushButton8 x={col2} y={topRow}\n                      ledPosition=\"right\" ledCount={3} ledLabels={['Hard', 'CEM Hard', 'CEM Soft']}\n                      label=\"Sync\" labelPosition=\"bottom\"\n                      hasOff\n                      midiConfig={midiConstants.VCO.SYNC}\n    />\n\n    <RotaryPot10 x={col1} y={bottomRow1} ledMode=\"multi\" label=\"Cross mod\" position={0.1} midiConfig={midiConstants.VCO.CROSS_MOD}/>\n    <RoundPushButton8 x={col2} y={bottomRow1}\n                      ledPosition=\"right\" ledCount={2} ledLabels={['Osc 1', 'Ext']}\n                      label=\"Source\" labelPosition=\"bottom\"\n                      midiConfig={midiConstants.VCO.CROSS_MOD_SRC}\n    />\n    <RotaryPot10 x={col4} y={bottomRow1} ledMode=\"single\" label=\"PW\" position={0.3} midiConfig={midiConstants.VCO.PW}/>\n\n    <RoundLedPushButton8 x={col1} y={bottomRow2} label=\"Ext CV\" labelPosition=\"bottom\" midiConfig={midiConstants.VCO.EXT_CV}/>\n    <RoundLedPushButton8 x={col2} y={bottomRow2} label=\"Wheel\" labelPosition=\"bottom\" midiConfig={midiConstants.VCO.WHEEL}/>\n    <RoundLedPushButton8 x={col3} y={bottomRow2} label=\"LFO\" labelPosition=\"bottom\" midiConfig={midiConstants.VCO.LFO}/>\n    <RoundLedPushButton8 x={col4} y={bottomRow2} label=\"Kbd\" labelPosition=\"bottom\" midiConfig={midiConstants.VCO.KBD}/>\n  </>;\n};\n\nexport default vco;","import React from 'react'\nimport RotaryPotWithLedRingBase, { Props } from './RotaryPotWithLedRingBase';\n\nconst RotaryPot17 = (props: Props) => <RotaryPotWithLedRingBase knobRadius={8.5} {...props} />\n\nexport default RotaryPot17","import React from 'react'\nimport RotaryPot17 from '../pots/RotaryPot17'\nimport Header from '../misc/Header'\nimport RoundPushButton8 from '../buttons/RoundPushButton8'\nimport midiConstants from '../../midi/controllers'\nimport { ControllerConfigCC } from '../../midi/types'\n\n\ninterface Props {\n    x: number,\n    y: number\n}\n\ninterface ChannelProps {\n    label: string,\n    x: number,\n    y: number\n    potControllerConfig: ControllerConfigCC,\n    buttonControllerConfig: ControllerConfigCC,\n}\n\n\nconst PreFilterMixerChannel = ({ x, y, label, buttonControllerConfig, potControllerConfig }: ChannelProps) => {\n    return <>\n        <RotaryPot17 ledMode=\"multi\" label={label} x={x} y={y} position={0.4} midiConfig={potControllerConfig}/>\n        <RoundPushButton8 x={x + 25} y={y + 3}\n                          ledPosition=\"top\" ledCount={2} midiConfig={buttonControllerConfig}\n        />\n    </>\n}\n\nconst PreFilterMixer = ({ x, y }: Props) => {\n    const offsetX = 20\n    const offsetY = 25\n    const rowDistance = 40\n    const colDistance = 60\n\n    const col1 = x - 2 + offsetX\n    const col2 = col1 + colDistance\n    const col3 = col1 + colDistance * 2\n\n    const row1 = y + 2 + offsetY\n    const row2 = row1 + rowDistance\n\n    return <>\n        <Header label=\"Source mix\" x={x} y={y} width={170}/>\n        <PreFilterMixerChannel x={col1} y={row1} label=\"Osc 1\" buttonControllerConfig={midiConstants.SOURCE_MIX.OUT_OSC1} potControllerConfig={midiConstants.SOURCE_MIX.LEVEL_OSC1}/>\n        <PreFilterMixerChannel x={col2} y={row1} label=\"Osc 2\" buttonControllerConfig={midiConstants.SOURCE_MIX.OUT_OSC2} potControllerConfig={midiConstants.SOURCE_MIX.LEVEL_OSC2}/>\n        <PreFilterMixerChannel x={col3} y={row1} label=\"Osc 3\" buttonControllerConfig={midiConstants.SOURCE_MIX.OUT_OSC3} potControllerConfig={midiConstants.SOURCE_MIX.LEVEL_OSC3}/>\n        <PreFilterMixerChannel x={col1} y={row2} label=\"Noise\" buttonControllerConfig={midiConstants.SOURCE_MIX.OUT_NOISE} potControllerConfig={midiConstants.SOURCE_MIX.LEVEL_NOISE}/>\n        <PreFilterMixerChannel x={col2} y={row2} label=\"Ring mod\" buttonControllerConfig={midiConstants.SOURCE_MIX.OUT_RING_MOD} potControllerConfig={midiConstants.SOURCE_MIX.LEVEL_RING_MOD}/>\n        <PreFilterMixerChannel x={col3} y={row2} label=\"Ext audio\" buttonControllerConfig={midiConstants.SOURCE_MIX.OUT_EXT_AUDIO} potControllerConfig={midiConstants.SOURCE_MIX.LEVEL_EXT_AUDIO}/>\n    </>\n}\n\n\nexport default PreFilterMixer","import React from 'react';\nimport RotaryPot17 from '../pots/RotaryPot17';\nimport Header from '../misc/Header';\nimport { LedMode, PotMode } from '../pots/RotaryPotWithLedRingBase';\nimport midiConstants from '../../midi/controllers'\nimport { ControllerConfigCC } from '../../midi/types'\n\n\ninterface Props {\n  x: number,\n  y: number\n}\n\ninterface ChannelProps {\n  label: string,\n  potMode?: PotMode,\n  ledMode?: LedMode,\n  midiConfig: ControllerConfigCC,\n  x: number,\n  y: number\n}\n\nconst rowDistance = 40;\n\nconst PostFilterMixerChannel = ({ x, y, label, potMode=\"normal\", ledMode=\"multi\", midiConfig}: ChannelProps) => {\n  return <>\n    <RotaryPot17 label={label} x={x} y={y} position={0.4} potMode={potMode} ledMode={ledMode} midiConfig={midiConfig}/>\n  </>;\n};\n\nconst PostFilterMixer = ({ x, y }: Props) => {\n  const offsetX = 20;\n  const offsetY = 27;\n  const offsetY2 = 195;\n  return <svg x={x} y={y}>\n    <Header label=\"Mix\" x={0} y={0} width={40}/>\n    <PostFilterMixerChannel x={offsetX} y={offsetY} label=\"LPF\" midiConfig={midiConstants.POST_MIX.LPF}/>\n    <PostFilterMixerChannel x={offsetX} y={offsetY + rowDistance} label=\"SVF\" midiConfig={midiConstants.POST_MIX.SVF}/>\n    <PostFilterMixerChannel x={offsetX} y={offsetY + rowDistance * 2} label=\"Sine 1\" midiConfig={midiConstants.POST_MIX.SINE1}/>\n    <PostFilterMixerChannel x={offsetX} y={offsetY + rowDistance * 3} label=\"Sine 2\" midiConfig={midiConstants.POST_MIX.SINE2}/>\n\n    <Header label=\"Voice out\" x={0} y={offsetY2-27} width={40}/>\n    <PostFilterMixerChannel x={offsetX} y={offsetY2} label=\"Pan\" potMode=\"pan\" ledMode=\"single\" midiConfig={midiConstants.VOICE_OUT.PAN}/>\n    <PostFilterMixerChannel x={offsetX} y={offsetY2 + rowDistance} label=\"Amt\" midiConfig={midiConstants.VOICE_OUT.AMOUNT}/>\n    <PostFilterMixerChannel x={offsetX} y={offsetY2 + rowDistance * 2} label=\"FX1 send\" midiConfig={midiConstants.VOICE_OUT.FX1_SEND}/>\n    <PostFilterMixerChannel x={offsetX} y={offsetY2 + rowDistance * 3} label=\"FX2 send\" midiConfig={midiConstants.VOICE_OUT.FX2_SEND}/>\n  </svg>;\n};\n\n\n\nexport default PostFilterMixer;","import React from 'react';\nimport RoundPushButton8 from '../buttons/RoundPushButton8';\nimport Header from '../misc/Header';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n  x: number,\n  y: number\n}\n\nconst Noise = ({ x, y }: Props) => {\n  return <>\n    <Header label=\"Noise\" x={x} y={y} width={35}/>\n    <RoundPushButton8 x={x+15} y={y+38}\n                      ledPosition=\"top\" ledCount={3} ledLabels={['White', 'Pink', 'Red']}\n                      label=\"Colour\" labelPosition=\"bottom\"\n                      midiConfig={midiConstants.NOISE.COLOUR}\n    />\n  </>;\n};\n\n\n\nexport default Noise;","import React from 'react';\nimport RoundPushButton8 from '../buttons/RoundPushButton8';\nimport Header from '../misc/Header';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n  x: number,\n  y: number\n}\n\nconst Ringmod = ({ x, y }: Props) => {\n  return <>\n    <Header label=\"Ring mod\" x={x} y={y} width={30}/>\n    <RoundPushButton8 x={x+13} y={y+38}\n                      ledPosition=\"top\"  ledCount={2} ledLabels={['1->2', 'Ext->2']}\n                      label=\"Sources\" labelPosition=\"bottom\"\n                      midiConfig={midiConstants.RING_MOD.SOURCE}\n    />\n  </>;\n};\n\n\n\nexport default Ringmod;","import React from 'react';\nimport RotaryPot17 from '../pots/RotaryPot17';\nimport Header from '../misc/Header';\nimport RoundPushButton8 from '../buttons/RoundPushButton8';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n    x: number,\n    y: number\n}\n\nconst Distortion = ({ x, y }: Props) => {\n\n    const row1 = y;\n    const row2 = row1+30;\n\n    const col1 = x + 7;\n    const col2 = col1 + 25;\n    const col3 = col2 + 25;\n    const col4 = col3 + 10;\n    const col5 = col4 + 25;\n    const col6 = col5 + 25;\n\n    return <>\n        <Header label=\"Distortion\" x={x} y={row1} width={125}/>\n        <RoundPushButton8 x={col1} y={row2+8} ledPosition=\"top\" ledCount={2}  label=\"In\" labelPosition=\"bottom\" midiConfig={midiConstants.DISTORTION.IN}/>\n        <RotaryPot17 ledMode=\"multi\" label=\"Drive\" x={col2} y={row2} position={0.4} midiConfig={midiConstants.DISTORTION.DRIVE}/>\n        <RoundPushButton8 x={col3} y={row2+8} ledCount={2} ledPosition=\"top\" ledLabels={['Soft', 'Hard']} label=\"Clip\" labelPosition=\"bottom\" midiConfig={midiConstants.DISTORTION.CLIP}/>\n        <RotaryPot17 ledMode=\"multi\" label=\"Level\" x={col5} y={row2} position={0.4} midiConfig={midiConstants.DISTORTION.LEVEL}/>\n        <RoundPushButton8 x={col6} y={row2+8} ledPosition=\"top\" ledCount={2} label=\"Out\" labelPosition=\"bottom\" midiConfig={midiConstants.DISTORTION.OUT}/>\n    </>;\n};\n\nexport default Distortion;","import React from 'react'\nimport RotaryPotWithLedRingBase, { Props } from './RotaryPotWithLedRingBase';\n\nconst RotaryPot40 = (props: Props) => <RotaryPotWithLedRingBase knobRadius={20} ledCount={55} {...props} />\nexport default RotaryPot40","import React from 'react';\nimport RotaryPot40 from '../pots/RotaryPot40';\nimport RotaryPot10 from '../pots/RotaryPot10';\nimport RotaryPot17 from '../pots/RotaryPot17';\nimport RoundPushButton8 from '../buttons/RoundPushButton8';\nimport RoundLedPushButton8 from '../buttons/RoundLedPushButton8';\nimport Header from '../misc/Header';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n    x: number,\n    y: number\n}\n\n\nconst LowPassFilter = ({ x, y }: Props) => {\n    const topRow = y - 50;\n    const bottomRow2 = y + 45;\n\n    const col1 = x - 39;\n    const col2 = x - 13;\n    const col3 = x + 13;\n    const col4 = x + 39;\n\n    return <>\n        <Header label=\"Low pass filter\" x={x} y={topRow - 27} width={110} align=\"center\"/>\n        <RotaryPot40 x={x} y={y} ledMode=\"single\" label=\"Cutoff\" position={0.8} midiConfig={midiConstants.LPF.CUTOFF}/>\n        <RotaryPot17 x={col1} y={topRow} ledMode=\"multi\" label=\"Input\" position={0.5} midiConfig={midiConstants.LPF.INPUT}/>\n\n        <RotaryPot17 x={x} y={topRow} ledMode=\"multi\" label=\"Drive\" position={0.5} midiConfig={midiConstants.LPF.DRIVE}/>\n        <RotaryPot17 x={col4} y={topRow} ledMode=\"multi\" label=\"Resonance\" position={0.3} midiConfig={midiConstants.LPF.RESONANCE}/>\n\n        <RoundPushButton8 x={col4} y={y + 10} ledPosition=\"top\" ledCount={2} ledLabels={['12dB', '24dB']} label=\"Slope\" labelPosition=\"bottom\" midiConfig={midiConstants.LPF.SLOPE}/>\n\n        <RoundLedPushButton8 x={col1} y={y -10} label=\"Ext CV\" labelPosition=\"bottom\" midiConfig={midiConstants.LPF.EXT_CV}/>\n        <RoundLedPushButton8 x={col1} y={y + 10} label=\"Wheel\" labelPosition=\"bottom\" midiConfig={midiConstants.LPF.WHEEL}/>\n\n\n        <RotaryPot10 x={col1} y={bottomRow2} ledMode=\"multi\" label=\"FM amt\" position={0.1} midiConfig={midiConstants.LPF.FM_AMT}/>\n        <RotaryPot10 x={col2} y={bottomRow2} ledMode=\"multi\" label=\"Env amt\" position={0.1} midiConfig={midiConstants.LPF.ENV_AMT}/>\n        <RotaryPot10 x={col3} y={bottomRow2} ledMode=\"multi\" label=\"LFO amt\" position={0.1} midiConfig={midiConstants.LPF.LFO_AMT}/>\n        <RotaryPot10 x={col4} y={bottomRow2} ledMode=\"multi\" label=\"Kbd amt\" position={0.1} midiConfig={midiConstants.LPF.KBD_AMT}/>\n    </>;\n};\n\nexport default LowPassFilter;","import React from 'react';\nimport './Line.scss';\n\ntype PositionAlign = 'center' | 'left' | 'right';\n\ninterface Props {\n  x: number,\n  y: number,\n  width: number,\n  align?: PositionAlign,\n}\n\nconst getCenter = (x: number, y: number, width: number, align: PositionAlign) => {\n  switch(align){\n    case 'center':\n      return x;\n    case 'left':\n      return x + width / 2;\n    case 'right':\n      return x - width / 2;\n  }\n}\n\nconst Line = ({ x, y, width, align = 'left' }: Props) => {\n\n  const center = getCenter(x, y, width, align);\n\n  return <>\n    <line x1={center - width / 2} y1={y+7} x2={center + width / 2} y2={y+7} className=\"line\" />\n  </>;\n};\n\n\n\nexport default Line;","import React from 'react'\nimport RoundButtonBase, { Props } from './RoundButtonBase';\n\nconst RoundRotaryButton17 = (props: Props) => <RoundButtonBase buttonRadius={8.5} buttonMode=\"rotate\" {...props} />\n\nexport default RoundRotaryButton17","import React from 'react';\nimport RotaryPot40 from '../pots/RotaryPot40';\nimport RotaryPot10 from '../pots/RotaryPot10';\nimport RotaryPot17 from '../pots/RotaryPot17';\nimport RoundPushButton8 from '../buttons/RoundPushButton8';\nimport RoundLedPushButton8 from '../buttons/RoundLedPushButton8';\nimport Header from '../misc/Header';\nimport HorizontalLine from '../misc/HorizontalLine';\nimport RoundRotaryButton17 from '../buttons/RoundRotaryButton17';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n    x: number,\n    y: number\n}\n\n\nconst StateVariableFilter = ({ x, y }: Props) => {\n    const topRow = y - 50;\n    const bottomRow1 = y + 45;\n    const bottomRow2 = y + 75;\n\n    const col1 = x - 39;\n    const col2 = x - 13;\n    const col3 = x + 13;\n    const col4 = x + 39;\n\n    // modes:\n    /*\n    2p LP\n    2p HP\n    4P LP\n    4p HP\n    2p BP\n    4p BP\n    2p LP + 2p BP\n    2p HP + 2p BP\n    Notch\n    Notch + LP\n     */\n\n    return <>\n        <HorizontalLine x={x} y={topRow - 62} width={110} align=\"center\"/>\n        <RoundLedPushButton8 x={col2} y={topRow -42}\n                          label=\"Link cutoff\" labelPosition=\"bottom\"\n                          midiConfig={midiConstants.FILTERS.LINK_CUTOFF}\n        />\n\n        <RoundPushButton8 x={col3} y={topRow - 42}\n                          ledPosition=\"right\"\n                          ledCount={2}\n                          ledLabels={['Series', 'Parallel']} label=\"Routing\" labelPosition=\"bottom\"\n                          midiConfig={midiConstants.FILTERS.ROUTING}\n        />\n\n        <Header label=\"State variable filter\" x={x} y={topRow - 27} width={110} align=\"center\"/>\n        <RotaryPot40 x={x} y={y} ledMode=\"single\" label=\"Cutoff\" position={0.8} midiConfig={midiConstants.SVF.CUTOFF}/>\n\n        <RotaryPot17 x={col1} y={topRow} ledMode=\"multi\" label=\"Input\" position={0.5} midiConfig={midiConstants.SVF.INPUT}/>\n        <RotaryPot17 x={x} y={topRow} ledMode=\"multi\" label=\"Drive\" position={0.5} midiConfig={midiConstants.SVF.DRIVE}/>\n        <RotaryPot17 x={col4} y={topRow} ledMode=\"multi\" label=\"Resonance\" position={0.3} midiConfig={midiConstants.SVF.RESONANCE}/>\n\n        <RoundLedPushButton8 x={col1} y={y -10} label=\"Ext CV\" labelPosition=\"bottom\" midiConfig={midiConstants.SVF.EXT_CV}/>\n        <RoundLedPushButton8 x={col1} y={y + 10} label=\"Wheel\" labelPosition=\"bottom\" midiConfig={midiConstants.SVF.WHEEL}/>\n\n        <RoundRotaryButton17 x={x} y={bottomRow1}\n                             label=\"Slope\" labelPosition=\"bottom\"\n                             ledPosition=\"sides\" ledCount={10}\n                             ledLabels={[\n                                 '12dB LP', '24dB LP', '12dB BP', '24dB BP', 'LP + BP',\n                                 '12dB HP', '24dB HP', 'HP + BP', 'Notch', 'Notch + LP'\n                             ]}\n                             midiConfig={midiConstants.SVF.SLOPE}\n        />\n\n        <RotaryPot10 x={col1} y={bottomRow2} ledMode=\"multi\" label=\"FM amt\" position={0.1} midiConfig={midiConstants.SVF.FM_AMT}/>\n        <RotaryPot10 x={col2} y={bottomRow2} ledMode=\"multi\" label=\"Env amt\" position={0.1} midiConfig={midiConstants.SVF.ENV_AMT}/>\n        <RotaryPot10 x={col3} y={bottomRow2} ledMode=\"multi\" label=\"LFO amt\" position={0.1} midiConfig={midiConstants.SVF.LFO_AMT}/>\n        <RotaryPot10 x={col4} y={bottomRow2} ledMode=\"multi\" label=\"Kbd amt\" position={0.1} midiConfig={midiConstants.SVF.KBD_AMT}/>\n    </>;\n};\n\nexport default StateVariableFilter;","import React from 'react'\nimport RotaryPot17 from '../pots/RotaryPot17'\nimport RotaryPot10 from '../pots/RotaryPot10'\nimport RoundLedPushButton8 from '../buttons/RoundLedPushButton8'\nimport RoundPushButton8 from '../buttons/RoundPushButton8'\nimport Header from '../misc/Header'\nimport { selectEnv3Id, selectEnvelope } from '../../synthcore/modules/env/envReducer'\nimport { StageId } from '../../synthcore/modules/env/types'\nimport { useAppSelector } from '../../synthcore/hooks'\nimport { EnvControllerId } from '../../synthcore/modules/env/types'\nimport { ControllerGroupIds } from '../../synthcore/types'\n\ninterface Props {\n    x: number,\n    y: number\n    label: string,\n    envId: number,\n    showSelect?: boolean,\n}\n\nconst ctrlGroup = ControllerGroupIds.ENV\n\nconst Envelope = ({ x, y, label, showSelect = false, envId }: Props) => {\n    const firstPotX = x + 25\n    const topRowY = y + 20\n    const potY = y + 45\n    const potDistance = 40\n\n    const env = useAppSelector(selectEnvelope(envId))\n    const env3Id = useAppSelector(selectEnv3Id)\n\n    const levelS = env.stages[StageId.SUSTAIN].level\n    const levelD2 = env.stages[StageId.DECAY2].level\n    const levelR2 = env.stages[StageId.RELEASE2].level\n    const timeDly = env.stages[StageId.DELAY].time\n    const timeA = env.stages[StageId.ATTACK].time\n    const timeD1 = env.stages[StageId.DECAY1].time\n    const timeD2 = env.stages[StageId.DECAY2].time\n    const timeR1 = env.stages[StageId.RELEASE1].time\n    const timeR2 = env.stages[StageId.RELEASE2].time\n\n    return <>\n        <Header align=\"left\" label={label} x={x} y={y} width={255}/>\n        <RotaryPot17 ledMode=\"single\" label=\"Attack\" x={firstPotX} y={potY}\n                     ctrlGroup={ctrlGroup}\n                     ctrlId={EnvControllerId.ENV_ATTACK}\n                     ctrlIndex={envId}\n                     storePosition={timeA}\n        />\n        <RotaryPot17 ledMode=\"single\" label=\"Decay 1\" x={firstPotX + potDistance} y={potY}\n                     ctrlGroup={ctrlGroup}\n                     ctrlId={EnvControllerId.ENV_DECAY1}\n                     ctrlIndex={envId}\n                     storePosition={timeD1}\n                     disabled={!env.stages[StageId.DECAY1].enabled}\n        />\n        <RotaryPot17 ledMode=\"single\" label=\"Decay 2\" x={firstPotX + potDistance * 2} y={potY}\n                     ctrlGroup={ctrlGroup}\n                     ctrlId={EnvControllerId.ENV_DECAY2}\n                     ctrlIndex={envId}\n                     storePosition={timeD2}\n                     disabled={!env.stages[StageId.DECAY2].enabled}\n        />\n        <RotaryPot17 ledMode=\"multi\" label=\"Sustain\" x={firstPotX + potDistance * 3} y={potY}\n                     ctrlGroup={ctrlGroup}\n                     ctrlId={EnvControllerId.ENV_SUSTAIN}\n                     ctrlIndex={envId}\n                     potMode={env.bipolar ? 'pan' : 'normal'}\n                     storePosition={env.bipolar ? (levelS + 1) / 2 : levelS}\n                     disabled={!env.stages[StageId.SUSTAIN].enabled}\n        />\n        <RotaryPot17 ledMode=\"single\" label=\"Release 1\" x={firstPotX + potDistance * 4} y={potY}\n                     ctrlGroup={ctrlGroup}\n                     ctrlId={EnvControllerId.ENV_RELEASE1}\n                     ctrlIndex={envId}\n                     storePosition={timeR1}\n                     disabled={!env.stages[StageId.RELEASE1].enabled}\n\n        />\n        <RotaryPot17 ledMode=\"single\" label=\"Release 2\" x={firstPotX + potDistance * 5} y={potY}\n                     ctrlGroup={ctrlGroup}\n                     ctrlId={EnvControllerId.ENV_RELEASE2}\n                     ctrlIndex={envId}\n                     storePosition={timeR2}\n        />\n\n        {showSelect && <RoundPushButton8\n          ledPosition=\"right\"\n          ledCount={3}\n          ledLabels={['3', '4', '5']}\n          label=\"Env sel\" x={firstPotX - potDistance * 0.5} y={topRowY} labelPosition=\"bottom\"\n          ctrlGroup={ctrlGroup}\n          ctrlId={EnvControllerId.ENV_SELECT_ENV3ID}\n          ctrlIndex={envId}\n          storeValue={env3Id -2}\n        />}\n        <RotaryPot10 ledMode=\"single\" label=\"Delay\" x={firstPotX + potDistance * 0.5} y={topRowY}\n                     ctrlGroup={ctrlGroup}\n                     ctrlId={EnvControllerId.ENV_DELAY}\n                     ctrlIndex={envId}\n                     storePosition={timeDly}\n                     disabled={!env.stages[StageId.DELAY].enabled}\n        />\n        <RotaryPot10 ledMode=\"multi\" label=\"D2 Level\" x={firstPotX + potDistance * 1.5} y={topRowY}\n                     ctrlGroup={ctrlGroup}\n                     ctrlId={EnvControllerId.ENV_D2_LEVEL}\n                     ctrlIndex={envId}\n                     potMode={env.bipolar ? 'pan' : 'normal'}\n                     storePosition={env.bipolar ? (levelD2 + 1) / 2 : levelD2}\n                     disabled={!env.stages[StageId.DECAY2].enabled}\n        />\n        <RoundLedPushButton8\n            label=\"Invert\" x={firstPotX + potDistance * 2.5} y={topRowY}\n            labelPosition=\"bottom\"\n            ctrlGroup={ctrlGroup}\n            ctrlId={EnvControllerId.ENV_INVERT}\n            ctrlIndex={envId}\n            storeValue={env.invert ? 1 : 0}\n        />\n        <RoundLedPushButton8 label=\"Loop\" x={firstPotX + potDistance * 3.5} y={topRowY} labelPosition=\"bottom\"\n                             ctrlGroup={ctrlGroup}\n                             ctrlId={EnvControllerId.ENV_LOOP}\n                             ctrlIndex={envId}\n                             storeValue={env.loopEnabled ? 1 : 0}\n        />\n        <RotaryPot10 ledMode=\"multi\" label=\"R2 Level\" x={firstPotX + potDistance * 4.5} y={topRowY}\n                     ctrlGroup={ctrlGroup}\n                     ctrlId={EnvControllerId.ENV_R2_LEVEL}\n                     ctrlIndex={envId}\n                     potMode={env.bipolar ? 'pan' : 'normal'}\n                     storePosition={env.bipolar ? (levelR2 + 1) / 2 : levelR2}\n        />\n        <RoundPushButton8 label=\"Trigger\" x={firstPotX + potDistance * 5.5} y={topRowY} labelPosition=\"bottom\"\n                          ctrlGroup={ctrlGroup}\n                          ctrlId={EnvControllerId.ENV_TRIGGER}\n                          ctrlIndex={envId}\n        />\n    </>\n}\n\n\nexport default Envelope","import React from 'react'\nimport RotaryPot17 from '../pots/RotaryPot17'\nimport RoundLedPushButton8 from '../buttons/RoundLedPushButton8'\nimport RoundPushButton8 from '../buttons/RoundPushButton8'\nimport Header from '../misc/Header'\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n    x: number,\n    y: number\n}\n\nconst LFO = ({ x, y }: Props) => {\n    const potDistance = 40\n    const buttonCol = 10\n    const firstPotCol = buttonCol + 35\n    const buttonCol2 = firstPotCol + potDistance\n    const buttonCol3 = buttonCol2 + 20\n    const buttonCol4 = buttonCol3 + 20\n    const potRow1 = 27\n    const potRow2 = potRow1 + 40\n\n    const buttonRowSpacing = 17\n    const button1Row = 21\n    const button2Row = button1Row + buttonRowSpacing\n    const button3Row = button2Row + buttonRowSpacing\n    const button4Row = button3Row + buttonRowSpacing\n\n    return <svg x={x} y={y}>\n        <Header align=\"left\" label=\"LFOs\" x={0} y={0} width={145}/>\n        <RoundLedPushButton8 label=\"1\" x={buttonCol} y={button1Row} labelPosition=\"right\" radioButtonIndex={0} midiConfig={midiConstants.LFOS.LFO}/>\n        <RoundLedPushButton8 label=\"2\" x={buttonCol} y={button2Row} labelPosition=\"right\" radioButtonIndex={1} midiConfig={midiConstants.LFOS.LFO}/>\n        <RoundLedPushButton8 label=\"3\" x={buttonCol} y={button3Row} labelPosition=\"right\" radioButtonIndex={2} midiConfig={midiConstants.LFOS.LFO}/>\n        <RoundLedPushButton8 label=\"4\" x={buttonCol} y={button4Row} labelPosition=\"right\" radioButtonIndex={3} midiConfig={midiConstants.LFOS.LFO}/>\n\n        <RotaryPot17 ledMode=\"single\" label=\"Rate\" x={firstPotCol} y={potRow1} position={0.4} midiConfig={midiConstants.LFOS.RATE}/>\n        <RotaryPot17 ledMode=\"single\" label=\"Depth\" x={firstPotCol + potDistance} y={potRow1} position={0.1} midiConfig={midiConstants.LFOS.DEPTH}/>\n\n        <RoundPushButton8 x={firstPotCol + potDistance + 30} y={potRow1}\n                          label=\"Shape\" labelPosition=\"bottom\"\n                          ledPosition=\"right\" ledCount={5}\n                          ledLabels={['Saw', 'Tri', 'Sqr', 'Sin', 'S & H',]}\n                          midiConfig={midiConstants.LFOS.SHAPE}\n        />\n        <RotaryPot17 ledMode=\"single\" label=\"Delay\" x={firstPotCol} y={potRow2} position={0.4} midiConfig={midiConstants.LFOS.DELAY}/>\n        <RoundLedPushButton8 label=\"Sync\" x={buttonCol2} y={potRow2} labelPosition=\"bottom\" midiConfig={midiConstants.LFOS.SYNC}/>\n        <RoundLedPushButton8 label=\"Reset\" x={buttonCol3} y={potRow2} labelPosition=\"bottom\" midiConfig={midiConstants.LFOS.RESET}/>\n        <RoundLedPushButton8 label=\"Once\" x={buttonCol4} y={potRow2} labelPosition=\"bottom\" midiConfig={midiConstants.LFOS.ONCE}/>\n    </svg>\n}\n\nexport default LFO","import RotaryPotBase from './RotaryPotBase'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { ControllerConfigCC } from '../../midi/types'\nimport { cc } from '../../midi/midibus'\nimport { increment } from '../../synthcore/modules/ui/uiReducer'\nimport { useAppDispatch } from '../../synthcore/hooks'\nimport { ControllerGroupIds } from '../../synthcore/types'\nimport './RotaryPot.scss'\n\nexport interface Props {\n    x: number,\n    y: number,\n    label?: string,\n    midiConfig?: ControllerConfigCC,\n    ctrlGroup?: ControllerGroupIds;\n    ctrlId?: number;\n    ctrlIndex?: number\n    resolution?: number\n}\n\ninterface Config {\n    knobRadius: number;\n}\n\nconst RotaryPotWOLeds = (props: Props & Config) => {\n    const { x, y, label, knobRadius, midiConfig, ctrlGroup, ctrlId, ctrlIndex, resolution } = props\n    const labelY = knobRadius + 5\n\n    const [statePosition, setStatePosition] = useState(0);\n    const localControl = ctrlGroup === null && ctrlId === null && ctrlIndex === null\n\n    const dispatch = useAppDispatch()\n\n    const onClick = useCallback(() => {\n        if(midiConfig) {\n            cc.send(midiConfig, 0);\n        }\n    }, [midiConfig])\n\n    // TODO: Remove once all functions go through redux store. Until then, pots without connection will send and receive midi\n    // themselves.\n    const sendMidi = useCallback((position: number) => {\n        if(midiConfig){\n            cc.send(midiConfig, Math.round(127 * position));\n        }\n    }, [midiConfig]);\n\n    const localIncrement = useCallback((steps: number, stepSize: number) => {\n        const newPosition = statePosition + steps * stepSize;\n        if(newPosition < 0){\n            if(statePosition > 0){\n                sendMidi(0);\n            }\n        } else if(newPosition > 1){\n            if(statePosition < 1) {\n                sendMidi(1);\n            }\n        } else if(newPosition !== statePosition){\n            sendMidi(newPosition);\n        }\n    }, [sendMidi, statePosition])\n\n    const onIncrement = useCallback((steps: number, stepSize: number) => {\n        if(ctrlId !== undefined && ctrlGroup !== undefined) {\n            dispatch(increment({ ctrlGroup, ctrlId, value: steps * stepSize, ctrlIndex }))\n        }\n    }, [ctrlGroup, ctrlId, ctrlIndex, dispatch])\n\n    useEffect(() => {\n        if(midiConfig) {\n            const updateValueFromMidi = (midiValue: number) => {\n                setStatePosition(midiValue / 127);\n            }\n\n            const subscriberId = cc.subscribe(updateValueFromMidi, midiConfig)\n            return function cleanup() {\n                cc.unsubscribe(midiConfig, subscriberId);\n            };\n        }\n    });\n\n    return <svg x={x} y={y} className=\"pot\">\n        <RotaryPotBase\n            knobRadius={knobRadius}\n            onClick={onClick}\n            onIncrement={localControl ? localIncrement : onIncrement}\n            resolution={resolution}\n        />\n        {label && <text x={0} y={labelY} className=\"pot-label\" textAnchor=\"middle\">{label}</text>}\n    </svg>\n}\n\nexport default RotaryPotWOLeds","import React from 'react'\nimport RotaryPotWOLeds, { Props }  from './RotaryPotWOLeds';\n\nconst RotaryPotWOLeds10 = (props: Props) => <RotaryPotWOLeds knobRadius={5} {...props} />\nexport default RotaryPotWOLeds10","import React from 'react';\nimport './Display.scss';\n\n\ninterface Props {\n  x: number,\n  y: number,\n  height: number,\n  width: number,\n}\n\nconst Display = React.forwardRef<SVGRectElement, Props>(({ x, y, height, width }, ref) => {\n\n  return <rect\n      ref={ref}\n      x={x}\n      y={y}\n      height={height}\n      width={width}\n      className=\"display\"\n    />;\n});\n\n\n\nexport default Display;","import React from 'react';\nimport RotaryPotWOLeds10 from '../pots/RotaryPotWOLeds10';\nimport Display from '../misc/Display';\nimport RoundLedPushButton8 from '../buttons/RoundLedPushButton8';\nimport RoundPushButton8 from '../buttons/RoundPushButton8';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n  x: number,\n  y: number\n}\n\n\nconst DigitalFX = ({ x, y }: Props) => {\n\n  const displayHeight = 40;\n  const displayWidth = 80;\n\n  const row1 = y + 20;\n\n  const displayX = x + 20;\n  const displayY = row1 + 10;\n\n\n  const row4 = row1 + displayHeight + 20;\n\n  const displayCenterY = displayY + displayHeight / 2;\n  const row2left = displayCenterY - 15;\n  const row3left = displayCenterY + 15;\n  const row1right = displayCenterY - 20;\n  const row4right = displayCenterY + 20;\n\n  const knobSpacing = 25;\n  const col1 = x+5;\n  const col2 = displayX + displayWidth / 2 - knobSpacing;\n  const col3 = displayX + displayWidth / 2;\n  const col4 = displayX + displayWidth / 2 + knobSpacing;\n  const col5 = displayX + displayWidth + 15\n\n  return <>\n    <RoundPushButton8 x={col1} y={row2left} label=\"Source\" ledCount={2} ledLabels={['FX1', 'FX1']} labelPosition=\"bottom\" ledPosition=\"top\" midiConfig={midiConstants.DSP1.SOURCE}/>\n    <RoundPushButton8 x={col1} y={row3left} label=\"Source\" ledCount={2} ledLabels={['FX2', 'FX2']} labelPosition=\"top\" ledPosition=\"bottom\" midiConfig={midiConstants.DSP2.SOURCE}/>\n\n    <RotaryPotWOLeds10 x={col2} y={row1} midiConfig={midiConstants.DSP1.POT1}/>\n    <RotaryPotWOLeds10 x={col3} y={row1} midiConfig={midiConstants.DSP1.POT2}/>\n    <RotaryPotWOLeds10 x={col4} y={row1} midiConfig={midiConstants.DSP1.POT3}/>\n\n    <Display x={displayX} y={displayY} width={displayWidth} height={displayHeight}/>\n\n    <RotaryPotWOLeds10 x={col2} y={row4} midiConfig={midiConstants.DSP2.POT1}/>\n    <RotaryPotWOLeds10 x={col3} y={row4} midiConfig={midiConstants.DSP2.POT2}/>\n    <RotaryPotWOLeds10 x={col4} y={row4} midiConfig={midiConstants.DSP2.POT3}/>\n\n    <RotaryPotWOLeds10 x={col5} y={row1right} label=\"Effect\" midiConfig={midiConstants.DSP1.EFFECT}/>\n    <RoundLedPushButton8 x={col5} y={displayCenterY} label=\"Chain\" labelPosition=\"bottom\" midiConfig={midiConstants.DSP2.CHAIN}/>\n    <RotaryPotWOLeds10 x={col5} y={row4right} label=\"Effect\" midiConfig={midiConstants.DSP2.EFFECT}/>\n  </>;\n};\n\nexport default DigitalFX;","import React from 'react';\nimport RotaryPot17 from '../pots/RotaryPot17';\nimport Header from '../misc/Header';\nimport { PotMode } from '../pots/RotaryPotWithLedRingBase';\nimport midiConstants from '../../midi/controllers'\nimport { ControllerConfigCC } from '../../midi/types'\n\ninterface Props {\n  x: number,\n  y: number\n}\n\ninterface ChannelProps {\n  label: string,\n  potMode?: PotMode,\n  x: number,\n  y: number,\n  midiConfig: ControllerConfigCC,\n}\n\nconst rowDistance = 40;\nconst colDistance = 40;\n\nconst OutputMixerChannel = ({ x, y, label, potMode=\"normal\", midiConfig }: ChannelProps) => {\n  return <>\n    <RotaryPot17 ledMode=\"multi\" label={label} x={x} y={y} position={0.4} potMode={potMode} midiConfig={midiConfig}/>\n  </>;\n};\n\nconst OutputMixer = ({ x, y }: Props) => {\n  const offsetX = 20;\n  const offsetX2 = 195;\n  const offsetY = 25;\n  return <svg x={x} y={y}>\n    <Header label=\"FX mix\" x={0} y={ + offsetY + rowDistance * 4 - 27} width={40}/>\n    <OutputMixerChannel x={offsetX} y={offsetY} label=\"DSP 1\" midiConfig={midiConstants.FX_MIX.LEVEL_DSP1}/>\n    <OutputMixerChannel x={offsetX + colDistance} y={offsetY} label=\"DSP 2\" midiConfig={midiConstants.FX_MIX.LEVEL_DSP2}/>\n    <OutputMixerChannel x={offsetX + colDistance * 2} y={offsetY} label=\"Chorus\" midiConfig={midiConstants.FX_MIX.LEVEL_CHORUS}/>\n    <OutputMixerChannel x={offsetX + colDistance * 3} y={offsetY} label=\"Bit crusher\" midiConfig={midiConstants.FX_MIX.LEVEL_BIT_CRUSHER}/>\n\n    <OutputMixerChannel x={offsetX2} y={offsetY} potMode=\"spread\" label=\"Spread\" midiConfig={midiConstants.OUTPUT.SPREAD}/>\n    <OutputMixerChannel x={offsetX2 + colDistance} y={offsetY} label=\"Volume\" midiConfig={midiConstants.OUTPUT.VOLUME}/>\n    <OutputMixerChannel x={offsetX2 + colDistance} y={offsetY - 40} label=\"Headphones\" midiConfig={midiConstants.OUTPUT.HEADPHONES}/>\n\n  </svg>;\n};\n\n\n\nexport default OutputMixer;","import React from 'react';\nimport RotaryPot10 from '../pots/RotaryPot10';\nimport Header from '../misc/Header';\nimport RoundPushButton8 from '../buttons/RoundPushButton8';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n    x: number,\n    y: number\n}\n\nconst Chorus = ({ x, y }: Props) => {\n\n    const row1 = 0;\n    const row2 = 20;\n    const row3 = 30;\n    const col1 = 10;\n    const col2 = col1 + 25;\n    const col3 = col2 + 30;\n    const col4 = col3 + 20;\n\n\n    return <svg x={x} y={y}>\n        <Header label=\"Chorus\" x={25} y={row1} width={50}/>\n        <RoundPushButton8 x={col1} y={row3} ledCount={2} ledPosition=\"top\" ledLabels={['FX1', 'FX2']} midiConfig={midiConstants.CHORUS.SOURCE}/>\n        <RotaryPot10 ledMode=\"single\" label=\"Rate\" x={col2} y={row2} position={0.4} midiConfig={midiConstants.CHORUS.RATE}/>\n        <RotaryPot10 ledMode=\"single\" label=\"Depth\" x={col3} y={row2} position={0.4} midiConfig={midiConstants.CHORUS.DEPTH}/>\n        <RoundPushButton8 x={col4} y={row3} ledCount={2} ledPosition=\"top\" ledLabels={['Chorus', 'Vibrato']}  midiConfig={midiConstants.CHORUS.MODE}/>\n    </svg>;\n};\n\nexport default Chorus;","import React from 'react';\nimport RotaryPot10 from '../pots/RotaryPot10';\nimport Header from '../misc/Header';\nimport RoundPushButton8 from '../buttons/RoundPushButton8';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n    x: number,\n    y: number\n}\n\nconst BitCrusher = ({ x, y }: Props) => {\n\n    const row1 = 10;\n    const row2 = 30;\n    const row3 = 40;\n    const col1 = 10;\n    const col2 = col1 + 25;\n    const col3 = col2 + 30;\n\n\n    return <svg x={x} y={y}>\n        <Header label=\"Bit crusher\" x={25} y={row1} width={50}/>\n        <RoundPushButton8 x={col1} y={row3} ledCount={2} ledPosition=\"top\" ledLabels={['FX1', 'FX2']} midiConfig={midiConstants.FX_BIT_CRUSHER.SOURCE}/>\n        <RotaryPot10 ledMode=\"single\" label=\"Bits\" x={col2} y={row2} position={0.4} midiConfig={midiConstants.FX_BIT_CRUSHER.BITS}/>\n        <RotaryPot10 ledMode=\"single\" label=\"Rate\" x={col3} y={row2} position={0.4} midiConfig={midiConstants.FX_BIT_CRUSHER.RATE}/>\n    </svg>;\n};\n\nexport default BitCrusher;","/*\n- Button - Mode\n- Button w/multiple leds Range (octaves)\n- Button - On/off\n- Button - trigger (triggers on first key press?)\n- 17mm pot - Tempo (or separate clock and clock sunc)\n- Button - Sync (button) - int clock, Lfo, ext clock\n */\nimport React from 'react';\nimport RotaryPot17 from '../pots/RotaryPot17';\nimport Header from '../misc/Header';\nimport RoundPushButton8 from '../buttons/RoundPushButton8';\nimport RoundLedPushButton8 from '../buttons/RoundLedPushButton8';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n    x: number,\n    y: number\n}\n\nconst Arpeggiator = ({ x, y }: Props) => {\n\n    const row1 = 0;\n    const row2 = 30;\n    const col1 = 10;\n    const col2 = col1 + 20;\n    const col3 = col2 + 25;\n    const col4 = col3 + 25;\n    const col5 = col4 + 35;\n    const col6 = col5 + 35;\n\n\n    return <svg x={x} y={y}>\n        <Header label=\"Arpeggiator\" x={0} y={row1} width={190}/>\n        <RoundLedPushButton8 labelPosition=\"bottom\" x={col1} y={row2} label=\"On/Off\" midiConfig={midiConstants.ARPEGGIATOR.ON_OFF}/>\n        <RoundLedPushButton8 labelPosition=\"bottom\" x={col2} y={row2} label=\"Trigger\" midiConfig={midiConstants.ARPEGGIATOR.TRIGGER}/>\n        <RotaryPot17 ledMode=\"single\" label=\"Tempo\" x={col3} y={row2} position={0.4} midiConfig={midiConstants.ARPEGGIATOR.TEMPO}/>\n        <RoundPushButton8 labelPosition=\"bottom\" x={col4} y={row2} label=\"Sync\" ledCount={3} ledPosition=\"right\" ledLabels={['Master', 'LFO1', 'Ext']} hasOff midiConfig={midiConstants.ARPEGGIATOR.SYNC}/>\n        <RoundPushButton8 labelPosition=\"bottom\" x={col5} y={row2} label=\"Range\" ledCount={3} ledPosition=\"right\" ledLabels={['1', '2', '3']} midiConfig={midiConstants.ARPEGGIATOR.RANGE}/>\n        <RoundPushButton8 labelPosition=\"bottom\" x={col6} y={row2} label=\"Mode\" ledCount={5} ledPosition=\"right\" ledLabels={['Up', 'Down', 'Up/down', 'Random', 'Other']} midiConfig={midiConstants.ARPEGGIATOR.MODE}/>\n    </svg>;\n};\n\nexport default Arpeggiator;","import React from 'react'\nimport RotaryPotWOLeds, { Props }  from './RotaryPotWOLeds';\n\nconst RotaryPotWOLeds17 = (props: Props) => <RotaryPotWOLeds knobRadius={8.5} {...props} />\nexport default RotaryPotWOLeds17","import React from 'react'\nimport RotaryPotWOLeds, { Props }  from './RotaryPotWOLeds';\n\nconst RotaryPotWOLeds32 = (props: Props) => <RotaryPotWOLeds knobRadius={16} {...props} />\nexport default RotaryPotWOLeds32","import React from 'react'\nimport Display from '../misc/Display'\nimport RotaryPotWOLeds17 from '../pots/RotaryPotWOLeds17'\nimport RoundPushButton8 from '../buttons/RoundPushButton8'\nimport RotaryPotWOLeds32 from '../pots/RotaryPotWOLeds32'\nimport midiConstants from '../../midi/controllers'\nimport { MainDisplayControllerIds } from '../../synthcore/modules/mainDisplay/types'\nimport { ControllerGroupIds } from '../../synthcore/types'\nimport { getPotResolution } from '../../synthcore/modules/mainDisplay/mainDisplayApi'\nimport { useAppSelector } from '../../synthcore/hooks'\nimport { selectCurrScreen } from '../../synthcore/modules/mainDisplay/mainDisplayReducer'\nimport './MainDisplay.scss'\n\ninterface Props {\n    x: number,\n    y: number\n}\n\nconst ctrlGroup = ControllerGroupIds.MAIN_DISP\n\nconst MainDisplay = React.forwardRef<SVGRectElement, Props>(({ x, y }, displayRef) => {\n\n    const currScreen = useAppSelector(selectCurrScreen)\n\n    // approx. 9\"\n    const displayWidth = 180\n    const displayHeight = 9 * displayWidth / 16\n    const displayCenter = x + displayWidth / 2\n\n    const bezelLRMargin = 20\n    const bezelTopMargin = 40\n    //const bezelBottomMargin = 60;\n    const bezelBottomMargin = 120\n\n    const buttonSpacing = 30\n    const buttonRow = y - 25\n\n    const potSpacing = 35\n    const potRow = y + displayHeight + 30\n    const masterPotRow = potRow + 55\n    const ctrlSwitchesRow1 = masterPotRow - 10\n    const ctrlSwitchesRow2 = masterPotRow + 10\n\n    return <>\n        <rect x={x - bezelLRMargin} y={y - bezelTopMargin} height={displayHeight + bezelTopMargin + bezelBottomMargin} width={displayWidth + 2 * bezelLRMargin} className=\"bezel\"/>\n        <RoundPushButton8 x={displayCenter - 2.5 * buttonSpacing} y={buttonRow}\n                          label=\"LFOs\"\n                          labelPosition=\"bottom\"\n                          ctrlGroup={ctrlGroup}\n                          ctrlId={MainDisplayControllerIds.MENU_LFO}\n        />\n        <RoundPushButton8 x={displayCenter - 1.5 * buttonSpacing} y={buttonRow}\n                          label=\"Osc\"\n                          labelPosition=\"bottom\"\n                          ctrlGroup={ctrlGroup}\n                          ctrlId={MainDisplayControllerIds.MENU_OSC}\n        />\n        <RoundPushButton8 x={displayCenter - 0.5 * buttonSpacing} y={buttonRow}\n                          label=\"Filters\"\n                          labelPosition=\"bottom\"\n                          ctrlGroup={ctrlGroup}\n                          ctrlId={MainDisplayControllerIds.MENU_FILTER}\n        />\n        <RoundPushButton8 x={displayCenter + 0.5 * buttonSpacing} y={buttonRow}\n                          label=\"Envelopes\"\n                          labelPosition=\"bottom\"\n                          ctrlGroup={ctrlGroup}\n                          ctrlId={MainDisplayControllerIds.MENU_ENVELOPE}\n        />\n        <RoundPushButton8 x={displayCenter + 1.5 * buttonSpacing} y={buttonRow}\n                          label=\"Mods\"\n                          labelPosition=\"bottom\"\n                          ctrlGroup={ctrlGroup}\n                          ctrlId={MainDisplayControllerIds.MENU_MOD}\n        />\n        <RoundPushButton8 x={displayCenter + 2.5 * buttonSpacing} y={buttonRow}\n                          label=\"FX\"\n                          labelPosition=\"bottom\"\n                          ctrlGroup={ctrlGroup}\n                          ctrlId={MainDisplayControllerIds.MENU_FX}\n        />\n        <Display x={x} y={y} width={displayWidth} height={displayHeight} ref={displayRef}/>\n\n        <RotaryPotWOLeds17 x={displayCenter - 2 * potSpacing} y={potRow}\n                           midiConfig={midiConstants.MAIN_DISPLAY.POT1}\n                           ctrlGroup={ControllerGroupIds.MAIN_DISP}\n                           ctrlId={MainDisplayControllerIds.POT1}\n                           resolution={getPotResolution(MainDisplayControllerIds.POT1, currScreen)}\n        />\n        <RotaryPotWOLeds17 x={displayCenter - 1 * potSpacing} y={potRow}\n                           midiConfig={midiConstants.MAIN_DISPLAY.POT2}\n                           ctrlGroup={ControllerGroupIds.MAIN_DISP}\n                           ctrlId={MainDisplayControllerIds.POT2}\n                           resolution={getPotResolution(MainDisplayControllerIds.POT2, currScreen)}\n        />\n        <RotaryPotWOLeds17 x={displayCenter} y={potRow}\n                           midiConfig={midiConstants.MAIN_DISPLAY.POT3}\n                           ctrlGroup={ControllerGroupIds.MAIN_DISP}\n                           ctrlId={MainDisplayControllerIds.POT3}\n                           resolution={getPotResolution(MainDisplayControllerIds.POT3, currScreen)}\n        />\n        <RotaryPotWOLeds17 x={displayCenter + 1 * potSpacing} y={potRow}\n                           midiConfig={midiConstants.MAIN_DISPLAY.POT4}\n                           ctrlGroup={ControllerGroupIds.MAIN_DISP}\n                           ctrlId={MainDisplayControllerIds.POT4}\n                           resolution={getPotResolution(MainDisplayControllerIds.POT4, currScreen)}\n        />\n        <RotaryPotWOLeds17 x={displayCenter + 2 * potSpacing} y={potRow}\n                           midiConfig={midiConstants.MAIN_DISPLAY.POT5}\n                           ctrlGroup={ControllerGroupIds.MAIN_DISP}\n                           ctrlId={MainDisplayControllerIds.POT5}\n                           resolution={getPotResolution(MainDisplayControllerIds.POT5, currScreen)}\n        />\n        <RotaryPotWOLeds32 x={displayCenter} y={masterPotRow}\n                           midiConfig={midiConstants.MAIN_DISPLAY.POT6}\n                           ctrlGroup={ControllerGroupIds.MAIN_DISP}\n                           ctrlId={MainDisplayControllerIds.POT6}\n                           resolution={getPotResolution(MainDisplayControllerIds.POT6, currScreen)}\n        />\n\n        <RoundPushButton8 x={displayCenter - 2.5 * buttonSpacing} y={ctrlSwitchesRow1} label=\"Home\" labelPosition=\"bottom\" midiConfig={midiConstants.MAIN_DISPLAY.FUNC_HOME}/>\n        <RoundPushButton8 x={displayCenter - 1.5 * buttonSpacing} y={ctrlSwitchesRow1} label=\"Settings\" labelPosition=\"bottom\" midiConfig={midiConstants.MAIN_DISPLAY.FUNC_SETTINGS}/>\n        <RoundPushButton8 x={displayCenter + 1.5 * buttonSpacing} y={ctrlSwitchesRow1} label=\"Load\" labelPosition=\"bottom\" midiConfig={midiConstants.MAIN_DISPLAY.FUNC_LOAD}/>\n        <RoundPushButton8 x={displayCenter + 2.5 * buttonSpacing} y={ctrlSwitchesRow1} label=\"Save\" labelPosition=\"bottom\" midiConfig={midiConstants.MAIN_DISPLAY.FUNC_SAVE}/>\n\n        <RoundPushButton8 x={displayCenter - 2.5 * buttonSpacing} y={ctrlSwitchesRow2} label=\"Shift\" labelPosition=\"bottom\" midiConfig={midiConstants.MAIN_DISPLAY.FUNC_SHIFT}/>\n        <RoundPushButton8 x={displayCenter - 1.5 * buttonSpacing} y={ctrlSwitchesRow2} label=\"Perform\" labelPosition=\"bottom\" midiConfig={midiConstants.MAIN_DISPLAY.FUNC_PERFORM}/>\n        <RoundPushButton8 x={displayCenter + 1.5 * buttonSpacing} y={ctrlSwitchesRow2} label=\"Compare\" labelPosition=\"bottom\" midiConfig={midiConstants.MAIN_DISPLAY.FUNC_COMPARE}/>\n        <RoundPushButton8 x={displayCenter + 2.5 * buttonSpacing} y={ctrlSwitchesRow2} label=\"Route\" labelPosition=\"bottom\" midiConfig={midiConstants.MAIN_DISPLAY.FUNC_ROUTE}/>\n    </>\n})\n\nexport default MainDisplay","import React from 'react';\nimport RotaryPot17 from '../pots/RotaryPot17';\nimport Header from '../misc/Header';\nimport RoundPushButton8 from '../buttons/RoundPushButton8';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n    x: number,\n    y: number\n}\n\nconst Clock = ({ x, y }: Props) => {\n\n    const row1 = 0;\n    const row2 = 30;\n    const col1 = 10;\n    const col2 = col1 + 50;\n\n    return <svg x={x} y={y}>\n        <Header label=\"Master clock\" x={0} y={row1} width={77}/>\n        <RoundPushButton8 labelPosition=\"bottom\" x={col1} y={row2} label=\"Source\" ledCount={3} ledPosition=\"right\" ledLabels={['Master', 'Midi', 'Ext']} midiConfig={midiConstants.MASTER_CLOCK.SOURCE}/>\n        <RotaryPot17 ledMode=\"single\" label=\"Rate\" x={col2} y={row2} position={0.4} midiConfig={midiConstants.MASTER_CLOCK.RATE}/>\n    </svg>;\n};\n\nexport default Clock;","import React from 'react';\nimport RotaryPot10 from '../pots/RotaryPot10';\nimport RotaryPot17 from '../pots/RotaryPot17';\nimport Header from '../misc/Header';\nimport RoundPushButton8 from '../buttons/RoundPushButton8';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n    x: number,\n    y: number\n}\n\nconst BitCrusherPre = ({ x, y }: Props) => {\n\n    const row1 = y;\n    const row2 = row1+30;\n\n    const col1 = x + 7;\n    const col2 = col1 + 20;\n    const col3 = col2 + 20;\n    const col4 = col3 + 30;\n    const col5 = col4 + 25;\n\n    return <>\n        <Header label=\"Bit crusher\" x={x} y={row1} width={110}/>\n        <RoundPushButton8 x={col1} y={row2 + 8} ledPosition=\"top\" ledCount={2} label=\"In\" labelPosition=\"bottom\" midiConfig={midiConstants.BIT_CRUSHER.IN}/>\n        <RotaryPot10 ledMode=\"single\" ledCount={12} label=\"Bits\" x={col2} y={row2-10} position={0.7} midiConfig={midiConstants.BIT_CRUSHER.BITS}/>\n        <RotaryPot10 ledMode=\"single\" label=\"Rate\" x={col3} y={row2 + 5} position={0.4} midiConfig={midiConstants.BIT_CRUSHER.RATE}/>\n        <RotaryPot17 ledMode=\"multi\" label=\"Level\" x={col4} y={row2} position={0.4} midiConfig={midiConstants.BIT_CRUSHER.LEVEL}/>\n        <RoundPushButton8 x={col5} y={row2 + 8} ledPosition=\"top\" ledCount={2} label=\"Out\" labelPosition=\"bottom\" midiConfig={midiConstants.BIT_CRUSHER.OUT}/>\n\n    </>;\n};\n\nexport default BitCrusherPre;","import React from 'react';\nimport RoundLedPushButton8 from '../buttons/RoundLedPushButton8';\nimport Header from '../misc/Header';\nimport RotaryPot17 from '../pots/RotaryPot17';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n    x: number,\n    y: number\n}\n\nconst Route = ({ x, y }: Props) => {\n    return <svg x={x} y={y}>\n        <Header label=\"Route\" x={0} y={0} width={50}/>\n        <RoundLedPushButton8 labelPosition=\"bottom\" x={10} y={17.5} label=\"From\" hasOff radioButtonIndex={0} midiConfig={midiConstants.ROUTE.FROM}/>\n        <RoundLedPushButton8 labelPosition=\"bottom\" x={10} y={37.5} label=\"To\" hasOff radioButtonIndex={1} midiConfig={midiConstants.ROUTE.TO}/>\n        <RotaryPot17 ledMode=\"single\" label=\"Amount\" x={35} y={30} position={0.4} />\n    </svg>;\n};\n\nexport default Route;","import React from 'react'\nimport classNames from 'classnames'\nimport './Led.scss'\n\ntype LabelPosition = 'left' | 'right' | 'top' | 'bottom' | undefined;\n\nexport interface Props {\n    x: number;\n    y: number;\n    on?: boolean;\n    label?: string;\n    labelPosition?: LabelPosition;\n}\n\ninterface Config {\n    radius?: number;\n    labelMargin?: number; // margin button-label\n}\n\n\nconst positionLabel = (radius: number, labelPosition: LabelPosition, labelMargin: number) => {\n    switch (labelPosition) {\n        case 'left':\n            return {\n                x: -(radius + labelMargin + 2),\n                y: 0,\n                textAnchor: 'end'\n            }\n        case 'right':\n            return {\n                x: radius + labelMargin + 2,\n                y: 0,\n                textAnchor: 'start'\n            }\n        case 'top':\n            return {\n                x: 0,\n                y: -(radius + labelMargin + 3),\n                textAnchor: 'middle'\n            }\n        case 'bottom':\n            return {\n                x: 0,\n                y: radius + labelMargin + 3,\n                textAnchor: 'middle'\n            }\n        default:\n            return { x: 0, y: 0, textAnchor: 'right' }\n    }\n}\n\nconst Led = (props: Props & Config) => {\n    const radius = props.radius || 1.5\n    const labelMargin = props.labelMargin || 2\n    const labelPos = positionLabel(radius,props.labelPosition || 'bottom', labelMargin)\n\n    const { x, y, label, on } = props\n\n    return (\n        <svg x={x} y={y} className=\"button\">\n            <circle\n                cx={0} cy={0} r={radius} stroke=\"black\" fill=\"red\"\n                className={classNames('led', { 'led__on': on })}/>\n\n            {label && <text\n              x={labelPos.x}\n              y={labelPos.y}\n              className=\"led-label\"\n              textAnchor={labelPos.textAnchor}\n              alignmentBaseline=\"middle\"\n            >{label}</text>}\n        </svg>\n    )\n}\n\nexport default Led","import Header from '../misc/Header';\nimport RotaryPot10 from '../pots/RotaryPot10';\nimport RoundLedPushButton8 from '../buttons/RoundLedPushButton8';\nimport RoundPushButton8 from '../buttons/RoundPushButton8';\nimport Led from '../leds/Led';\nimport React, { useCallback, useState } from 'react'\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n    x: number,\n    y: number\n}\n\ntype TransposeProps = {\n    row2: number;\n}\n\nconst Transpose = ({row2}: TransposeProps) => {\n    const ledDistance = 10;\n    const col1 = 10;\n    const col2 = col1 + ledDistance;\n    const col3 = col2 + ledDistance;\n    const col4 = col3 + ledDistance;\n    const col5 = col4 + ledDistance;\n    const col6 = col5 + ledDistance;\n    const col7 = col6 + ledDistance;\n\n    const defaultValueIndex = 2;\n    const [currentValue, setCurrentValue] = useState(defaultValueIndex);\n    const onClick = useCallback((value) => {\n        setCurrentValue(value);\n    }, [setCurrentValue]);\n\n    return <>\n        <RoundPushButton8 labelPosition=\"bottom\" x={col1} y={row2}\n                          label=\"Down\" onUpdate={onClick} reverse loop={false}\n                          midiConfig={midiConstants.TRANSPOSE.TRANSPOSE}\n                          defaultValueIndex={defaultValueIndex}\n        />\n        <Led x={col2} y={row2} label=\"-2\" on={currentValue === 0}/>\n        <Led x={col3} y={row2} label=\"-1\" on={currentValue === 1}/>\n        <Led x={col4} y={row2} label=\"0\" on={currentValue === 2}/>\n        <Led x={col5} y={row2} label=\"1\" on={currentValue === 3}/>\n        <Led x={col6} y={row2} label=\"2\" on={currentValue === 4}/>\n        <RoundPushButton8 labelPosition=\"bottom\" x={col7} y={row2}\n                          label=\"Up\" onUpdate={onClick} loop={false}\n                          midiConfig={midiConstants.TRANSPOSE.TRANSPOSE}\n                          defaultValueIndex={defaultValueIndex}\n        />\n    </>\n}\n\nconst KeyboardControls = ({ x, y }: Props) => {\n    /*\n    - Two Buttons, 5 leds - Transpose - up/down\n    - 17mm pot - Portamento (amount/speed?) or glide\n      - Button, two leds - Direction - up/down/both ?\n      (- Modulate)\n    - Button - Unison\n    - 17mm pot - Unison detune pot\n    - Button - Split\n    - Button - Hold (whhat does it do?)\n    - Button - Chord\n     */\n\n    const row1 = 0;\n    const row2 = 22;\n\n    const col8 = 100;\n    const col9 = col8 + 25;\n    const col10 = col9 + 20;\n    const col11 = col10 + 20;\n    const col12 = col11 + 45;\n\n\n    return <svg x={x} y={y}>\n        <Header label=\"Transpose\" x={0} y={row1} width={80}/>\n        <Header label=\"Keyboard\" x={85} y={row1} width={140}/>\n        <Transpose row2={row2} />\n        <RotaryPot10 x={col8} y={row2} ledMode=\"single\" label=\"Portamento\" position={0.5} midiConfig={midiConstants.KEYBOARD.PORTAMENTO}/>\n        <RoundLedPushButton8 labelPosition=\"bottom\" x={col9} y={row2} label=\"Hold\" midiConfig={midiConstants.KEYBOARD.HOLD}/>\n        <RoundLedPushButton8 labelPosition=\"bottom\" x={col10} y={row2} label=\"Chord\" midiConfig={midiConstants.KEYBOARD.CHORD}/>\n        <RoundPushButton8 labelPosition=\"bottom\" x={col11} y={row2} label=\"Mode\" ledCount={3} ledPosition=\"right\" ledLabels={['Solo', 'Unison', 'Poly']} midiConfig={midiConstants.KEYBOARD.MODE}/>\n        <RotaryPot10 x={col12} y={row2} ledMode=\"single\" label=\"Unison detune\" position={0.5} midiConfig={midiConstants.KEYBOARD.UNISON_DETUNE}/>\n    </svg>;\n};\n\nexport default KeyboardControls;","import React from 'react';\nimport RoundLedPushButton8 from '../buttons/RoundLedPushButton8';\nimport midiConstants from '../../midi/controllers'\n\ninterface Props {\n    x: number,\n    y: number\n}\n\nconst VoiceSelector = ({ x, y }: Props) => {\n    const offsetX = 5;\n    const buttonDistance = 25;\n    return <svg x={x} y={y}>\n        <RoundLedPushButton8 labelPosition=\"bottom\" x={offsetX} y={0} label=\"1\" midiConfig={midiConstants.VOICES.VOICE1}/>\n        <RoundLedPushButton8 labelPosition=\"bottom\" x={offsetX + buttonDistance} y={0} label=\"2\" midiConfig={midiConstants.VOICES.VOICE2}/>\n        <RoundLedPushButton8 labelPosition=\"bottom\" x={offsetX + buttonDistance * 2} y={0} label=\"3\" midiConfig={midiConstants.VOICES.VOICE3}/>\n        <RoundLedPushButton8 labelPosition=\"bottom\" x={offsetX + buttonDistance * 3} y={0} label=\"4\" midiConfig={midiConstants.VOICES.VOICE4}/>\n        <RoundLedPushButton8 labelPosition=\"bottom\" x={offsetX + buttonDistance * 4} y={0} label=\"5\" midiConfig={midiConstants.VOICES.VOICE5}/>\n        <RoundLedPushButton8 labelPosition=\"bottom\" x={offsetX + buttonDistance * 5} y={0} label=\"6\" midiConfig={midiConstants.VOICES.VOICE6}/>\n        <RoundLedPushButton8 labelPosition=\"bottom\" x={offsetX + buttonDistance * 6} y={0} label=\"7\" midiConfig={midiConstants.VOICES.VOICE7}/>\n        <RoundLedPushButton8 labelPosition=\"bottom\" x={offsetX + buttonDistance * 7} y={0} label=\"8\" midiConfig={midiConstants.VOICES.VOICE8}/>\n    </svg>;\n};\n\nexport default VoiceSelector;","import React from 'react'\nimport { useAppSelector } from '../../synthcore/hooks'\nimport { selectGuiSource, selectGuiTargetFunc, selectGuiTargetGroup, selectGuiTargetParam, selectModValue } from '../../synthcore/modules/mods/modsReducer'\nimport { digitalModSources, modTarget } from '../../synthcore/modules/mods/utils'\nimport './ModValues.scss'\n\nconst ModValues = () => {\n\n    const sourceIndex = useAppSelector(selectGuiSource)\n    const targetGroupId = useAppSelector(selectGuiTargetGroup)\n    const targetFuncId = useAppSelector(selectGuiTargetFunc)\n    const targetParamId = useAppSelector(selectGuiTargetParam)\n\n    const target = modTarget.targets[targetGroupId][targetFuncId][targetParamId]\n    const source = digitalModSources[sourceIndex]\n\n    const sourceId = source.id\n    const targetId = target.id\n    const targetValue = useAppSelector(selectModValue(sourceId, targetId))\n\n    return <div className=\"mod-values\">\n        <div className=\"mod-values__item\">{modTarget.groupLabels[targetGroupId]}</div>\n        <div className=\"mod-values__item\">{digitalModSources[sourceIndex].label}</div>\n        <div className=\"mod-values__item\">{modTarget.funcProps[targetGroupId][targetFuncId].label}</div>\n        <div className=\"mod-values__item\">{modTarget.targets[targetGroupId][targetFuncId][targetParamId].label}</div>\n        <div className=\"mod-values__item\">{Math.round(100 * targetValue)}%</div>\n    </div>\n}\n\nexport default ModValues","import React from 'react'\nimport { digitalModSources, shortLabel } from '../../synthcore/modules/mods/utils'\nimport { DraggableElementProps } from './types'\nimport { useAppSelector } from '../../synthcore/hooks'\nimport { selectGuiSource } from '../../synthcore/modules/mods/modsReducer'\nimport classNames from 'classnames'\nimport { ControllerConfig } from '../../midi/types'\n\ninterface LabelProps {\n    sourceIndex: number,\n    source: ControllerConfig,\n}\n\nconst SourceLabel = ({ sourceIndex, source }: LabelProps) => {\n    const selectedSource = useAppSelector(selectGuiSource)\n    const isSelected = sourceIndex === selectedSource\n    return <div\n        className={classNames('mod-ctrl__source', { 'mod-ctrl__source--selected': isSelected })}\n        key={sourceIndex}>\n        {shortLabel(source)}\n    </div>\n}\n\nconst SourceLabels = ({ onMouseDown, onMouseMove }: DraggableElementProps) => {\n\n\n    return (\n        <div className=\"mod-ctrl__sources\"\n             onMouseDown={onMouseDown}\n             onMouseMove={onMouseMove}\n        >\n            {digitalModSources\n                .map((controller, sourceIndex) => <SourceLabel\n                    key={sourceIndex}\n                    sourceIndex={sourceIndex}\n                    source={controller}\n                />)}\n        </div>\n    )\n}\n\nexport default SourceLabels","import { useAppSelector } from '../../synthcore/hooks'\nimport { selectGuiTargetFunc, selectGuiTargetGroup, selectGuiTargetParam } from '../../synthcore/modules/mods/modsReducer'\nimport { modTarget, shortLabel } from '../../synthcore/modules/mods/utils'\nimport React from 'react'\nimport { DraggableElementProps } from './types'\nimport classNames from 'classnames'\nimport { ControllerConfig } from '../../midi/types'\n\ninterface TargetLabelProps {\n    paramIndex: number,\n    funcIndex: number,\n    target: ControllerConfig\n}\n\nconst TargetLabel = ({ funcIndex, paramIndex, target }: TargetLabelProps) => {\n    const selectedTargetFunc = useAppSelector(selectGuiTargetFunc)\n    const selectedTargetParam = useAppSelector(selectGuiTargetParam)\n\n    const isSelected = funcIndex === selectedTargetFunc && paramIndex === selectedTargetParam\n\n    return <div\n        className={classNames('mod-ctrl__target__label', { 'mod-ctrl__target__label--selected': isSelected })}\n        key={paramIndex}>\n        {shortLabel(target)}\n    </div>\n}\n\nconst TargetLabels = ({ onMouseDown, onMouseMove }: DraggableElementProps) => {\n    const targetGroupId = useAppSelector(selectGuiTargetGroup)\n    const targetGroup = modTarget.targets[targetGroupId]\n\n    return (\n        <div className=\"mod-ctrl__targets\"\n             onMouseDown={onMouseDown}\n             onMouseMove={onMouseMove}>\n            {targetGroup.map((func, funcIndex) => {\n                return <div className=\"mod-ctrl__target\" key={funcIndex}>\n                    {<div className=\"mod-ctrl__target__func\">\n                        {shortLabel(modTarget.funcProps[targetGroupId][funcIndex])}\n                    </div>}\n                    <div className=\"mod-ctrl__target__props\">\n                        {func.map((controller, paramIndex) => <TargetLabel\n                            key={paramIndex}\n                            target={controller}\n                            paramIndex={paramIndex}\n                            funcIndex={funcIndex}\n                        />)}\n                    </div>\n                </div>\n            })}\n        </div>\n    )\n}\n\nexport default TargetLabels","import React from 'react'\nimport './AmountBar.scss'\n\ninterface Props {\n    amtPercentage: number\n}\n\nconst AmountBar = ({amtPercentage}: Props) => {\n\n    const negAmtWidth = amtPercentage < 0 ? `${-amtPercentage}%` : '0'\n    const posAmtWidth = amtPercentage > 0 ? `${amtPercentage}%` : '0'\n\n    return <div className=\"amount-bar\">\n        <div className=\"amount-bar__left\">\n            <div className=\"amount-bar__neg\" style={{width: negAmtWidth}}/>\n        </div>\n        <div className=\"amount-bar__right\">\n            <div className=\"amount-bar__pos\" style={{width: posAmtWidth}}/>\n        </div>\n    </div>\n}\n\nexport default AmountBar","import React, { FC, useRef, useState } from 'react'\nimport { LockAxis, ScrollConfig } from './ScrollSyncNode'\n\n/**\n * ScrollSync and ScrollSyncNode are copied and modified from\n * https://github.com/AhmadMHawwash/scroll-sync-react\n */\n\nexport interface ScrollSyncProps {\n    children: React.ReactNode;\n    /**syncing enable control */\n    disabled?: boolean;\n    /** In case we want scroll to be proportionally applied regardless of the width and/or height*/\n    proportional?: boolean;\n}\n\ninterface RecordMap<T> {\n    [key: string]: T;\n}\n\n/**\n * node should be scrollable\n */\nexport type Node = (EventTarget & HTMLElement) | null;\n\n/**\n * node should be scrollable\n */\ninterface SyncableElement {\n    node: Node;\n    scroll: ScrollConfig;\n}\n\ninterface ScrollingSyncerContextValues {\n    /**\n     * register node to be synced with other scrolled nodes\n     */\n    registerNode: (node: SyncableElement, groups: string[]) => void;\n    /**\n     * unregister node to stop syncing with other scrolled nodes\n     */\n    unregisterNode: (node: SyncableElement, group: string[]) => void;\n    /**\n     * scroll handler for each node.onScroll\n     */\n    onScroll: (e: React.UIEvent<HTMLElement>, groups: string[], lockAxis: LockAxis) => void;\n\n    setScrollSource: (dragNode: HTMLElement) => void;\n}\n\n/**\n * ScrollingSyncerContext is the context to be handling scrolled nodes\n */\nexport const ScrollingSyncerContext: React.Context<ScrollingSyncerContextValues> = React.createContext({\n    registerNode: (_node: SyncableElement, _group: string[]) => {\n    },\n    unregisterNode: (_node: SyncableElement, _group: string[]) => {\n    },\n    onScroll: (_e, _groups: string[], _lockAxis: LockAxis) => {\n    },\n    setScrollSource: (dragNode: HTMLElement) => {\n    },\n})\n\n/**\n * ScrollSync component is a context based component,\n * that wrappes children to be .Provided with context utils and eventsHandlers\n * @param props ScrollSyncProps\n */\nexport const ScrollSync: FC<ScrollSyncProps> = props => {\n    /**\n     * a map of group: and it's nodes\n     * {\n     *  groupA: [node1, node2, node3],\n     *  groupB: [node4, node5],\n     *  groupC: [node1, node4],\n     * }\n     */\n    const nodesRef = useRef<RecordMap<(SyncableElement)[]>>({})\n    const elements = nodesRef.current\n\n    const findGroup = (group: string): boolean => {\n        return !!elements[group]\n    }\n\n    const doesNodeExists = (node: Node, group: string): boolean => {\n        const groupExists = findGroup(group)\n        if (!groupExists) {\n            return false\n        }\n\n        const foundNode = elements[group].find(element => element.node === node)\n        if (!foundNode) {\n            return false\n        }\n\n        return !!foundNode\n    }\n\n    /**\n     * this function will register your node (that uses ScrollSyncNode)\n     * to be scroll-synced with it's other registered nodes\n     *\n     * @param element to be registred\n     * @param groups to which groups the node should be registered\n     */\n    const registerNode = (element: SyncableElement, groups: string[]) => {\n        groups.forEach(group => {\n            const groupExists = findGroup(group)\n            if (!groupExists) {\n                elements[group] = []\n            }\n\n            elements[group].push({ ...element })\n        })\n    }\n\n    /**\n     * this function will UNregister your node (that uses ScrollSyncNode)\n     * to stop it's scroll-sync with other registered nodes\n     *\n     * used now when unmounting nodes\n     *\n     * @param element to be registred\n     * @param groups to wich groups the node should be registered\n     */\n    const unregisterNode = (element: SyncableElement, groups: string[]) => {\n        groups.forEach(group => {\n            const doesNodeExist = doesNodeExists(element.node, group)\n            if (doesNodeExist) {\n                elements[group].splice(\n                    elements[group].findIndex(e => element.node === e.node),\n                    1,\n                )\n            }\n        })\n    }\n\n    /**\n     * calculate scrolling percentage of the scrolledNode to be synced with other nodes\n     * @param scrolledNode !!\n     * @param node other node to be scroll-synced\n     */\n    const syncScrollPosition = (scrolledNode: Node, node: Node, lockAxis: LockAxis) => {\n        if (!scrolledNode || !node) {\n            return\n        }\n\n        const { scrollTop, scrollLeft } = scrolledNode\n        if (!lockAxis?.includes('X')) {\n            node.scrollLeft = scrollLeft\n        }\n        if (!lockAxis?.includes('Y')) {\n            node.scrollTop = scrollTop\n        }\n    }\n\n    // Set to prevent circular updates of positions\n    const [scrollSource, setScrollSource] = useState<Node>(null)\n\n    /**\n     * We sync all other nodes in the registered groups\n     * @param scrolledNode !!\n     * @param groups groups to be scroll-synced\n     * @param lockAxis axis that should not be synced\n     */\n    const syncScrollPositions = (scrolledNode: Node, groups: string[], lockAxis: LockAxis) => {\n        if (scrolledNode !== scrollSource) {\n            return\n        }\n        groups.forEach(group => {\n            elements[group].forEach(element => {\n                /* For all nodes other than the currently scrolled one */\n                if (scrolledNode !== element.node) {\n                    const isEnabled = element.scroll === 'two-way'\n                    const isSynced = element.scroll === 'synced-only';\n                    (isEnabled || isSynced) && syncScrollPosition(scrolledNode, element.node, lockAxis)\n                }\n            })\n        })\n    }\n\n    /**\n     * check if previous frame was painted and we should paint next\n     * if we should, then we call `requestAnimationFrame` again\n     * and then clear the shouldPaintFrame flag till next animation frame\n     *\n     * @param node node to be scrolled\n     * @param groups groups to be scroll-synced\n     * @param lockAxis axis that should not be synced\n     */\n    const handleNodeScroll = (node: Node, groups: string[], lockAxis: LockAxis) => {\n        // This used to have requestAnimationFrame, but that made us lose the\n        // last position if moving too fast. Calling sync every time instead\n        // works fine it seems.\n        syncScrollPositions(node, groups, lockAxis)\n    }\n\n    return (\n        <ScrollingSyncerContext.Provider\n            value={{\n                registerNode,\n                unregisterNode,\n                onScroll: (e, groups, lockAxis: LockAxis) => !props.disabled && handleNodeScroll(e.currentTarget, groups, lockAxis),\n                setScrollSource: (scrollSource: HTMLElement) => setScrollSource(scrollSource)\n            }}>\n            {React.Children.only(props.children)}\n        </ScrollingSyncerContext.Provider>\n    )\n}\n\nScrollSync.defaultProps = {\n    disabled: false,\n    proportional: true,\n}\n\nexport default ScrollSync","import { LockAxis } from './ScrollSyncNode'\n\nexport const toArray = (groups: string | string[]) => ([] as string[]).concat(groups)\n\nexport const getMovingAxis: (e: WheelEvent) => LockAxis = (e: WheelEvent) => {\n    if (e.deltaX > 0 || e.deltaX < 0) {\n        return 'X'\n    }\n    if (e.deltaY > 0 || e.deltaY < 0) {\n        return 'Y'\n    }\n    if ((e.deltaY > 0 || e.deltaY < 0) && (e.deltaX > 0 || e.deltaX < 0)) {\n        return \"XY\";\n    }\n    return null;\n};","import React, { useCallback, useEffect, useState } from 'react'\nimport { Dimension } from './types'\nimport { Point } from './utils/types'\n\nconst getBounded = (value: number, max: number) => {\n    if (value < 0) {\n        return 0\n    }\n    if (value < max) {\n        return value\n    }\n    return max\n}\n\n// https://medium.com/@teh_builder/ref-objects-inside-useeffect-hooks-eb7c15198780\nexport const useDimensions = (): [Dimension | undefined, (div: HTMLDivElement) => void] => {\n    const [dimensions, setDimensions] = useState<Dimension>()\n    const captureDimensions = useCallback((div: HTMLDivElement) => {\n        if (div) {\n            setDimensions({ h: div.clientHeight, w: div.clientWidth })\n        }\n    }, [])\n    return [dimensions, captureDimensions]\n}\n\nexport const useDrag = (\n    lockX: boolean,\n    lockY: boolean,\n    ref: React.RefObject<HTMLElement>,\n    onDrag: (dragNode: HTMLElement) => void\n) => {\n    const [startScroll, setStartScroll] = useState<Point>({ x: 0, y: 0 })\n    const [isDragging, setIsDragging] = useState(false)\n    const [dragStart, setDragStart] = useState<Point>({ x: 0, y: 0 })\n    const [maxScroll, setMaxScroll] = useState<Point>()\n\n    const calcMaxScroll = useCallback(() => {\n        if (ref.current) {\n            const {\n                clientHeight,\n                clientWidth,\n                scrollHeight,\n                scrollWidth,\n            } = ref.current\n\n            setMaxScroll({\n                y: scrollHeight - clientHeight,\n                x: scrollWidth - clientWidth\n            })\n        }\n    }, [ref])\n\n    const onMouseUp = useCallback(() => {\n        if (isDragging) {\n            setIsDragging(false)\n        }\n    }, [isDragging, setIsDragging])\n\n    const onMouseDown = useCallback(\n        (event: React.MouseEvent<HTMLElement>) => {\n            if (event.preventDefault) {\n                event.preventDefault()\n            }\n            calcMaxScroll()\n            setStartScroll({\n                x: event.currentTarget.scrollLeft || 0,\n                y: event.currentTarget.scrollTop || 0,\n            })\n            setDragStart({ x: event.clientX, y: event.clientY })\n            setIsDragging(true)\n        }, [calcMaxScroll])\n\n    const onMouseMove = useCallback((event: React.MouseEvent<HTMLElement>) => {\n        if (event.preventDefault) {\n            event.preventDefault()\n        }\n        if (!isDragging || !maxScroll) {\n            return\n        }\n        onDrag(event.currentTarget)\n\n        const x = event.clientX\n        const y = event.clientY\n\n        const newScroll = {\n            x: startScroll.x,\n            y: startScroll.y,\n        }\n\n        if (!lockX) {\n            newScroll.x = getBounded(startScroll.x + dragStart.x - x, maxScroll.x)\n        }\n        if (!lockY) {\n            newScroll.y = getBounded(dragStart.y - y + startScroll.y, maxScroll.y)\n        }\n\n        event.currentTarget.scrollLeft = newScroll.x\n        event.currentTarget.scrollTop = newScroll.y\n    }, [dragStart.x, dragStart.y, isDragging, lockX, lockY, maxScroll, onDrag, startScroll.x, startScroll.y])\n\n    // captures mouse up even if mouse is no longer on top of display\n    useEffect(() => {\n        window.addEventListener('mouseup', onMouseUp)\n        return () => {\n            window.removeEventListener('mouseup', onMouseUp)\n        }\n    }, [onMouseUp])\n\n    return { onMouseDown, onMouseMove }\n}\n\nexport const useClickDetector = (onClick: () => void) => {\n    const [clickPos, setClickPos] = useState<Point>({ x: 0, y: 0 })\n    const onMouseDown = useCallback((event: React.MouseEvent<HTMLElement>) => {\n        setClickPos({\n            x: event.clientX,\n            y: event.clientY,\n        })\n        if (onMouseDown) {\n            onMouseDown(event)\n        }\n    }, [])\n\n    const onMouseUp = useCallback((event: React.MouseEvent<HTMLElement>) => {\n        if (event.clientX === clickPos?.x && event.clientY === clickPos?.y) {\n            onClick()\n        }\n    }, [onClick, clickPos])\n\n    return [onMouseDown, onMouseUp]\n}","import React, { forwardRef, useCallback, useContext, useEffect, useRef } from 'react'\nimport { ScrollingSyncerContext } from './ScrollSync'\nimport { getMovingAxis, toArray } from './utils'\nimport { useDrag } from '../../../hooks'\n\n/**\n * ScrollSyncNode Component\n *\n * Wrap your content in it to keep its scroll position in sync with other panes\n */\nexport type ScrollConfig = 'synced-only' | 'syncer-only' | 'two-way';\nexport type LockAxis = 'X' | 'Y' | 'XY' | null;\n\ninterface ScrollSyncNodeProps {\n    /**\n     * Children\n     */\n    children: React.ReactElement;\n    /**\n     * Groups to make the children attached to\n     */\n    group?: string | string[];\n    /**\n     * If the scrolling is enabled or not\n     */\n    scroll?: ScrollConfig;\n    /**\n     * Prevent scroll on current node if axis is locked\n     */\n    lockAxis?: LockAxis;\n    /**\n     * Callback for scroll handling\n     */\n    onScroll?: (e: React.UIEvent<HTMLElement>) => void;\n}\n\ninterface ScrollingSyncNodeContextValues {\n    onScrollToElement: (\n        offsetLeft: number,\n        offsetTop: number,\n        offsetWidth: number,\n        offsetHeight: number\n    ) => void,\n}\n\nexport const ScrollingSyncNodeContext: React.Context<ScrollingSyncNodeContextValues> = React.createContext({\n    onScrollToElement: (\n        offsetLeft: number,\n        offsetTop: number,\n        offsetWidth: number,\n        offsetHeight: number\n    ) => {},\n})\n\nconst ScrollSyncNode: React.ForwardRefExoticComponent<ScrollSyncNodeProps &\n    React.RefAttributes<EventTarget & HTMLElement>> = forwardRef<EventTarget & HTMLElement, ScrollSyncNodeProps>(\n    (props, forwardedRef) => {\n        const {\n            children,\n            group = 'default',\n            scroll = 'two-way',\n            lockAxis = null,\n            onScroll: onNodeScroll = () => undefined,\n        } = props\n\n        const { registerNode, unregisterNode, onScroll, setScrollSource } = useContext(ScrollingSyncerContext)\n\n        const ref = useRef<EventTarget & HTMLElement>(null)\n\n        useEffect(() => {\n            if (typeof forwardedRef === 'function') {\n                forwardedRef(ref.current)\n            }\n        }, [forwardedRef])\n\n\n        useEffect(() => {\n            const applyLockAxis = (event: WheelEvent) => {\n                const movingAxis = getMovingAxis(event)\n                if (lockAxis === 'X' && movingAxis === 'X') {\n                    event.preventDefault()\n                } else if (lockAxis === 'Y' && movingAxis === 'Y') {\n                    event.preventDefault()\n                } else if (lockAxis === 'XY' && movingAxis !== null) {\n                    event.preventDefault()\n                }\n            }\n\n            const node = ref.current\n            const syncableElement = { node, scroll, lockAxis }\n\n            if (syncableElement) {\n                registerNode(syncableElement, toArray(group))\n            }\n\n            node?.addEventListener('wheel', applyLockAxis, { passive: false })\n\n            return () => {\n                unregisterNode(syncableElement, toArray(group))\n                node?.removeEventListener('wheel', applyLockAxis)\n            }\n        }, [lockAxis, group, registerNode, unregisterNode, scroll])\n\n        useEffect(() => {\n            const syncableElement = { node: ref.current, scroll }\n\n            unregisterNode(syncableElement, toArray(group))\n            registerNode(syncableElement, toArray(group))\n            return () => unregisterNode(syncableElement, toArray(group))\n        }, [registerNode, unregisterNode, scroll, group])\n\n        const isSyncer = scroll === 'syncer-only'\n        const isEnabled = scroll === 'two-way'\n\n        const { onMouseDown, onMouseMove } = useDrag(lockAxis?.includes('X') || false, lockAxis?.includes('Y') || false, ref, setScrollSource)\n\n        const onScrollToElement = useCallback((\n            offsetLeft: number,\n            offsetTop: number,\n            offsetWidth: number,\n            offsetHeight: number\n        ) => {\n            if(ref.current){\n                const left = offsetLeft + offsetWidth / 2 - ref.current.clientWidth / 2\n                const top = offsetTop + offsetHeight / 2 - ref.current.clientHeight / 2\n                setScrollSource(ref.current)\n                ref.current.scrollTo({top, left, behavior: 'smooth' })\n            }\n        }, [setScrollSource])\n\n        return (\n            <ScrollingSyncNodeContext.Provider\n                value={{\n                    onScrollToElement\n                }}>\n                {React.cloneElement(children, {\n                    ref,\n                    onScroll: (e: React.UIEvent<HTMLElement>) => {\n                        e.persist()\n                        if (isSyncer || isEnabled) {\n                            onScroll(e, toArray(group), lockAxis)\n                            onNodeScroll(e)\n                        }\n                    },\n                    onWheel: (e: React.UIEvent<HTMLElement>) => {\n                        e.persist()\n                        if (isSyncer || isEnabled) {\n                            onScroll(e, toArray(group), lockAxis)\n                            setScrollSource(e.currentTarget)\n                            onNodeScroll(e)\n                        }\n                    },\n                    onMouseDown: onMouseDown,\n                    onMouseMove: onMouseMove,\n                })}\n            </ScrollingSyncNodeContext.Provider>\n        )\n    },\n)\n\nScrollSyncNode.displayName = 'ScrollSyncNode'\n\nexport default ScrollSyncNode","import { digitalModSources, modTarget } from '../../synthcore/modules/mods/utils'\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react'\nimport { DraggableElementProps } from './types'\nimport { useAppDispatch, useAppSelector } from '../../synthcore/hooks'\nimport { setGuiMod, selectGuiSource, selectGuiTargetFunc, selectGuiTargetGroup, selectGuiTargetParam, selectModValue, selectGuiLastModSelectSource } from '../../synthcore/modules/mods/modsReducer'\nimport classNames from 'classnames'\nimport AmountBar from './AmountBar'\nimport { Point } from '../../utils/types'\nimport { ScrollingSyncNodeContext } from '../utils/scrollsync/ScrollSyncNode'\nimport { ApiSource } from '../../synthcore/types'\n\ninterface CellProps {\n    onSelected: (offsetLeft: number, offsetWidth: number) => void,\n    sourceIndex: number\n    funcIndex: number\n    paramIndex: number\n    sourceId: number\n    targetId: number\n}\n\nconst AmountCell = ({ sourceIndex, funcIndex, paramIndex, sourceId, targetId, onSelected }: CellProps) => {\n\n    const dispatch = useAppDispatch()\n    const modValue = useAppSelector(selectModValue(sourceId, targetId))\n    const selectedSource = useAppSelector(selectGuiSource)\n    const selectedTargetFunc = useAppSelector(selectGuiTargetFunc)\n    const selectedTargetParam = useAppSelector(selectGuiTargetParam)\n    const modSelectSource = useAppSelector(selectGuiLastModSelectSource)\n\n    const isTarget = paramIndex === selectedTargetParam && funcIndex === selectedTargetFunc\n    const isSource = sourceIndex === selectedSource\n\n    const isSelectedRow = isTarget && !isSource\n    const isSelectedCol = isSource && !isTarget\n    const isSelectedCell = isSource && isTarget\n\n    const amtPercentage = Math.round(modValue * 100)\n    const amountText = isSelectedCell || modValue !== 0 ? `${amtPercentage}` : '\\u00A0'\n\n    const [clickPos, setClickPos] = useState<Point>({ x: 0, y: 0 })\n    const onMouseDown = useCallback((event: React.MouseEvent<HTMLElement>) => {\n        setClickPos({\n            x: event.clientX,\n            y: event.clientY,\n        })\n    }, [])\n\n    const onMouseUp = useCallback((event: React.MouseEvent<HTMLElement>) => {\n        if (event.clientX === clickPos?.x && event.clientY === clickPos?.y) {\n            dispatch(setGuiMod({\n                guiSource: sourceIndex,\n                guiTargetFunc: funcIndex,\n                guiTargetParam: paramIndex,\n            }))\n        }\n    }, [dispatch, sourceIndex, funcIndex, paramIndex, clickPos])\n\n    const cellRef = useRef<HTMLDivElement>(null)\n\n    useEffect(() => {\n        if (isSelectedCell && cellRef.current && modSelectSource === ApiSource.UI) {\n            const {\n                offsetWidth,\n                offsetLeft,\n            } = cellRef.current\n\n            onSelected(\n                offsetLeft,\n                offsetWidth,\n            )\n        }\n    }, [isSelectedCell, modSelectSource])\n\n\n    return <div ref={cellRef} className={classNames(\n        'mod-ctrl__amount',\n        {\n            'mod-ctrl__amount--highlit-row': isSelectedRow,\n            'mod-ctrl__amount--highlit-col': isSelectedCol,\n            'mod-ctrl__amount--selected': isSelectedCell,\n        }\n    )}>\n        <div className=\"mod-ctrl__amount__number\" onMouseDown={onMouseDown} onMouseUp={onMouseUp}>{amountText}</div>\n        <AmountBar amtPercentage={amtPercentage}/>\n    </div>\n}\n\ninterface RowProps {\n    sourceId: number\n    sourceIndex: number\n}\n\nconst AmountsRow = ({ sourceId, sourceIndex }: RowProps) => {\n\n    const targetGroupId = useAppSelector(selectGuiTargetGroup)\n    const targetGroup = modTarget.targets[targetGroupId]\n\n    const ref = useRef<HTMLDivElement>(null)\n    const { onScrollToElement } = useContext(ScrollingSyncNodeContext)\n\n    const onSelected = useCallback((offsetLeft: number, offsetWidth: number) => {\n        if (ref.current) {\n            onScrollToElement(\n                offsetLeft,\n                ref.current.offsetTop,\n                offsetWidth,\n                ref.current.offsetHeight,\n            )\n        }\n    }, [onScrollToElement])\n\n    return (\n        <div className=\"mod-ctrl__targets\" ref={ref}>\n            {targetGroup.map((func, funcIndex) => <React.Fragment key={funcIndex}>\n                    {func.map((target, paramIndex) => <AmountCell\n                                    key={paramIndex}\n                                    sourceIndex={sourceIndex}\n                                    funcIndex={funcIndex}\n                                    paramIndex={paramIndex}\n                                    sourceId={sourceId}\n                                    targetId={target.id}\n                                    onSelected={onSelected}\n                        />\n                    )}\n                </React.Fragment>\n            )}\n        </div>\n    )\n}\n\nconst AmountsTable = React.forwardRef<HTMLDivElement, DraggableElementProps>(\n    ({ onMouseDown, onMouseMove },\n     tableRef\n    ) => {\n\n        return (\n            <div className=\"mod-ctrl__amounts\"\n                 ref={tableRef}\n                 onMouseDown={onMouseDown}\n                 onMouseMove={onMouseMove}>\n                {digitalModSources\n                    .map((source, sourceIndex) => <AmountsRow\n                        key={sourceIndex}\n                        sourceIndex={sourceIndex}\n                        sourceId={source.id}/>\n                    )}\n            </div>\n        )\n    }\n)\n\nexport default AmountsTable","import React from 'react'\nimport SourceLabels from './SourceLabels'\nimport TargetLabels from './TargetLabels'\nimport AmountsTable from './AmountsTable'\nimport ScrollSync from '../utils/scrollsync/ScrollSync'\nimport ScrollSyncNode from '../utils/scrollsync/ScrollSyncNode'\nimport { modTarget } from '../../synthcore/modules/mods/utils'\nimport { useAppSelector } from '../../synthcore/hooks'\nimport { selectGuiTargetGroup } from '../../synthcore/modules/mods/modsReducer'\nimport './ModControl.scss'\n\nconst ModControl = () => {\n    const targetGroupId = useAppSelector(selectGuiTargetGroup)\n    return (\n        <div className=\"mod-ctrl\">\n            <ScrollSync>\n                <>\n                    <div className=\"mod-ctrl__header\">\n                        <div className=\"mod-ctrl__header__corner\">\n                            {modTarget.groupLabels[targetGroupId]}\n                        </div>\n                        <ScrollSyncNode lockAxis=\"Y\">\n                            <div className=\"mod-ctrl__header__targets-container\" id=\"targets\">\n                                <TargetLabels/>\n                            </div>\n                        </ScrollSyncNode>\n                    </div>\n                    <div className=\"mod-ctrl__content\">\n                        <ScrollSyncNode lockAxis=\"X\">\n                            <div className=\"mod-ctrl__content__sources-container\" id=\"sources\">\n                                <SourceLabels/>\n                            </div>\n                        </ScrollSyncNode>\n                        <ScrollSyncNode>\n                            <div className=\"mod-ctrl__content__amounts-container\" id=\"amounts\">\n                                <AmountsTable/>\n                            </div>\n                        </ScrollSyncNode>\n                    </div>\n                </>\n            </ScrollSync>\n        </div>\n    )\n}\n\nexport default ModControl","import React from 'react'\nimport './PotLabels.scss'\n\ntype Props = {\n    labels: string[]\n}\n\nconst PotLabels = ({ labels }: Props) => {\n\n    return <div className=\"pot-labels\">\n        {labels.map((label, index) => <div key={index} className=\"pot-labels__label\">{label}</div>)}\n    </div>\n}\n\nexport default PotLabels","import React from 'react'\nimport PotLabels from '../PotLabels'\n\nconst ModPotLabels = () => {\n    return <PotLabels labels={[ 'Group', 'Source', 'Func', 'Param', 'Amount']}/>\n}\nexport default ModPotLabels","import React from 'react'\nimport ModValues from './ModValues'\nimport ModControl from './ModControl'\nimport ModPotLabels from './ModPotLabels'\n\nconst Mod = () => {\n    return <>\n        <ModControl/>\n        <ModValues/>\n        <ModPotLabels/>\n    </>\n}\n\nexport default Mod","import React, { useMemo } from 'react'\nimport { useSpring, animated } from 'react-spring'\nimport classNames from 'classnames'\nimport { Point } from '../../utils/types'\nimport { getPointsString } from '../../utils/svg/pointsString'\nimport './Curve.scss'\n\ninterface Props {\n    x: number\n    y: number\n    width: number\n    height: number\n    points: Point[]\n    className?: string\n}\n\n// Draw the desired curve between from and to.\n// NB: SVG has 0,0 in upper left corner.\n// NB: points must be between 0 and 1 in the y range.\nconst AnimatedCurve = ({ x, y, width, height, points, className }: Props) => {\n\n    const pointsString = useMemo(() => getPointsString(points), [points]);\n\n    const [{ animatedPoints }, setCurve] = useSpring(() => ({\n        from: {animatedPoints: pointsString},\n    }));\n\n    setCurve({animatedPoints: pointsString})\n\n\n    // We use a viewBox of 0,0, 1,1 to make the svg unit size. We can then use width and height to scale it\n    // without having to recalculate points.\n\n    // how to add image from Andromeda A6 as background:\n    //<image x={0} y={0} height={1} width={1} xlinkHref={'./RisingExpo3.png'} preserveAspectRatio=\"none\"/>\n    return <svg x={x} y={y} viewBox=\"0 0 1 1\" preserveAspectRatio=\"none\" width={width} height={height}>\n        <animated.polyline\n            className={classNames('curve', className)}\n            points={animatedPoints}\n        />\n    </svg>;\n};\n\nexport default AnimatedCurve;","import { Point } from '../types'\n\nexport const getPointsString = (points: Point[]): string => {\n    return points.map((point) => `${point.x},${point.y}`).join(' ');\n}\n","import { getScaledPoints } from '../../components/curves/curveCalculator'\nimport { Point } from '../../utils/types'\nimport { Curve, LoopMode, ReleaseMode, StageId } from '../../synthcore/modules/env/types'\n\nexport const getPoints = (\n    curveFunc: (x: number) => number,\n    reflectX?: boolean,\n    reflectY?: boolean,\n): Point[] => {\n    const keypoints = 64;\n    return getScaledPoints(curveFunc, 1, keypoints, false)\n        .map((point, index) => ({x: index / keypoints, y: point}))\n        .map((point) => reflectX ? ({x: 1 - point.x, y: point.y}) : point)\n        .map((point) => reflectY ? ({x: point.x, y: 1 - point.y}) : point);\n}\n\n\nexport const stageNames = {\n    [StageId.DELAY]: 'Delay',\n    [StageId.ATTACK]: 'Attack',\n    [StageId.DECAY1]: 'Dec 1',\n    [StageId.DECAY2]: 'Dec 2',\n    [StageId.SUSTAIN]: 'Sustain',\n    [StageId.RELEASE1]: 'Rel 1',\n    [StageId.RELEASE2]: 'Rel 2',\n    [StageId.STOPPED]: 'Stopped',\n}\n\nexport const loopModeNames = {\n    [LoopMode.GATED]: 'gated',\n    [LoopMode.COUNTED]: 'times',\n    [LoopMode.INFINITE]: 'forever',\n}\n\nexport const releaseModeNames = {\n    [ReleaseMode.NORMAL]: 'Normal release',\n    [ReleaseMode.FREE_RUN]: 'Free running',\n    [ReleaseMode.SKIP_R1]: 'Skip R1',\n}\n\nexport const curveNames = {\n    [Curve.EXP3]: 'Exp 3',\n    [Curve.EXP2]: 'Exp 2',\n    [Curve.EXP1]: 'Exp 1',\n    [Curve.LIN]: 'Linear',\n    [Curve.LOG1]: 'Log 1',\n    [Curve.LOG2]: 'Log 2',\n    [Curve.LOG3]: 'Log 3',\n}","import React, { useMemo } from 'react'\nimport AnimatedCurve from '../../components/curves/AnimatedCurve'\nimport { Stage } from '../../synthcore/modules/env/types'\nimport { getPoints } from './utils'\nimport { curveFuncs } from '../../components/curves/curveCalculator'\nimport { Point } from '../../utils/types'\nimport classNames from 'classnames'\nimport './StageBlock.scss'\n\ninterface Props {\n    x: number\n    y: number\n    height: number\n    width: number\n    stage: Stage\n    nextStage: Stage\n    isBipolar: boolean\n}\n\nconst mapToSvg = (point: Point, isBipolar: boolean) => ({\n    x: point.x,\n    y: isBipolar ? (1 - point.y) / 2 : 1 - point.y\n})\n\n// Draw the desired slope between from and to. NB: SVG has 0,0 in upper left corner.\nconst StageBlock = ({ x, y, width, height, stage, nextStage, isBipolar }: Props) => {\n\n    const startLev = stage.enabled ? stage.level : nextStage.level;\n\n    const endLev = nextStage.level\n\n    const offset = startLev\n    const scale = endLev - startLev\n\n    const points = useMemo(\n        () => getPoints(curveFuncs[stage.curve], false, false),\n        [stage.curve]\n    )\n\n    const svgPoints = useMemo(\n        () => points\n            .map((point) => ({ x: point.x, y: point.y * scale + offset }))\n            .map((point) => mapToSvg(point, isBipolar)),\n        [points, offset, scale, isBipolar]\n    )\n\n    return <svg x={x} y={y} className={classNames('stage-block', {'stage-block-disabled': !stage.enabled})}>\n        <AnimatedCurve\n            x={0}\n            y={0}\n            width={width}\n            height={height}\n            points={svgPoints}\n            className={'stage-block-line'}\n        />\n    </svg>\n}\n\nexport default StageBlock","import React, { useCallback } from 'react'\nimport { StageId, Envelope, Stage } from '../../synthcore/modules/env/types'\nimport StageBlock from './StageBlock'\nimport { selectCurrStageId, toggleStageSelected } from '../../synthcore/modules/env/envReducer'\nimport { useAppDispatch, useAppSelector } from '../../synthcore/hooks'\nimport classNames from 'classnames'\nimport './Stages.scss'\n\ninterface Props {\n    env: Envelope\n}\n\nconst getNextEnabled = (stages: Stage[], currentId: StageId) => {\n    for (let i = currentId + 1; i < stages.length; i++) {\n        const stage = stages[i]\n        if (stage.enabled) {\n            return stage\n        }\n    }\n    return stages[StageId.STOPPED]\n}\n\n// Draw the desired slope between from and to. NB: SVG has 0,0 in upper left corner.\nconst Stages = ({ env }: Props) => {\n\n    const dispatch = useAppDispatch();\n    const select = useAppSelector;\n    const stages = env.stages\n    const enabledStages = stages.filter((stage) => stage.enabled)\n    const stageCount = enabledStages.length - 1 // -1 because stopped is hidden.\n    const stageWidth = 1 / stageCount\n    const graphCenter = env.bipolar ? 1 / 2 : 1\n\n    let startX = 0\n\n    const currStageId = select(selectCurrStageId);\n\n    const onSvgClicked = useCallback((stageId: number) => {\n        dispatch(toggleStageSelected({env: env.id, stage: stageId}))\n    }, [env, dispatch])\n\n\n    return <svg x={0} y={0}>\n        {\n            env.bipolar && <line\n              x1={0} y1={graphCenter}\n              x2={1} y2={graphCenter}\n              className={'stages-center-line'}\n            />\n        }\n        {\n            stages.map((stage, index) => {\n                if (stage.id === StageId.STOPPED) {\n                    return null\n                }\n                const nextStage = getNextEnabled(stages, stage.id)\n                const isLast = index === stages.length - 2\n                const enabled = stage.enabled\n                const content = <React.Fragment key={stage.id}>\n                    {enabled &&\n                    <>\n                      <rect x={startX} y={0} width={stageWidth} height={1} onClick={() => onSvgClicked(stage.id)}\n                            className={classNames('stages-background', {'stages-background--selected': currStageId === stage.id})}\n\n                      />\n                      <line\n                        x1={startX} y1={0}\n                        x2={startX} y2={1}\n                        className={'stages-divider'}\n                      />\n                    </>}\n                    {isLast && <line\n                      x1={startX + stageWidth} y1={0}\n                      x2={startX + stageWidth} y2={1}\n                      className={'stages-divider'}\n                    />}\n                    <StageBlock\n                        x={startX}\n                        y={0}\n                        width={stageWidth}\n                        height={1}\n                        stage={stage}\n                        nextStage={nextStage}\n                        isBipolar={env.bipolar}\n                    />\n                </React.Fragment>\n                if (enabled) {\n                    startX += stageWidth\n                }\n                return content\n            })\n        }\n    </svg>\n}\n\nexport default Stages","import React from 'react'\nimport classNames from 'classnames'\nimport './Button.scss'\n\ninterface Props {\n    active: boolean,\n    onClick: () => void,\n    children?:\n        | React.ReactChild\n        | React.ReactChild[];\n}\n\n// Draw the desired slope between from and to. NB: SVG has 0,0 in upper left corner.\nconst Button = ({ active, onClick, children}: Props) => {\n    return <div onClick={onClick} className={classNames('ctrl-button', {'ctrl-button--active': active})}>{children}</div>\n}\n\nexport default Button","import React from 'react'\nimport { Envelope, StageId } from '../../synthcore/modules/env/types'\nimport Button from '../Button'\nimport { stageNames } from './utils'\nimport { useAppDispatch } from '../../synthcore/hooks'\nimport { toggleStageEnabled } from '../../synthcore/modules/env/envReducer'\nimport './StageActivator.scss'\n\ninterface Props {\n    env: Envelope\n}\n\n// Draw the desired slope between from and to. NB: SVG has 0,0 in upper left corner.\nconst StageActivator = ({ env }: Props) => {\n\n    const dispatch = useAppDispatch()\n\n    return <div className=\"stage-activator\">\n        <div className =\"env-ctrl__heading\">Active</div>\n        {env.stages.map((stage, index) => {\n            if (stage.id === StageId.STOPPED) {\n                return null\n            }\n            return <Button\n                key={stage.id}\n                active={stage.enabled}\n                onClick={() => dispatch(toggleStageEnabled({ env: env.id, stage: stage.id }))}\n            >{stageNames[stage.id]}</Button>\n        })}\n    </div>\n}\n\nexport default StageActivator","import React from 'react'\nimport { Envelope, LoopMode, ReleaseMode, StageId } from '../../synthcore/modules/env/types'\nimport Button from '../Button'\nimport { useAppDispatch, useAppSelector } from '../../synthcore/hooks'\nimport {\n    selectCurrStageId,\n    selectInvert,\n    selectLoopEnabled,\n    selectLoopMode,\n    selectReleaseMode,\n    selectRetrigger,\n    toggleInvert,\n    toggleLoopEnabled,\n    toggleLoopMode,\n    toggleReleaseMode,\n    toggleRetrigger\n} from '../../synthcore/modules/env/envReducer'\nimport { curveNames, loopModeNames, releaseModeNames } from './utils'\nimport './EnvOptions.scss'\n\ninterface Props {\n    env: Envelope\n}\n\nconst getLoopLabel = (loopMode: LoopMode, loops: number) => `Loop ${loopMode === LoopMode.COUNTED ? loops + ' ': '' } ${loopModeNames[loopMode]}`\n\n// Draw the desired slope between from and to. NB: SVG has 0,0 in upper left corner.\nconst EnvOptions = ({ env }: Props) => {\n\n    const dispatch = useAppDispatch()\n    const releaseMode = useAppSelector(selectReleaseMode(env.id))\n    const loopMode = useAppSelector(selectLoopMode(env.id))\n    const loopEnabled = useAppSelector(selectLoopEnabled(env.id))\n    const currStageId = useAppSelector(selectCurrStageId)\n\n    const hasCurve = currStageId !== StageId.STOPPED && currStageId !== StageId.DELAY && currStageId !== StageId.SUSTAIN\n    const curveLabel = hasCurve ? curveNames[env.stages[currStageId].curve] : '-';\n    return <div className=\"env-options\">\n        <div className =\"env-ctrl__heading\">Envelope {env.id + 1}</div>\n        <div className =\"env-ctrl__heading\">{curveLabel}</div>\n        <Button active={useAppSelector(selectInvert(env.id))} onClick={() => dispatch(toggleInvert({ env: env.id }))}>Invert</Button>\n        <Button active={useAppSelector(selectRetrigger(env.id))} onClick={() => dispatch(toggleRetrigger({ env: env.id }))}>Retrigger</Button>\n        <Button active={releaseMode !== ReleaseMode.NORMAL} onClick={() => dispatch(toggleReleaseMode({ env: env.id }))}>\n            {releaseModeNames[releaseMode]}\n        </Button>\n        <Button active={loopEnabled} onClick={() => dispatch(toggleLoopMode({ env: env.id }))}>\n            {getLoopLabel(loopMode, env.maxLoops)}\n        </Button>\n        <Button active={loopEnabled} onClick={() => dispatch(toggleLoopEnabled({ env: env.id }))}>\n            Loop\n        </Button>\n\n    </div>\n}\n\nexport default EnvOptions","import React from 'react'\nimport { Envelope, Stage, StageId } from '../../synthcore/modules/env/types'\nimport './StageParams.scss'\nimport classNames from 'classnames'\n\ninterface Props {\n    className?: string\n    env: Envelope\n}\n\nconst formatTime = (time: number) => {\n    const timeMillis = Math.floor(65534 * time) + 1\n    if (timeMillis < 500) {\n        return `${timeMillis}ms`\n    } else if (timeMillis < 20000) {\n        return `${Math.floor(timeMillis / 10) / 100}s`\n    } else {\n        const seconds = Math.floor(timeMillis / 1000)\n        return `${seconds}s`\n    }\n}\n\nconst formatLevel = (stage: Stage) => Math.round(stage.level * 1000) / 10\n\n// Draw the desired slope between from and to. NB: SVG has 0,0 in upper left corner.\nconst StageParams = ({ env, className }: Props) => {\n    return <div className={classNames('stage-params', className)}>\n        {env.stages.filter((stage) => stage.enabled && stage.id !== StageId.STOPPED).map((stage) => {\n            const {id} = stage\n            const levelHidden = id !== StageId.DECAY2 && id !== StageId.SUSTAIN && id !== StageId.RELEASE2;\n            const timeHidden = id === StageId.SUSTAIN;\n            return <div className=\"env-ctrl__footer\" key={stage.id}>\n                <div className={classNames('env-ctrl__footer__item', {'env-ctrl__footer__item--hidden': timeHidden})}>{formatTime(stage.time)}</div>\n                <div className={classNames('env-ctrl__footer__item', {'env-ctrl__footer__item--hidden': levelHidden})}>{formatLevel(stage)}</div>\n            </div>\n        })}\n    </div>\n}\n\nexport default StageParams","import React from 'react'\nimport { Envelope, StageId } from '../../synthcore/modules/env/types'\nimport classNames from 'classnames'\nimport { stageNames } from './utils'\nimport './StageNames.scss'\n\ninterface Props {\n    className?: string\n    env: Envelope\n}\n\n// Draw the desired slope between from and to. NB: SVG has 0,0 in upper left corner.\nconst StageNames = ({ env, className }: Props) => {\n    return <div className={classNames('stage-names', className)}>\n        {env.stages.filter((stage) => stage.enabled && stage.id !== StageId.STOPPED).map((stage) => {\n            return <div key={stage.id} className=\"env-ctrl__heading\">\n                {stageNames[stage.id]}\n            </div>\n        })}\n    </div>\n}\n\nexport default StageNames\n","import React from 'react'\nimport Stages from './Stages'\nimport { useAppSelector } from '../../synthcore/hooks'\nimport { selectCurrEnvId, selectEnvelope } from '../../synthcore/modules/env/envReducer'\nimport StageActivator from './StageActivator'\nimport EnvOptions from './EnvOptions'\nimport StageParams from './StageParams'\nimport StageNames from './StageNames'\nimport './EnvelopeControl.scss'\n\n// Draw the desired slope between from and to. NB: SVG has 0,0 in upper left corner.\nconst EnvelopeControl = () => {\n\n    const envId = useAppSelector(selectCurrEnvId)\n    const env = useAppSelector(selectEnvelope(envId))\n\n    return <div className=\"env-ctrl\">\n        <EnvOptions env={env}/>\n        <div className=\"env-ctrl-stages\">\n            <StageNames env={env}/>\n            <div className=\"env-ctrl-graph\">\n                <svg viewBox={`0 0 1 1`} preserveAspectRatio=\"none\" className=\"env-ctrl-graph-svg\">\n                    <Stages env={env}/>\n                </svg>\n            </div>\n            <StageParams env={env}/>\n        </div>\n        <StageActivator env={env}/>\n\n    </div>\n}\n\nexport default EnvelopeControl","import React from 'react'\nimport PotLabels from '../PotLabels'\n\nconst EnvPotLabels = () => {\n    return <PotLabels labels={['Envelope', 'Time', 'Level', 'Curve', 'Loops']}/>\n}\n\nexport default EnvPotLabels","import React from 'react'\nimport EnvelopeControl from './EnvelopeControl'\nimport EnvPotLabels from './EnvPotLabels'\n\nconst Mod = () => <>\n    <EnvelopeControl/>\n    <EnvPotLabels/>\n</>\n\nexport default Mod","import React from 'react'\nimport { useAppSelector } from '../synthcore/hooks'\nimport { selectCurrScreen } from '../synthcore/modules/mainDisplay/mainDisplayReducer'\nimport { MainDisplayScreenId } from '../synthcore/modules/mainDisplay/types'\nimport Mod from './mods/Mod'\nimport Env from './envelopes/Env'\nimport './Controller.scss'\n\nconst Controller = () => {\n\n    const currScreen = useAppSelector(selectCurrScreen)\n    return <div className=\"controller-grid\">\n        {\n            currScreen === MainDisplayScreenId.ENV && <Env/>\n        }\n        {\n            currScreen === MainDisplayScreenId.MOD && <Mod/>\n        }\n    </div>\n}\n\nexport default Controller","import React, { useEffect, useRef, useState } from 'react'\nimport DCO1 from './modules/DCO1'\nimport DCO2 from './modules/DCO2'\nimport VCO from './modules/VCO'\nimport PreFilterMixer from './modules/PreFilterMixer'\nimport PostFilterMixer from './modules/PostFilterMixer'\nimport Noise from './modules/Noise'\nimport Ringmod from './modules/Ringmod'\nimport Distortion from './modules/Distortion'\nimport LowPassFilter from './modules/LowPassFilter'\nimport StateVariableFilter from './modules/StateVariableFilter'\nimport Envelope from './modules/Envelope'\nimport LFO from './modules/LFO'\nimport DigitalFX from './modules/DigitalFX'\nimport OutputMixer from './modules/OutputMixer'\nimport Chorus from './modules/Chorus'\nimport BitCrusher from './modules/BitCrusher'\nimport Arpeggiator from './modules/Arpeggiator'\nimport MainDisplay from './modules/MainDisplay'\nimport Clock from './modules/Clock'\nimport BitCrusherPre from './modules/BitCrusherPre'\nimport Route from './modules/Route'\nimport KeyboardControls from './modules/KeyboardControls'\nimport VoiceSelector from './modules/VoiceSelector'\nimport Controller from '../controller/Controller'\nimport { useAppSelector } from '../synthcore/hooks'\nimport { selectEnv3Id } from '../synthcore/modules/env/envReducer'\nimport './MainPanel.scss'\n\n/**\n * TODO:\n * VCO sync sources\n * Cross mod source, hvilke\n * Saw polarity button\n * Env amount for D/VCOs - dette er en felles pot med knapp på A6\n * Lin/log FM? necessary?\n * SEE RESEARCH.md for more\n */\nconst MainPanel = () => {\n\n    const env3Id = useAppSelector(selectEnv3Id)\n    //const panelHeight = 350;\n    //const panelWidth = 1050;\n\n    const osc1Col = 70\n    const osc2Col = osc1Col + 115\n    const osc3Col = osc2Col + 115\n\n    const lfoCol = 20\n    const noiseCol = 20\n    const ringModCol = noiseCol + 45\n    const fxCol = ringModCol + 41\n\n    const routeCol = 20\n    const clockCol = routeCol + 56\n    const arpCol = clockCol + 84\n\n    const sourceMixCol = 180\n    const displayCol = osc3Col + 85\n    const keyCtrlCol = displayCol - 22\n    const voiceSelCol = displayCol\n\n    const filterCol = displayCol + 270\n    const voiceMixCol = filterCol + 70\n\n    const envCol = voiceMixCol + 55\n    const outFx1Col = envCol\n    const outFx2Col = outFx1Col + 130\n    const outputMixerCol = envCol + 5\n\n    const oscRow = 60\n\n    const noiseRow = oscRow + 85\n    const sourceMixRow = noiseRow + 55\n    const fxRow = noiseRow\n    const lfo1Row = noiseRow + 55\n    const clockRow = lfo1Row + 90\n\n    const voiceSelRow = 12\n    const displayRow = voiceSelRow + 58\n    const keyCtrlRow = displayRow + 233\n\n    const outputFxRow = 210\n    const arpRow = clockRow\n\n    const outputMixerRow = outputFxRow + 85\n\n    // Gets the svg placeholder for the display and extracts size and position,\n    // this is used to create an overlay div in the same position further down\n    // that will act as the real display.\n    const [dispRect, setDispRect] = useState<{\n        x: number, y: number, width: number, height: number\n    }>()\n    const displayRef = useRef<SVGRectElement>(null)\n    useEffect(() => {\n        if (displayRef.current) {\n            const bound = displayRef.current.getBoundingClientRect()\n            setDispRect({\n                x: window.scrollX + bound.left,\n                y: window.scrollY + bound.top,\n                width: bound.width,\n                height: bound.height,\n            })\n        }\n    },[])\n\n\n    // PS: 1 inch in svg is 96pixels, so 1cm = 96 / 2.54\n    return (\n        <>\n            <svg width=\"105cm\" height=\"35cm\" viewBox=\"0 0 1050 350\" className=\"panel\">\n                <DCO1 x={osc1Col} y={oscRow}/>\n                <DCO2 x={osc2Col} y={oscRow}/>\n                <VCO x={osc3Col} y={oscRow}/>\n\n                <Noise x={noiseCol} y={noiseRow}/>\n                <Ringmod x={ringModCol} y={noiseRow}/>\n                <Distortion x={fxCol} y={fxRow}/>\n                <BitCrusherPre x={fxCol + 135} y={fxRow}/>\n\n                <LFO x={lfoCol} y={lfo1Row}/>\n                <PreFilterMixer x={sourceMixCol} y={sourceMixRow}/>\n\n                <Route x={routeCol} y={clockRow}/>\n                <Clock x={clockCol} y={clockRow}/>\n                <Arpeggiator x={arpCol} y={arpRow}/>\n\n                <VoiceSelector x={voiceSelCol} y={voiceSelRow}/>\n                <MainDisplay x={displayCol} y={displayRow} ref={displayRef}/>\n                <KeyboardControls x={keyCtrlCol} y={keyCtrlRow}/>\n\n                <LowPassFilter x={filterCol} y={82}/>\n                <StateVariableFilter x={filterCol} y={250}/>\n                <PostFilterMixer x={voiceMixCol} y={5}/>\n\n\n                <Envelope x={envCol} y={5} label=\"Env 1 - filter\" envId={0}/>\n                <Envelope x={envCol} y={75} label=\"Env 2 - amp\" envId={1}/>\n                <Envelope x={envCol} y={145} label=\"Env 3 - 5\" showSelect={true} envId={env3Id}/>\n\n                <DigitalFX x={outFx1Col} y={outputFxRow}/>\n                <Chorus x={outFx2Col} y={outputFxRow + 10}/>\n                <BitCrusher x={outFx2Col} y={outputFxRow + 40}/>\n\n                <OutputMixer x={outputMixerCol} y={outputMixerRow}/>\n            </svg>\n            {dispRect && <div className=\"panel-main-display\" style={{\n                top: dispRect.y,\n                left: dispRect.x,\n                width: dispRect.width,\n                height: dispRect.height,\n            }}>\n              <Controller/>\n            </div>}\n        </>\n    )\n}\n\nexport default MainPanel","import React from 'react';\nimport './Keyboard.scss';\n\nconst Keyboard = () => {\n\n    const panelHeight = 200;\n    const panelWidth = 1050;\n\n    const keyboardWidth = 849;\n    const keyboardHeight = 140;\n\n    const keyWidth = keyboardWidth / 36;\n\n    const rightEndcapThickness = 15;\n    const bottomThickness = 10;\n\n    const kbdX = panelWidth - keyboardWidth - rightEndcapThickness;\n    const kbdY = panelHeight - keyboardHeight - bottomThickness;\n\n    return (\n        <svg width=\"105cm\" height=\"20cm\" viewBox=\"0 0 1050 200\" className=\"keyboard\">\n            <rect\n                x={kbdX}\n                y={kbdY}\n                height={keyboardHeight}\n                width={keyboardWidth}\n                className=\"keyboard-keys\"\n            />\n            <line x1={kbdX + keyWidth * 7} y1={kbdY} x2={kbdX + keyWidth * 7} y2={kbdY + keyboardHeight} className=\"keyboard-keys-octave-divider\"/>\n            <line x1={kbdX + keyWidth * 14} y1={kbdY} x2={kbdX + keyWidth * 14} y2={kbdY + keyboardHeight} className=\"keyboard-keys-octave-divider\"/>\n            <line x1={kbdX + keyWidth * 21} y1={kbdY} x2={kbdX + keyWidth * 21} y2={kbdY + keyboardHeight} className=\"keyboard-keys-octave-divider\"/>\n            <line x1={kbdX + keyWidth * 28} y1={kbdY} x2={kbdX + keyWidth * 28} y2={kbdY + keyboardHeight} className=\"keyboard-keys-octave-divider\"/>\n        </svg>\n    );\n}\n\nexport default Keyboard","import React from 'react';\nimport MainPanel from './components/MainPanel';\nimport Keyboard from './components/Keyboard';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPanel/>\n      <Keyboard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import './midi/cppControllerConfigGenerator';\nimport { Provider } from 'react-redux'\nimport { store } from './synthcore/store'\nimport midiApi from './midi/midiApi'\nimport './index.css';\n\nmidiApi.initReceive()\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}